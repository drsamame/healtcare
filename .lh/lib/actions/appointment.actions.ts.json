{
    "sourceFile": "lib/actions/appointment.actions.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1721679147429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1721679212708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,24 @@\n+import { ID } from 'node-appwrite';\r\n+import {\r\n+\tDATABASE_ID,\r\n+\tdatabases,\r\n+\tPATIENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+\r\n+export const CreateAppointment = async (\r\n+\tappointmentData: CreateAppointmentParams\r\n+) => {\r\n+\ttry {\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\t...appointmentData,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error: any) {}\r\n+};\r\n"
                },
                {
                    "date": 1721679373695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,24 @@\n+import { ID } from 'node-appwrite';\r\n+import {\r\n+\tDATABASE_ID,\r\n+\tdatabases,\r\n+\tPATIENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+\r\n+export const CreateAppointment = async (\r\n+\tappointmentData: CreateAppointmentParams\r\n+) => {\r\n+\ttry {\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\t...appointmentData,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error: any) {}\r\n+};\r\n"
                },
                {
                    "date": 1721679476331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,45 +21,4 @@\n \r\n \t\treturn parseStringify(newPatient);\r\n \t} catch (error: any) {}\r\n };\r\n-import { ID } from 'node-appwrite';\r\n-import {\r\n-\tDATABASE_ID,\r\n-\tdatabases,\r\n-\tPATIENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-\r\n-export const CreateAppointment = async (\r\n-\tappointmentData: CreateAppointmentParams\r\n-) => {\r\n-\ttry {\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\t...appointmentData,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error: any) {}\r\n-};\r\n-import { ID } from 'node-appwrite';\r\n-import { DATABASE_ID, PATIENT_COLLECTION_ID } from '../appwite.config';\r\n-\r\n-export const CreateAppointment = async (appointmentData: CreateAppointmentParams) => {\r\n-\ttry {\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\t...patient,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error: any) {}\r\n-};\r\n"
                },
                {
                    "date": 1721679501406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,24 @@\n+import { ID } from 'node-appwrite';\r\n+import {\r\n+\tDATABASE_ID,\r\n+\tdatabases,\r\n+\tPATIENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+\r\n+export const CreateAppointment = async (\r\n+\tappointmentData: CreateAppointmentParams\r\n+) => {\r\n+\ttry {\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\t...appointmentData,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error: any) {}\r\n+};\r\n"
                },
                {
                    "date": 1721680681493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,15 @@\n+'use server';\r\n+\r\n import { ID } from 'node-appwrite';\r\n import {\r\n \tDATABASE_ID,\r\n \tdatabases,\r\n \tPATIENT_COLLECTION_ID,\r\n } from '../appwite.config';\r\n import { parseStringify } from '../utils';\r\n \r\n-export const CreateAppointment = async (\r\n+export const createAppointment = async (\r\n \tappointmentData: CreateAppointmentParams\r\n ) => {\r\n \ttry {\r\n \t\tconst newPatient = await databases.createDocument(\r\n"
                },
                {
                    "date": 1721680724249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,28 +23,4 @@\n \r\n \t\treturn parseStringify(newPatient);\r\n \t} catch (error: any) {}\r\n };\r\n-import { ID } from 'node-appwrite';\r\n-import {\r\n-\tDATABASE_ID,\r\n-\tdatabases,\r\n-\tPATIENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-\r\n-export const CreateAppointment = async (\r\n-\tappointmentData: CreateAppointmentParams\r\n-) => {\r\n-\ttry {\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\t...appointmentData,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error: any) {}\r\n-};\r\n"
                },
                {
                    "date": 1721686491816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,5 +21,7 @@\n \t\t\t\t...appointmentData,\r\n \t\t\t}\r\n \t\t);\r\n \r\n-\t\treturn parseStringify(newPatient);\r\n\\ No newline at end of file\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error: any) {}\r\n+};\r\n"
                },
                {
                    "date": 1721686516170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n \r\n export const createAppointment = async (\r\n \tappointmentData: CreateAppointmentParams\r\n ) => {\r\n+\tconsole.log(appointmentData)\r\n \ttry {\r\n \t\tconst newPatient = await databases.createDocument(\r\n \t\t\tDATABASE_ID!,\r\n \t\t\tPATIENT_COLLECTION_ID!,\r\n@@ -23,7 +24,4 @@\n \r\n \t\treturn parseStringify(newPatient);\r\n \t} catch (error: any) {}\r\n };\r\n-\t} catch (error: any) {}\r\n-};\r\n-\n"
                },
                {
                    "date": 1721686549608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,6 +22,8 @@\n \t\t\t}\r\n \t\t);\r\n \r\n \t\treturn parseStringify(newPatient);\r\n-\t} catch (error: any) {}\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error)\r\n+\t}\r\n };\r\n"
                },
                {
                    "date": 1721687753939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,29 @@\n+'use server';\r\n+\r\n+import { ID } from 'node-appwrite';\r\n+import {\r\n+\tDATABASE_ID,\r\n+\tdatabases,\r\n+\tPATIENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+\r\n+export const createAppointment = async (\r\n+\tappointmentData: CreateAppointmentParams\r\n+) => {\r\n+\tconsole.log(appointmentData)\r\n+\ttry {\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\t...appointmentData,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error)\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1721687778231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,29 @@\n+'use server';\r\n+\r\n+import { ID } from 'node-appwrite';\r\n+import {\r\n+\tDATABASE_ID,\r\n+\tdatabases,\r\n+\tAPPOINTMENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+\r\n+export const createAppointment = async (\r\n+\tappointmentData: CreateAppointmentParams\r\n+) => {\r\n+\tconsole.log(appointmentData);\r\n+\ttry {\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\t...appointmentData,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1721766285079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,62 +26,21 @@\n \t} catch (error: any) {\r\n \t\tconsole.log(error);\r\n \t}\r\n };\r\n-'use server';\r\n \r\n-import { ID } from 'node-appwrite';\r\n-import {\r\n-\tDATABASE_ID,\r\n-\tdatabases,\r\n-\tPATIENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-\r\n-export const createAppointment = async (\r\n-\tappointmentData: CreateAppointmentParams\r\n-) => {\r\n-\tconsole.log(appointmentData)\r\n+export const getAppointment = async (appointmentId: string) => {\r\n \ttry {\r\n-\t\tconst newPatient = await databases.createDocument(\r\n+\t\tconst appointment = await databases.getDocument(\r\n \t\t\tDATABASE_ID!,\r\n \t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\t...appointmentData,\r\n-\t\t\t}\r\n+\t\t\tappointmentId\r\n \t\t);\r\n \r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error)\r\n-\t}\r\n-};\r\n-'use server';\r\n-\r\n-import { ID } from 'node-appwrite';\r\n-import {\r\n-\tDATABASE_ID,\r\n-\tdatabases,\r\n-\tPATIENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-\r\n-export const createAppointment = async (\r\n-\tappointmentData: CreateAppointmentParams\r\n-) => {\r\n-\tconsole.log(appointmentData)\r\n-\ttry {\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\t...appointmentData,\r\n-\t\t\t}\r\n+\t\treturn parseStringify(appointment);\r\n+\t} catch (error) {\r\n+\t\tconsole.error(\r\n+\t\t\t'An error occurred while retrieving the existing patient:',\r\n+\t\t\terror\r\n \t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error)\r\n \t}\r\n };\r\n"
                },
                {
                    "date": 1721767538503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n \r\n export const createAppointment = async (\r\n \tappointmentData: CreateAppointmentParams\r\n ) => {\r\n-\tconsole.log(appointmentData);\r\n \ttry {\r\n \t\tconst newPatient = await databases.createDocument(\r\n \t\t\tDATABASE_ID!,\r\n \t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n"
                },
                {
                    "date": 1721769471096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,45 @@\n+'use server';\r\n+\r\n+import { ID } from 'node-appwrite';\r\n+import {\r\n+\tDATABASE_ID,\r\n+\tdatabases,\r\n+\tAPPOINTMENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+\r\n+export const createAppointment = async (\r\n+\tappointmentData: CreateAppointmentParams\r\n+) => {\r\n+\ttry {\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\t...appointmentData,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const getAppointment = async (appointmentId: string) => {\r\n+\ttry {\r\n+\t\tconst appointment = await databases.getDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tappointmentId\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(appointment.documents[0]);\r\n+\t} catch (error) {\r\n+\t\tconsole.error(\r\n+\t\t\t'An error occurred while retrieving the existing patient:',\r\n+\t\t\terror\r\n+\t\t);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1722290613253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,94 @@\n+'use server';\r\n+\r\n+import { ID, Query } from 'node-appwrite';\r\n+import {\r\n+\tDATABASE_ID,\r\n+\tdatabases,\r\n+\tAPPOINTMENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+import { Appointment } from '@/types/appwrite.types';\r\n+\r\n+export const createAppointment = async (\r\n+\tappointmentData: CreateAppointmentParams\r\n+) => {\r\n+\ttry {\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\t...appointmentData,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const getAppointment = async (appointmentId: string) => {\r\n+\ttry {\r\n+\t\tconst appointment = await databases.getDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tappointmentId\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(appointment.documents[0]);\r\n+\t} catch (error) {\r\n+\t\tconsole.error(\r\n+\t\t\t'An error occurred while retrieving the existing patient:',\r\n+\t\t\terror\r\n+\t\t);\r\n+\t}\r\n+};\r\n+\r\n+export const getRecentAppointmentList = async () => {\r\n+\ttry {\r\n+\t\tconst appointments = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\t[Query.orderDesc('$createdAt')]\r\n+\t\t);\r\n+\r\n+\t\r\n+\t\tconst initialCounts = {\r\n+\t\t\tscheduledCount: 0,\r\n+\t\t\tpendingCount: 0,\r\n+\t\t\tcancelledCount: 0,\r\n+\t\t};\r\n+\r\n+\t\tconst counts = (appointments.documents as Appointment[]).reduce(\r\n+\t\t\t(acc, appointment) => {\r\n+\t\t\t\tswitch (appointment.status) {\r\n+\t\t\t\t\tcase 'scheduled':\r\n+\t\t\t\t\t\tacc.scheduledCount++;\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\tcase 'pending':\r\n+\t\t\t\t\t\tacc.pendingCount++;\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\tcase 'cancelled':\r\n+\t\t\t\t\t\tacc.cancelledCount++;\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t}\r\n+\t\t\t\treturn acc;\r\n+\t\t\t},\r\n+\t\t\tinitialCounts\r\n+\t\t);\r\n+\r\n+\t\tconst data = {\r\n+\t\t\ttotalCount: appointments.total,\r\n+\t\t\t...counts,\r\n+\t\t\tdocuments: appointments.documents,\r\n+\t\t};\r\n+\r\n+\t\treturn parseStringify(data);\r\n+\t} catch (error) {\r\n+\t\tconsole.error(\r\n+\t\t\t'An error occurred while retrieving the recent appointments:',\r\n+\t\t\terror\r\n+\t\t);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1722413407837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+'use server';\r\n+\r\n+import { ID, Query } from 'node-appwrite';\r\n+import {\r\n+\tDATABASE_ID,\r\n+\tdatabases,\r\n+\tAPPOINTMENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { formatDateTime, parseStringify } from '../utils';\r\n+import { Appointment } from '@/types/appwrite.types';\r\n+import { revalidatePath } from 'next/cache';\r\n+\r\n+export const createAppointment = async (\r\n+\tappointmentData: CreateAppointmentParams\r\n+) => {\r\n+\ttry {\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\t...appointmentData,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const getAppointment = async (appointmentId: string) => {\r\n+\ttry {\r\n+\t\tconst appointment = await databases.getDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tappointmentId\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(appointment.documents[0]);\r\n+\t} catch (error) {\r\n+\t\tconsole.error(\r\n+\t\t\t'An error occurred while retrieving the existing patient:',\r\n+\t\t\terror\r\n+\t\t);\r\n+\t}\r\n+};\r\n+\r\n+export const getRecentAppointmentList = async () => {\r\n+\ttry {\r\n+\t\tconst appointments = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\t[Query.orderDesc('$createdAt')]\r\n+\t\t);\r\n+\r\n+\t\tconst initialCounts = {\r\n+\t\t\tscheduledCount: 0,\r\n+\t\t\tpendingCount: 0,\r\n+\t\t\tcancelledCount: 0,\r\n+\t\t};\r\n+\r\n+\t\tconst counts = (appointments.documents as Appointment[]).reduce(\r\n+\t\t\t(acc, appointment) => {\r\n+\t\t\t\tswitch (appointment.status) {\r\n+\t\t\t\t\tcase 'scheduled':\r\n+\t\t\t\t\t\tacc.scheduledCount++;\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\tcase 'pending':\r\n+\t\t\t\t\t\tacc.pendingCount++;\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\tcase 'cancelled':\r\n+\t\t\t\t\t\tacc.cancelledCount++;\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t}\r\n+\t\t\t\treturn acc;\r\n+\t\t\t},\r\n+\t\t\tinitialCounts\r\n+\t\t);\r\n+\r\n+\t\tconst data = {\r\n+\t\t\ttotalCount: appointments.total,\r\n+\t\t\t...counts,\r\n+\t\t\tdocuments: appointments.documents,\r\n+\t\t};\r\n+\r\n+\t\treturn parseStringify(data);\r\n+\t} catch (error) {\r\n+\t\tconsole.error(\r\n+\t\t\t'An error occurred while retrieving the recent appointments:',\r\n+\t\t\terror\r\n+\t\t);\r\n+\t}\r\n+};\r\n+\r\n+export const updateAppointment = async ({\r\n+\tappointmentId,\r\n+\tuserId,\r\n+\ttimeZone,\r\n+\tappointment,\r\n+\ttype,\r\n+}: UpdateAppointmentParams) => {\r\n+\ttry {\r\n+\t\tconst updatedAppointment = await databases.updateDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tappointmentId,\r\n+\t\t\tappointment\r\n+\t\t);\r\n+\r\n+\t\tif (!updatedAppointment) throw Error;\r\n+\r\n+\t\tconst smsMessage = `Greetings from CarePulse. ${\r\n+\t\t\ttype === 'schedule'\r\n+\t\t\t\t? `Your appointment is confirmed for ${\r\n+\t\t\t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t\t\t  } with Dr. ${appointment.primaryPhysician}`\r\n+\t\t\t\t: `We regret to inform that your appointment for ${\r\n+\t\t\t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t\t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n+\t\t}.`;\r\n+\t\t//await sendSMSNotification(userId, smsMessage);\r\n+\r\n+\t\t//revalidatePath('/admin');\r\n+\t\treturn parseStringify(updatedAppointment);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1722413501541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,207 +107,23 @@\n \t\t\tappointmentId,\r\n \t\t\tappointment\r\n \t\t);\r\n \r\n-\t\tif (!updatedAppointment) throw Error;\r\n+\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n \r\n-\t\tconst smsMessage = `Greetings from CarePulse. ${\r\n-\t\t\ttype === 'schedule'\r\n-\t\t\t\t? `Your appointment is confirmed for ${\r\n-\t\t\t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n-\t\t\t\t  } with Dr. ${appointment.primaryPhysician}`\r\n-\t\t\t\t: `We regret to inform that your appointment for ${\r\n-\t\t\t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n-\t\t\t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n-\t\t}.`;\r\n+\t\t// const smsMessage = `Greetings from CarePulse. ${\r\n+\t\t// \ttype === 'schedule'\r\n+\t\t// \t\t? `Your appointment is confirmed for ${\r\n+\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t// \t\t  } with Dr. ${appointment.primaryPhysician}`\r\n+\t\t// \t\t: `We regret to inform that your appointment for ${\r\n+\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n+\t\t// }.`;\r\n \t\t//await sendSMSNotification(userId, smsMessage);\r\n \r\n \t\t//revalidatePath('/admin');\r\n \t\treturn parseStringify(updatedAppointment);\r\n \t} catch (error) {\r\n \t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n \t}\r\n };\r\n-'use server';\r\n-\r\n-import { ID, Query } from 'node-appwrite';\r\n-import {\r\n-\tDATABASE_ID,\r\n-\tdatabases,\r\n-\tAPPOINTMENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-import { Appointment } from '@/types/appwrite.types';\r\n-\r\n-export const createAppointment = async (\r\n-\tappointmentData: CreateAppointmentParams\r\n-) => {\r\n-\ttry {\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\t...appointmentData,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const getAppointment = async (appointmentId: string) => {\r\n-\ttry {\r\n-\t\tconst appointment = await databases.getDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tappointmentId\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(appointment.documents[0]);\r\n-\t} catch (error) {\r\n-\t\tconsole.error(\r\n-\t\t\t'An error occurred while retrieving the existing patient:',\r\n-\t\t\terror\r\n-\t\t);\r\n-\t}\r\n-};\r\n-\r\n-export const getRecentAppointmentList = async () => {\r\n-\ttry {\r\n-\t\tconst appointments = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\t[Query.orderDesc('$createdAt')]\r\n-\t\t);\r\n-\r\n-\t\r\n-\t\tconst initialCounts = {\r\n-\t\t\tscheduledCount: 0,\r\n-\t\t\tpendingCount: 0,\r\n-\t\t\tcancelledCount: 0,\r\n-\t\t};\r\n-\r\n-\t\tconst counts = (appointments.documents as Appointment[]).reduce(\r\n-\t\t\t(acc, appointment) => {\r\n-\t\t\t\tswitch (appointment.status) {\r\n-\t\t\t\t\tcase 'scheduled':\r\n-\t\t\t\t\t\tacc.scheduledCount++;\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t\tcase 'pending':\r\n-\t\t\t\t\t\tacc.pendingCount++;\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t\tcase 'cancelled':\r\n-\t\t\t\t\t\tacc.cancelledCount++;\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t}\r\n-\t\t\t\treturn acc;\r\n-\t\t\t},\r\n-\t\t\tinitialCounts\r\n-\t\t);\r\n-\r\n-\t\tconst data = {\r\n-\t\t\ttotalCount: appointments.total,\r\n-\t\t\t...counts,\r\n-\t\t\tdocuments: appointments.documents,\r\n-\t\t};\r\n-\r\n-\t\treturn parseStringify(data);\r\n-\t} catch (error) {\r\n-\t\tconsole.error(\r\n-\t\t\t'An error occurred while retrieving the recent appointments:',\r\n-\t\t\terror\r\n-\t\t);\r\n-\t}\r\n-};\r\n-'use server';\r\n-\r\n-import { ID } from 'node-appwrite';\r\n-import {\r\n-\tDATABASE_ID,\r\n-\tdatabases,\r\n-\tAPPOINTMENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-\r\n-export const createAppointment = async (\r\n-\tappointmentData: CreateAppointmentParams\r\n-) => {\r\n-\ttry {\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\t...appointmentData,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const getAppointment = async (appointmentId: string) => {\r\n-\ttry {\r\n-\t\tconst appointment = await databases.getDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tappointmentId\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(appointment.documents[0]);\r\n-\t} catch (error) {\r\n-\t\tconsole.error(\r\n-\t\t\t'An error occurred while retrieving the existing patient:',\r\n-\t\t\terror\r\n-\t\t);\r\n-\t}\r\n-};\r\n-'use server';\r\n-\r\n-import { ID } from 'node-appwrite';\r\n-import {\r\n-\tDATABASE_ID,\r\n-\tdatabases,\r\n-\tAPPOINTMENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-\r\n-export const createAppointment = async (\r\n-\tappointmentData: CreateAppointmentParams\r\n-) => {\r\n-\ttry {\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\t...appointmentData,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const getAppointment = async (appointmentId: string) => {\r\n-\ttry {\r\n-\t\tconst appointment = await databases.getDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tappointmentId\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(appointment);\r\n-\t} catch (error) {\r\n-\t\tconsole.error(\r\n-\t\t\t'An error occurred while retrieving the existing patient:',\r\n-\t\t\terror\r\n-\t\t);\r\n-\t}\r\n-};\r\n"
                },
                {
                    "date": 1722453099226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,9 +120,9 @@\n \t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n \t\t// }.`;\r\n \t\t//await sendSMSNotification(userId, smsMessage);\r\n \r\n-\t\t//revalidatePath('/admin');\r\n+\t\trevalidatePath('/admin');\r\n \t\treturn parseStringify(updatedAppointment);\r\n \t} catch (error) {\r\n \t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n \t}\r\n"
                },
                {
                    "date": 1722469357082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,9 @@\n \t}\r\n };\r\n \r\n export const getAppointment = async (appointmentId: string) => {\r\n+\tconsole.log(appointmentId)\r\n \ttry {\r\n \t\tconst appointment = await databases.getDocument(\r\n \t\t\tDATABASE_ID!,\r\n \t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n"
                },
                {
                    "date": 1722469389657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+'use server';\r\n+\r\n+import { ID, Query } from 'node-appwrite';\r\n+import {\r\n+\tDATABASE_ID,\r\n+\tdatabases,\r\n+\tAPPOINTMENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { formatDateTime, parseStringify } from '../utils';\r\n+import { Appointment } from '@/types/appwrite.types';\r\n+import { revalidatePath } from 'next/cache';\r\n+\r\n+export const createAppointment = async (\r\n+\tappointmentData: CreateAppointmentParams\r\n+) => {\r\n+\ttry {\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\t...appointmentData,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const getAppointment = async (appointmentId: string) => {\r\n+\tconsole.log(appointmentId)\r\n+\ttry {\r\n+\t\tconst appointment = await databases.getDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tappointmentId\r\n+\t\t);\r\n+\t\tconsole.log(appointment)\r\n+\r\n+\t\treturn parseStringify(appointment.documents[0]);\r\n+\t} catch (error) {\r\n+\t\tconsole.error(\r\n+\t\t\t'An error occurred while retrieving the existing patient:',\r\n+\t\t\terror\r\n+\t\t);\r\n+\t}\r\n+};\r\n+\r\n+export const getRecentAppointmentList = async () => {\r\n+\ttry {\r\n+\t\tconst appointments = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\t[Query.orderDesc('$createdAt')]\r\n+\t\t);\r\n+\r\n+\t\tconst initialCounts = {\r\n+\t\t\tscheduledCount: 0,\r\n+\t\t\tpendingCount: 0,\r\n+\t\t\tcancelledCount: 0,\r\n+\t\t};\r\n+\r\n+\t\tconst counts = (appointments.documents as Appointment[]).reduce(\r\n+\t\t\t(acc, appointment) => {\r\n+\t\t\t\tswitch (appointment.status) {\r\n+\t\t\t\t\tcase 'scheduled':\r\n+\t\t\t\t\t\tacc.scheduledCount++;\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\tcase 'pending':\r\n+\t\t\t\t\t\tacc.pendingCount++;\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\tcase 'cancelled':\r\n+\t\t\t\t\t\tacc.cancelledCount++;\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t}\r\n+\t\t\t\treturn acc;\r\n+\t\t\t},\r\n+\t\t\tinitialCounts\r\n+\t\t);\r\n+\r\n+\t\tconst data = {\r\n+\t\t\ttotalCount: appointments.total,\r\n+\t\t\t...counts,\r\n+\t\t\tdocuments: appointments.documents,\r\n+\t\t};\r\n+\r\n+\t\treturn parseStringify(data);\r\n+\t} catch (error) {\r\n+\t\tconsole.error(\r\n+\t\t\t'An error occurred while retrieving the recent appointments:',\r\n+\t\t\terror\r\n+\t\t);\r\n+\t}\r\n+};\r\n+\r\n+export const updateAppointment = async ({\r\n+\tappointmentId,\r\n+\tuserId,\r\n+\ttimeZone,\r\n+\tappointment,\r\n+\ttype,\r\n+}: UpdateAppointmentParams) => {\r\n+\ttry {\r\n+\t\tconst updatedAppointment = await databases.updateDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tappointmentId,\r\n+\t\t\tappointment\r\n+\t\t);\r\n+\r\n+\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n+\r\n+\t\t// const smsMessage = `Greetings from CarePulse. ${\r\n+\t\t// \ttype === 'schedule'\r\n+\t\t// \t\t? `Your appointment is confirmed for ${\r\n+\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t// \t\t  } with Dr. ${appointment.primaryPhysician}`\r\n+\t\t// \t\t: `We regret to inform that your appointment for ${\r\n+\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n+\t\t// }.`;\r\n+\t\t//await sendSMSNotification(userId, smsMessage);\r\n+\r\n+\t\trevalidatePath('/admin');\r\n+\t\treturn parseStringify(updatedAppointment);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1722469405088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n \t\t\tappointmentId\r\n \t\t);\r\n \t\tconsole.log(appointment)\r\n \r\n-\t\treturn parseStringify(appointment.documents[0]);\r\n+\t\treturn parseStringify(appointment);\r\n \t} catch (error) {\r\n \t\tconsole.error(\r\n \t\t\t'An error occurred while retrieving the existing patient:',\r\n \t\t\terror\r\n@@ -128,134 +128,4 @@\n \t} catch (error) {\r\n \t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n \t}\r\n };\r\n-'use server';\r\n-\r\n-import { ID, Query } from 'node-appwrite';\r\n-import {\r\n-\tDATABASE_ID,\r\n-\tdatabases,\r\n-\tAPPOINTMENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { formatDateTime, parseStringify } from '../utils';\r\n-import { Appointment } from '@/types/appwrite.types';\r\n-import { revalidatePath } from 'next/cache';\r\n-\r\n-export const createAppointment = async (\r\n-\tappointmentData: CreateAppointmentParams\r\n-) => {\r\n-\ttry {\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\t...appointmentData,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const getAppointment = async (appointmentId: string) => {\r\n-\tconsole.log(appointmentId)\r\n-\ttry {\r\n-\t\tconst appointment = await databases.getDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tappointmentId\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(appointment.documents[0]);\r\n-\t} catch (error) {\r\n-\t\tconsole.error(\r\n-\t\t\t'An error occurred while retrieving the existing patient:',\r\n-\t\t\terror\r\n-\t\t);\r\n-\t}\r\n-};\r\n-\r\n-export const getRecentAppointmentList = async () => {\r\n-\ttry {\r\n-\t\tconst appointments = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\t[Query.orderDesc('$createdAt')]\r\n-\t\t);\r\n-\r\n-\t\tconst initialCounts = {\r\n-\t\t\tscheduledCount: 0,\r\n-\t\t\tpendingCount: 0,\r\n-\t\t\tcancelledCount: 0,\r\n-\t\t};\r\n-\r\n-\t\tconst counts = (appointments.documents as Appointment[]).reduce(\r\n-\t\t\t(acc, appointment) => {\r\n-\t\t\t\tswitch (appointment.status) {\r\n-\t\t\t\t\tcase 'scheduled':\r\n-\t\t\t\t\t\tacc.scheduledCount++;\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t\tcase 'pending':\r\n-\t\t\t\t\t\tacc.pendingCount++;\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t\tcase 'cancelled':\r\n-\t\t\t\t\t\tacc.cancelledCount++;\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t}\r\n-\t\t\t\treturn acc;\r\n-\t\t\t},\r\n-\t\t\tinitialCounts\r\n-\t\t);\r\n-\r\n-\t\tconst data = {\r\n-\t\t\ttotalCount: appointments.total,\r\n-\t\t\t...counts,\r\n-\t\t\tdocuments: appointments.documents,\r\n-\t\t};\r\n-\r\n-\t\treturn parseStringify(data);\r\n-\t} catch (error) {\r\n-\t\tconsole.error(\r\n-\t\t\t'An error occurred while retrieving the recent appointments:',\r\n-\t\t\terror\r\n-\t\t);\r\n-\t}\r\n-};\r\n-\r\n-export const updateAppointment = async ({\r\n-\tappointmentId,\r\n-\tuserId,\r\n-\ttimeZone,\r\n-\tappointment,\r\n-\ttype,\r\n-}: UpdateAppointmentParams) => {\r\n-\ttry {\r\n-\t\tconst updatedAppointment = await databases.updateDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tappointmentId,\r\n-\t\t\tappointment\r\n-\t\t);\r\n-\r\n-\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n-\r\n-\t\t// const smsMessage = `Greetings from CarePulse. ${\r\n-\t\t// \ttype === 'schedule'\r\n-\t\t// \t\t? `Your appointment is confirmed for ${\r\n-\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n-\t\t// \t\t  } with Dr. ${appointment.primaryPhysician}`\r\n-\t\t// \t\t: `We regret to inform that your appointment for ${\r\n-\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n-\t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n-\t\t// }.`;\r\n-\t\t//await sendSMSNotification(userId, smsMessage);\r\n-\r\n-\t\trevalidatePath('/admin');\r\n-\t\treturn parseStringify(updatedAppointment);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n-\t}\r\n-};\r\n"
                },
                {
                    "date": 1722497358128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,10 +96,8 @@\n };\r\n \r\n export const updateAppointment = async ({\r\n \tappointmentId,\r\n-\tuserId,\r\n-\ttimeZone,\r\n \tappointment,\r\n \ttype,\r\n }: UpdateAppointmentParams) => {\r\n \ttry {\r\n"
                }
            ],
            "date": 1721679147429,
            "name": "Commit-0",
            "content": "import { ID } from 'node-appwrite';\r\nimport { DATABASE_ID, PATIENT_COLLECTION_ID } from '../appwite.config';\r\n\r\nexport const CreateAppointment = async (appointmentData: CreateAppointmentParams) => {\r\n\ttry {\r\n\t\tconst newPatient = await databases.createDocument(\r\n\t\t\tDATABASE_ID!,\r\n\t\t\tPATIENT_COLLECTION_ID!,\r\n\t\t\tID.unique(),\r\n\t\t\t{\r\n\t\t\t\t...patient,\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn parseStringify(newPatient);\r\n\t} catch (error: any) {}\r\n};\r\n"
        }
    ]
}