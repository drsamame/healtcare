{
    "sourceFile": "lib/actions/appointment.actions.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 34,
            "patches": [
                {
                    "date": 1724111190276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1724111266113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n \t\t\treturn {\r\n \t\t\t\terror: 'Invalid data',\r\n \t\t\t};\r\n \t\t}\r\n-\t\tconst { id } = await db.patients.create({\r\n+\t\tconst { id } = await db.appointment.create({\r\n \t\t\tdata,\r\n \t\t});\r\n \t\treturn { success: true, createdId: id };\r\n \t} catch (error) {\r\n"
                },
                {
                    "date": 1724111577591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n \t\t\treturn {\r\n \t\t\t\terror: 'Invalid data',\r\n \t\t\t};\r\n \t\t}\r\n+\t\tconsole.log(data)\r\n \t\tconst { id } = await db.appointment.create({\r\n \t\t\tdata,\r\n \t\t});\r\n \t\treturn { success: true, createdId: id };\r\n"
                },
                {
                    "date": 1724112461445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \tappointmentData: CreateAppointmentParams\r\n ) => {\r\n \ttry {\r\n \t\tconst { data, success } = CreateAppointmentSchema.safeParse(appointmentData);\r\n-\t\tconsole.log(data);\r\n+\t\tconsole.log(data, 'data');\r\n \t\tif (!success) {\r\n \t\t\treturn {\r\n \t\t\t\terror: 'Invalid data',\r\n \t\t\t};\r\n"
                },
                {
                    "date": 1724112617935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,10 @@\n \tappointmentData: CreateAppointmentParams\r\n ) => {\r\n \ttry {\r\n \t\tconst { data, success } = CreateAppointmentSchema.safeParse(appointmentData);\r\n-\t\tconsole.log(data, 'data');\r\n+\t\tconsole.log(data);\r\n+\t\tconsole.log(appointmentData)\r\n \t\tif (!success) {\r\n \t\t\treturn {\r\n \t\t\t\terror: 'Invalid data',\r\n \t\t\t};\r\n"
                },
                {
                    "date": 1724112701651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,138 @@\n+'use server';\r\n+\r\n+import { ID, Query } from 'node-appwrite';\r\n+import {\r\n+\tDATABASE_ID,\r\n+\tdatabases,\r\n+\tAPPOINTMENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { formatDateTime, parseStringify } from '../utils';\r\n+import { revalidatePath } from 'next/cache';\r\n+import { CreateAppointmentSchema } from '../validation';\r\n+import { db } from '../db';\r\n+import { AuthError } from 'next-auth';\r\n+\r\n+export const createAppointment = async (\r\n+\tappointmentData: CreateAppointmentParams\r\n+) => {\r\n+\ttry {\r\n+\t\tconst { data, success } = CreateAppointmentSchema.safeParse(appointmentData);\r\n+\t\tconsole.log(data);\r\n+\t\tconsole.log(appointmentData)\r\n+\t\tif (!success) {\r\n+\t\t\treturn {\r\n+\t\t\t\terror: 'Invalid data',\r\n+\t\t\t};\r\n+\t\t}\r\n+\t\tconsole.log(data)\r\n+\t\tconst { id } = await db.appointment.create({\r\n+\t\t\t...data,\r\n+\t\t});\r\n+\t\treturn { success: true, createdId: id };\r\n+\t} catch (error) {\r\n+\t\tconsole.log(error);\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+};\r\n+\r\n+export const getAppointment = async (appointmentId: string) => {\r\n+\tconsole.log(appointmentId);\r\n+\ttry {\r\n+\t\tconst appointment = await databases.getDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tappointmentId\r\n+\t\t);\r\n+\t\tconsole.log(appointment);\r\n+\r\n+\t\treturn parseStringify(appointment);\r\n+\t} catch (error) {\r\n+\t\tconsole.error(\r\n+\t\t\t'An error occurred while retrieving the existing patient:',\r\n+\t\t\terror\r\n+\t\t);\r\n+\t}\r\n+};\r\n+\r\n+export const getRecentAppointmentList = async () => {\r\n+\ttry {\r\n+\t\tconst appointments = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\t[Query.orderDesc('$createdAt')]\r\n+\t\t);\r\n+\r\n+\t\tconst initialCounts = {\r\n+\t\t\tscheduledCount: 0,\r\n+\t\t\tpendingCount: 0,\r\n+\t\t\tcancelledCount: 0,\r\n+\t\t};\r\n+\r\n+\t\tconst counts = (appointments.documents as Appointment[]).reduce(\r\n+\t\t\t(acc, appointment) => {\r\n+\t\t\t\tswitch (appointment.status) {\r\n+\t\t\t\t\tcase 'scheduled':\r\n+\t\t\t\t\t\tacc.scheduledCount++;\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\tcase 'pending':\r\n+\t\t\t\t\t\tacc.pendingCount++;\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\tcase 'cancelled':\r\n+\t\t\t\t\t\tacc.cancelledCount++;\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t}\r\n+\t\t\t\treturn acc;\r\n+\t\t\t},\r\n+\t\t\tinitialCounts\r\n+\t\t);\r\n+\r\n+\t\tconst data = {\r\n+\t\t\ttotalCount: appointments.total,\r\n+\t\t\t...counts,\r\n+\t\t\tdocuments: appointments.documents,\r\n+\t\t};\r\n+\r\n+\t\treturn parseStringify(data);\r\n+\t} catch (error) {\r\n+\t\tconsole.error(\r\n+\t\t\t'An error occurred while retrieving the recent appointments:',\r\n+\t\t\terror\r\n+\t\t);\r\n+\t}\r\n+};\r\n+\r\n+export const updateAppointment = async ({\r\n+\tappointmentId,\r\n+\tappointment,\r\n+\ttype,\r\n+}: UpdateAppointmentParams) => {\r\n+\ttry {\r\n+\t\tconst updatedAppointment = await databases.updateDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tappointmentId,\r\n+\t\t\tappointment\r\n+\t\t);\r\n+\r\n+\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n+\r\n+\t\t// const smsMessage = `Greetings from CarePulse. ${\r\n+\t\t// \ttype === 'schedule'\r\n+\t\t// \t\t? `Your appointment is confirmed for ${\r\n+\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t// \t\t  } with Dr. ${appointment.primaryPhysician}`\r\n+\t\t// \t\t: `We regret to inform that your appointment for ${\r\n+\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n+\t\t// }.`;\r\n+\t\t//await sendSMSNotification(userId, smsMessage);\r\n+\r\n+\t\trevalidatePath('/admin');\r\n+\t\treturn parseStringify(updatedAppointment);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1724112845511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,139 @@\n+'use server';\r\n+\r\n+import { ID, Query } from 'node-appwrite';\r\n+import {\r\n+\tDATABASE_ID,\r\n+\tdatabases,\r\n+\tAPPOINTMENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { formatDateTime, parseStringify } from '../utils';\r\n+import { revalidatePath } from 'next/cache';\r\n+import { CreateAppointmentSchema } from '../validation';\r\n+import { db } from '../db';\r\n+import { AuthError } from 'next-auth';\r\n+\r\n+export const createAppointment = async (\r\n+\tappointmentData: CreateAppointmentParams\r\n+) => {\r\n+\ttry {\r\n+\t\tconst { data, success } = CreateAppointmentSchema.safeParse(appointmentData);\r\n+\t\tconsole.log(data);\r\n+\t\tconsole.log(appointmentData)\r\n+\t\tif (!success) {\r\n+\t\t\treturn {\r\n+\t\t\t\terror: 'Invalid data',\r\n+\t\t\t};\r\n+\t\t}\r\n+\t\tconsole.log(data)\r\n+\t\tconst { id } = await db.appointment.create({\r\n+\t\t\t...data,\r\n+\r\n+\t\t});\r\n+\t\treturn { success: true, createdId: id };\r\n+\t} catch (error) {\r\n+\t\tconsole.log(error);\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+};\r\n+\r\n+export const getAppointment = async (appointmentId: string) => {\r\n+\tconsole.log(appointmentId);\r\n+\ttry {\r\n+\t\tconst appointment = await databases.getDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tappointmentId\r\n+\t\t);\r\n+\t\tconsole.log(appointment);\r\n+\r\n+\t\treturn parseStringify(appointment);\r\n+\t} catch (error) {\r\n+\t\tconsole.error(\r\n+\t\t\t'An error occurred while retrieving the existing patient:',\r\n+\t\t\terror\r\n+\t\t);\r\n+\t}\r\n+};\r\n+\r\n+export const getRecentAppointmentList = async () => {\r\n+\ttry {\r\n+\t\tconst appointments = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\t[Query.orderDesc('$createdAt')]\r\n+\t\t);\r\n+\r\n+\t\tconst initialCounts = {\r\n+\t\t\tscheduledCount: 0,\r\n+\t\t\tpendingCount: 0,\r\n+\t\t\tcancelledCount: 0,\r\n+\t\t};\r\n+\r\n+\t\tconst counts = (appointments.documents as Appointment[]).reduce(\r\n+\t\t\t(acc, appointment) => {\r\n+\t\t\t\tswitch (appointment.status) {\r\n+\t\t\t\t\tcase 'scheduled':\r\n+\t\t\t\t\t\tacc.scheduledCount++;\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\tcase 'pending':\r\n+\t\t\t\t\t\tacc.pendingCount++;\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\tcase 'cancelled':\r\n+\t\t\t\t\t\tacc.cancelledCount++;\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t}\r\n+\t\t\t\treturn acc;\r\n+\t\t\t},\r\n+\t\t\tinitialCounts\r\n+\t\t);\r\n+\r\n+\t\tconst data = {\r\n+\t\t\ttotalCount: appointments.total,\r\n+\t\t\t...counts,\r\n+\t\t\tdocuments: appointments.documents,\r\n+\t\t};\r\n+\r\n+\t\treturn parseStringify(data);\r\n+\t} catch (error) {\r\n+\t\tconsole.error(\r\n+\t\t\t'An error occurred while retrieving the recent appointments:',\r\n+\t\t\terror\r\n+\t\t);\r\n+\t}\r\n+};\r\n+\r\n+export const updateAppointment = async ({\r\n+\tappointmentId,\r\n+\tappointment,\r\n+\ttype,\r\n+}: UpdateAppointmentParams) => {\r\n+\ttry {\r\n+\t\tconst updatedAppointment = await databases.updateDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tappointmentId,\r\n+\t\t\tappointment\r\n+\t\t);\r\n+\r\n+\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n+\r\n+\t\t// const smsMessage = `Greetings from CarePulse. ${\r\n+\t\t// \ttype === 'schedule'\r\n+\t\t// \t\t? `Your appointment is confirmed for ${\r\n+\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t// \t\t  } with Dr. ${appointment.primaryPhysician}`\r\n+\t\t// \t\t: `We regret to inform that your appointment for ${\r\n+\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n+\t\t// }.`;\r\n+\t\t//await sendSMSNotification(userId, smsMessage);\r\n+\r\n+\t\trevalidatePath('/admin');\r\n+\t\treturn parseStringify(updatedAppointment);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1724113063750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,144 @@\n+'use server';\r\n+\r\n+import { ID, Query } from 'node-appwrite';\r\n+import {\r\n+\tDATABASE_ID,\r\n+\tdatabases,\r\n+\tAPPOINTMENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { formatDateTime, parseStringify } from '../utils';\r\n+import { revalidatePath } from 'next/cache';\r\n+import { CreateAppointmentSchema } from '../validation';\r\n+import { db } from '../db';\r\n+import { AuthError } from 'next-auth';\r\n+\r\n+export const createAppointment = async (\r\n+\tappointmentData: CreateAppointmentParams\r\n+) => {\r\n+\ttry {\r\n+\t\tconst { data, success } = CreateAppointmentSchema.safeParse(appointmentData);\r\n+\t\tconsole.log(data);\r\n+\t\tconsole.log(appointmentData)\r\n+\t\tif (!success) {\r\n+\t\t\treturn {\r\n+\t\t\t\terror: 'Invalid data',\r\n+\t\t\t};\r\n+\t\t}\r\n+\t\tconsole.log(data)\r\n+\t\tconst { id } = await db.appointment.create({\r\n+\t\t\tdata: {\r\n+\t\t\t\t...data,\r\n+\t\t\t\tuserId: appointmentData.userId,\r\n+\t\t\t\tpatientId: appointmentData.patient,\r\n+\t\t\t\tstatus: appointmentData.status,\r\n+\t\t\t\t\r\n+\t\t\t},\r\n+\t\t});\r\n+\t\treturn { success: true, createdId: id };\r\n+\t} catch (error) {\r\n+\t\tconsole.log(error);\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+};\r\n+\r\n+export const getAppointment = async (appointmentId: string) => {\r\n+\tconsole.log(appointmentId);\r\n+\ttry {\r\n+\t\tconst appointment = await databases.getDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tappointmentId\r\n+\t\t);\r\n+\t\tconsole.log(appointment);\r\n+\r\n+\t\treturn parseStringify(appointment);\r\n+\t} catch (error) {\r\n+\t\tconsole.error(\r\n+\t\t\t'An error occurred while retrieving the existing patient:',\r\n+\t\t\terror\r\n+\t\t);\r\n+\t}\r\n+};\r\n+\r\n+export const getRecentAppointmentList = async () => {\r\n+\ttry {\r\n+\t\tconst appointments = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\t[Query.orderDesc('$createdAt')]\r\n+\t\t);\r\n+\r\n+\t\tconst initialCounts = {\r\n+\t\t\tscheduledCount: 0,\r\n+\t\t\tpendingCount: 0,\r\n+\t\t\tcancelledCount: 0,\r\n+\t\t};\r\n+\r\n+\t\tconst counts = (appointments.documents as Appointment[]).reduce(\r\n+\t\t\t(acc, appointment) => {\r\n+\t\t\t\tswitch (appointment.status) {\r\n+\t\t\t\t\tcase 'scheduled':\r\n+\t\t\t\t\t\tacc.scheduledCount++;\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\tcase 'pending':\r\n+\t\t\t\t\t\tacc.pendingCount++;\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\tcase 'cancelled':\r\n+\t\t\t\t\t\tacc.cancelledCount++;\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t}\r\n+\t\t\t\treturn acc;\r\n+\t\t\t},\r\n+\t\t\tinitialCounts\r\n+\t\t);\r\n+\r\n+\t\tconst data = {\r\n+\t\t\ttotalCount: appointments.total,\r\n+\t\t\t...counts,\r\n+\t\t\tdocuments: appointments.documents,\r\n+\t\t};\r\n+\r\n+\t\treturn parseStringify(data);\r\n+\t} catch (error) {\r\n+\t\tconsole.error(\r\n+\t\t\t'An error occurred while retrieving the recent appointments:',\r\n+\t\t\terror\r\n+\t\t);\r\n+\t}\r\n+};\r\n+\r\n+export const updateAppointment = async ({\r\n+\tappointmentId,\r\n+\tappointment,\r\n+\ttype,\r\n+}: UpdateAppointmentParams) => {\r\n+\ttry {\r\n+\t\tconst updatedAppointment = await databases.updateDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tappointmentId,\r\n+\t\t\tappointment\r\n+\t\t);\r\n+\r\n+\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n+\r\n+\t\t// const smsMessage = `Greetings from CarePulse. ${\r\n+\t\t// \ttype === 'schedule'\r\n+\t\t// \t\t? `Your appointment is confirmed for ${\r\n+\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t// \t\t  } with Dr. ${appointment.primaryPhysician}`\r\n+\t\t// \t\t: `We regret to inform that your appointment for ${\r\n+\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n+\t\t// }.`;\r\n+\t\t//await sendSMSNotification(userId, smsMessage);\r\n+\r\n+\t\trevalidatePath('/admin');\r\n+\t\treturn parseStringify(updatedAppointment);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1724281064618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,16 +16,14 @@\n \tappointmentData: CreateAppointmentParams\r\n ) => {\r\n \ttry {\r\n \t\tconst { data, success } = CreateAppointmentSchema.safeParse(appointmentData);\r\n-\t\tconsole.log(data);\r\n-\t\tconsole.log(appointmentData)\r\n+\r\n \t\tif (!success) {\r\n \t\t\treturn {\r\n \t\t\t\terror: 'Invalid data',\r\n \t\t\t};\r\n \t\t}\r\n-\t\tconsole.log(data)\r\n \t\tconst { id } = await db.appointment.create({\r\n \t\t\tdata: {\r\n \t\t\t\t...data,\r\n \t\t\t\tuserId: appointmentData.userId,\r\n@@ -64,45 +62,41 @@\n };\r\n \r\n export const getRecentAppointmentList = async () => {\r\n \ttry {\r\n-\t\tconst appointments = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\t[Query.orderDesc('$createdAt')]\r\n-\t\t);\r\n-\r\n+\t\tconst appointments = await db.appointment.findMany()\r\n+\t\tconsole.log(appointments);\r\n \t\tconst initialCounts = {\r\n \t\t\tscheduledCount: 0,\r\n \t\t\tpendingCount: 0,\r\n \t\t\tcancelledCount: 0,\r\n \t\t};\r\n \r\n-\t\tconst counts = (appointments.documents as Appointment[]).reduce(\r\n-\t\t\t(acc, appointment) => {\r\n-\t\t\t\tswitch (appointment.status) {\r\n-\t\t\t\t\tcase 'scheduled':\r\n-\t\t\t\t\t\tacc.scheduledCount++;\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t\tcase 'pending':\r\n-\t\t\t\t\t\tacc.pendingCount++;\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t\tcase 'cancelled':\r\n-\t\t\t\t\t\tacc.cancelledCount++;\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t}\r\n-\t\t\t\treturn acc;\r\n-\t\t\t},\r\n-\t\t\tinitialCounts\r\n-\t\t);\r\n+\t\t// const counts = (appointments.documents as Appointment[]).reduce(\r\n+\t\t// \t(acc, appointment) => {\r\n+\t\t// \t\tswitch (appointment.status) {\r\n+\t\t// \t\t\tcase 'scheduled':\r\n+\t\t// \t\t\t\tacc.scheduledCount++;\r\n+\t\t// \t\t\t\tbreak;\r\n+\t\t// \t\t\tcase 'pending':\r\n+\t\t// \t\t\t\tacc.pendingCount++;\r\n+\t\t// \t\t\t\tbreak;\r\n+\t\t// \t\t\tcase 'cancelled':\r\n+\t\t// \t\t\t\tacc.cancelledCount++;\r\n+\t\t// \t\t\t\tbreak;\r\n+\t\t// \t\t}\r\n+\t\t// \t\treturn acc;\r\n+\t\t// \t},\r\n+\t\t// \tinitialCounts\r\n+\t\t// );\r\n \r\n-\t\tconst data = {\r\n-\t\t\ttotalCount: appointments.total,\r\n-\t\t\t...counts,\r\n-\t\t\tdocuments: appointments.documents,\r\n-\t\t};\r\n+\t\t// const data = {\r\n+\t\t// \ttotalCount: appointments.total,\r\n+\t\t// \t...counts,\r\n+\t\t// \tdocuments: appointments.documents,\r\n+\t\t// };\r\n \r\n-\t\treturn parseStringify(data);\r\n+\t\t// return parseStringify(data);\r\n \t} catch (error) {\r\n \t\tconsole.error(\r\n \t\t\t'An error occurred while retrieving the recent appointments:',\r\n \t\t\terror\r\n@@ -141,419 +135,4 @@\n \t} catch (error) {\r\n \t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n \t}\r\n };\r\n-'use server';\r\n-\r\n-import { ID, Query } from 'node-appwrite';\r\n-import {\r\n-\tDATABASE_ID,\r\n-\tdatabases,\r\n-\tAPPOINTMENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { formatDateTime, parseStringify } from '../utils';\r\n-import { revalidatePath } from 'next/cache';\r\n-import { CreateAppointmentSchema } from '../validation';\r\n-import { db } from '../db';\r\n-import { AuthError } from 'next-auth';\r\n-\r\n-export const createAppointment = async (\r\n-\tappointmentData: CreateAppointmentParams\r\n-) => {\r\n-\ttry {\r\n-\t\tconst { data, success } = CreateAppointmentSchema.safeParse(appointmentData);\r\n-\t\tconsole.log(data);\r\n-\t\tconsole.log(appointmentData)\r\n-\t\tif (!success) {\r\n-\t\t\treturn {\r\n-\t\t\t\terror: 'Invalid data',\r\n-\t\t\t};\r\n-\t\t}\r\n-\t\tconsole.log(data)\r\n-\t\tconst { id } = await db.appointment.create({\r\n-\t\t\t...data,\r\n-\r\n-\t\t});\r\n-\t\treturn { success: true, createdId: id };\r\n-\t} catch (error) {\r\n-\t\tconsole.log(error);\r\n-\t\tif (error instanceof AuthError) {\r\n-\t\t\treturn { error: error.cause?.err?.message };\r\n-\t\t}\r\n-\t\treturn { error: 'error 500' };\r\n-\t}\r\n-};\r\n-\r\n-export const getAppointment = async (appointmentId: string) => {\r\n-\tconsole.log(appointmentId);\r\n-\ttry {\r\n-\t\tconst appointment = await databases.getDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tappointmentId\r\n-\t\t);\r\n-\t\tconsole.log(appointment);\r\n-\r\n-\t\treturn parseStringify(appointment);\r\n-\t} catch (error) {\r\n-\t\tconsole.error(\r\n-\t\t\t'An error occurred while retrieving the existing patient:',\r\n-\t\t\terror\r\n-\t\t);\r\n-\t}\r\n-};\r\n-\r\n-export const getRecentAppointmentList = async () => {\r\n-\ttry {\r\n-\t\tconst appointments = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\t[Query.orderDesc('$createdAt')]\r\n-\t\t);\r\n-\r\n-\t\tconst initialCounts = {\r\n-\t\t\tscheduledCount: 0,\r\n-\t\t\tpendingCount: 0,\r\n-\t\t\tcancelledCount: 0,\r\n-\t\t};\r\n-\r\n-\t\tconst counts = (appointments.documents as Appointment[]).reduce(\r\n-\t\t\t(acc, appointment) => {\r\n-\t\t\t\tswitch (appointment.status) {\r\n-\t\t\t\t\tcase 'scheduled':\r\n-\t\t\t\t\t\tacc.scheduledCount++;\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t\tcase 'pending':\r\n-\t\t\t\t\t\tacc.pendingCount++;\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t\tcase 'cancelled':\r\n-\t\t\t\t\t\tacc.cancelledCount++;\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t}\r\n-\t\t\t\treturn acc;\r\n-\t\t\t},\r\n-\t\t\tinitialCounts\r\n-\t\t);\r\n-\r\n-\t\tconst data = {\r\n-\t\t\ttotalCount: appointments.total,\r\n-\t\t\t...counts,\r\n-\t\t\tdocuments: appointments.documents,\r\n-\t\t};\r\n-\r\n-\t\treturn parseStringify(data);\r\n-\t} catch (error) {\r\n-\t\tconsole.error(\r\n-\t\t\t'An error occurred while retrieving the recent appointments:',\r\n-\t\t\terror\r\n-\t\t);\r\n-\t}\r\n-};\r\n-\r\n-export const updateAppointment = async ({\r\n-\tappointmentId,\r\n-\tappointment,\r\n-\ttype,\r\n-}: UpdateAppointmentParams) => {\r\n-\ttry {\r\n-\t\tconst updatedAppointment = await databases.updateDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tappointmentId,\r\n-\t\t\tappointment\r\n-\t\t);\r\n-\r\n-\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n-\r\n-\t\t// const smsMessage = `Greetings from CarePulse. ${\r\n-\t\t// \ttype === 'schedule'\r\n-\t\t// \t\t? `Your appointment is confirmed for ${\r\n-\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n-\t\t// \t\t  } with Dr. ${appointment.primaryPhysician}`\r\n-\t\t// \t\t: `We regret to inform that your appointment for ${\r\n-\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n-\t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n-\t\t// }.`;\r\n-\t\t//await sendSMSNotification(userId, smsMessage);\r\n-\r\n-\t\trevalidatePath('/admin');\r\n-\t\treturn parseStringify(updatedAppointment);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n-\t}\r\n-};\r\n-'use server';\r\n-\r\n-import { ID, Query } from 'node-appwrite';\r\n-import {\r\n-\tDATABASE_ID,\r\n-\tdatabases,\r\n-\tAPPOINTMENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { formatDateTime, parseStringify } from '../utils';\r\n-import { revalidatePath } from 'next/cache';\r\n-import { CreateAppointmentSchema } from '../validation';\r\n-import { db } from '../db';\r\n-import { AuthError } from 'next-auth';\r\n-\r\n-export const createAppointment = async (\r\n-\tappointmentData: CreateAppointmentParams\r\n-) => {\r\n-\ttry {\r\n-\t\tconst { data, success } = CreateAppointmentSchema.safeParse(appointmentData);\r\n-\t\tconsole.log(data);\r\n-\t\tconsole.log(appointmentData)\r\n-\t\tif (!success) {\r\n-\t\t\treturn {\r\n-\t\t\t\terror: 'Invalid data',\r\n-\t\t\t};\r\n-\t\t}\r\n-\t\tconsole.log(data)\r\n-\t\tconst { id } = await db.appointment.create({\r\n-\t\t\t...data,\r\n-\t\t});\r\n-\t\treturn { success: true, createdId: id };\r\n-\t} catch (error) {\r\n-\t\tconsole.log(error);\r\n-\t\tif (error instanceof AuthError) {\r\n-\t\t\treturn { error: error.cause?.err?.message };\r\n-\t\t}\r\n-\t\treturn { error: 'error 500' };\r\n-\t}\r\n-};\r\n-\r\n-export const getAppointment = async (appointmentId: string) => {\r\n-\tconsole.log(appointmentId);\r\n-\ttry {\r\n-\t\tconst appointment = await databases.getDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tappointmentId\r\n-\t\t);\r\n-\t\tconsole.log(appointment);\r\n-\r\n-\t\treturn parseStringify(appointment);\r\n-\t} catch (error) {\r\n-\t\tconsole.error(\r\n-\t\t\t'An error occurred while retrieving the existing patient:',\r\n-\t\t\terror\r\n-\t\t);\r\n-\t}\r\n-};\r\n-\r\n-export const getRecentAppointmentList = async () => {\r\n-\ttry {\r\n-\t\tconst appointments = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\t[Query.orderDesc('$createdAt')]\r\n-\t\t);\r\n-\r\n-\t\tconst initialCounts = {\r\n-\t\t\tscheduledCount: 0,\r\n-\t\t\tpendingCount: 0,\r\n-\t\t\tcancelledCount: 0,\r\n-\t\t};\r\n-\r\n-\t\tconst counts = (appointments.documents as Appointment[]).reduce(\r\n-\t\t\t(acc, appointment) => {\r\n-\t\t\t\tswitch (appointment.status) {\r\n-\t\t\t\t\tcase 'scheduled':\r\n-\t\t\t\t\t\tacc.scheduledCount++;\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t\tcase 'pending':\r\n-\t\t\t\t\t\tacc.pendingCount++;\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t\tcase 'cancelled':\r\n-\t\t\t\t\t\tacc.cancelledCount++;\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t}\r\n-\t\t\t\treturn acc;\r\n-\t\t\t},\r\n-\t\t\tinitialCounts\r\n-\t\t);\r\n-\r\n-\t\tconst data = {\r\n-\t\t\ttotalCount: appointments.total,\r\n-\t\t\t...counts,\r\n-\t\t\tdocuments: appointments.documents,\r\n-\t\t};\r\n-\r\n-\t\treturn parseStringify(data);\r\n-\t} catch (error) {\r\n-\t\tconsole.error(\r\n-\t\t\t'An error occurred while retrieving the recent appointments:',\r\n-\t\t\terror\r\n-\t\t);\r\n-\t}\r\n-};\r\n-\r\n-export const updateAppointment = async ({\r\n-\tappointmentId,\r\n-\tappointment,\r\n-\ttype,\r\n-}: UpdateAppointmentParams) => {\r\n-\ttry {\r\n-\t\tconst updatedAppointment = await databases.updateDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tappointmentId,\r\n-\t\t\tappointment\r\n-\t\t);\r\n-\r\n-\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n-\r\n-\t\t// const smsMessage = `Greetings from CarePulse. ${\r\n-\t\t// \ttype === 'schedule'\r\n-\t\t// \t\t? `Your appointment is confirmed for ${\r\n-\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n-\t\t// \t\t  } with Dr. ${appointment.primaryPhysician}`\r\n-\t\t// \t\t: `We regret to inform that your appointment for ${\r\n-\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n-\t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n-\t\t// }.`;\r\n-\t\t//await sendSMSNotification(userId, smsMessage);\r\n-\r\n-\t\trevalidatePath('/admin');\r\n-\t\treturn parseStringify(updatedAppointment);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n-\t}\r\n-};\r\n-'use server';\r\n-\r\n-import { ID, Query } from 'node-appwrite';\r\n-import {\r\n-\tDATABASE_ID,\r\n-\tdatabases,\r\n-\tAPPOINTMENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { formatDateTime, parseStringify } from '../utils';\r\n-import { revalidatePath } from 'next/cache';\r\n-import { CreateAppointmentSchema } from '../validation';\r\n-import { db } from '../db';\r\n-import { AuthError } from 'next-auth';\r\n-\r\n-export const createAppointment = async (\r\n-\tappointmentData: CreateAppointmentParams\r\n-) => {\r\n-\ttry {\r\n-\t\tconst { data, success } = CreateAppointmentSchema.safeParse(appointmentData);\r\n-\t\tconsole.log(data);\r\n-\t\tconsole.log(appointmentData)\r\n-\t\tif (!success) {\r\n-\t\t\treturn {\r\n-\t\t\t\terror: 'Invalid data',\r\n-\t\t\t};\r\n-\t\t}\r\n-\t\tconsole.log(data)\r\n-\t\tconst { id } = await db.appointment.create({\r\n-\t\t\tdata,\r\n-\t\t});\r\n-\t\treturn { success: true, createdId: id };\r\n-\t} catch (error) {\r\n-\t\tconsole.log(error);\r\n-\t\tif (error instanceof AuthError) {\r\n-\t\t\treturn { error: error.cause?.err?.message };\r\n-\t\t}\r\n-\t\treturn { error: 'error 500' };\r\n-\t}\r\n-};\r\n-\r\n-export const getAppointment = async (appointmentId: string) => {\r\n-\tconsole.log(appointmentId);\r\n-\ttry {\r\n-\t\tconst appointment = await databases.getDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tappointmentId\r\n-\t\t);\r\n-\t\tconsole.log(appointment);\r\n-\r\n-\t\treturn parseStringify(appointment);\r\n-\t} catch (error) {\r\n-\t\tconsole.error(\r\n-\t\t\t'An error occurred while retrieving the existing patient:',\r\n-\t\t\terror\r\n-\t\t);\r\n-\t}\r\n-};\r\n-\r\n-export const getRecentAppointmentList = async () => {\r\n-\ttry {\r\n-\t\tconst appointments = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\t[Query.orderDesc('$createdAt')]\r\n-\t\t);\r\n-\r\n-\t\tconst initialCounts = {\r\n-\t\t\tscheduledCount: 0,\r\n-\t\t\tpendingCount: 0,\r\n-\t\t\tcancelledCount: 0,\r\n-\t\t};\r\n-\r\n-\t\tconst counts = (appointments.documents as Appointment[]).reduce(\r\n-\t\t\t(acc, appointment) => {\r\n-\t\t\t\tswitch (appointment.status) {\r\n-\t\t\t\t\tcase 'scheduled':\r\n-\t\t\t\t\t\tacc.scheduledCount++;\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t\tcase 'pending':\r\n-\t\t\t\t\t\tacc.pendingCount++;\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t\tcase 'cancelled':\r\n-\t\t\t\t\t\tacc.cancelledCount++;\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t}\r\n-\t\t\t\treturn acc;\r\n-\t\t\t},\r\n-\t\t\tinitialCounts\r\n-\t\t);\r\n-\r\n-\t\tconst data = {\r\n-\t\t\ttotalCount: appointments.total,\r\n-\t\t\t...counts,\r\n-\t\t\tdocuments: appointments.documents,\r\n-\t\t};\r\n-\r\n-\t\treturn parseStringify(data);\r\n-\t} catch (error) {\r\n-\t\tconsole.error(\r\n-\t\t\t'An error occurred while retrieving the recent appointments:',\r\n-\t\t\terror\r\n-\t\t);\r\n-\t}\r\n-};\r\n-\r\n-export const updateAppointment = async ({\r\n-\tappointmentId,\r\n-\tappointment,\r\n-\ttype,\r\n-}: UpdateAppointmentParams) => {\r\n-\ttry {\r\n-\t\tconst updatedAppointment = await databases.updateDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tappointmentId,\r\n-\t\t\tappointment\r\n-\t\t);\r\n-\r\n-\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n-\r\n-\t\t// const smsMessage = `Greetings from CarePulse. ${\r\n-\t\t// \ttype === 'schedule'\r\n-\t\t// \t\t? `Your appointment is confirmed for ${\r\n-\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n-\t\t// \t\t  } with Dr. ${appointment.primaryPhysician}`\r\n-\t\t// \t\t: `We regret to inform that your appointment for ${\r\n-\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n-\t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n-\t\t// }.`;\r\n-\t\t//await sendSMSNotification(userId, smsMessage);\r\n-\r\n-\t\trevalidatePath('/admin');\r\n-\t\treturn parseStringify(updatedAppointment);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n-\t}\r\n-};\r\n"
                },
                {
                    "date": 1724281170895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,138 @@\n+'use server';\r\n+\r\n+import { ID, Query } from 'node-appwrite';\r\n+import {\r\n+\tDATABASE_ID,\r\n+\tdatabases,\r\n+\tAPPOINTMENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { formatDateTime, parseStringify } from '../utils';\r\n+import { revalidatePath } from 'next/cache';\r\n+import { CreateAppointmentSchema } from '../validation';\r\n+import { db } from '../db';\r\n+import { AuthError } from 'next-auth';\r\n+\r\n+export const createAppointment = async (\r\n+\tappointmentData: CreateAppointmentParams\r\n+) => {\r\n+\ttry {\r\n+\t\tconst { data, success } = CreateAppointmentSchema.safeParse(appointmentData);\r\n+\r\n+\t\tif (!success) {\r\n+\t\t\treturn {\r\n+\t\t\t\terror: 'Invalid data',\r\n+\t\t\t};\r\n+\t\t}\r\n+\t\tconst { id } = await db.appointment.create({\r\n+\t\t\tdata: {\r\n+\t\t\t\t...data,\r\n+\t\t\t\tuserId: appointmentData.userId,\r\n+\t\t\t\tpatientId: appointmentData.patient,\r\n+\t\t\t\tstatus: appointmentData.status,\r\n+\t\t\t\t\r\n+\t\t\t},\r\n+\t\t});\r\n+\t\treturn { success: true, createdId: id };\r\n+\t} catch (error) {\r\n+\t\tconsole.log(error);\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+};\r\n+\r\n+export const getAppointment = async (appointmentId: string) => {\r\n+\tconsole.log(appointmentId);\r\n+\ttry {\r\n+\t\tconst appointment = await databases.getDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tappointmentId\r\n+\t\t);\r\n+\t\tconsole.log(appointment);\r\n+\r\n+\t\treturn parseStringify(appointment);\r\n+\t} catch (error) {\r\n+\t\tconsole.error(\r\n+\t\t\t'An error occurred while retrieving the existing patient:',\r\n+\t\t\terror\r\n+\t\t);\r\n+\t}\r\n+};\r\n+\r\n+export const getRecentAppointmentList = async () => {\r\n+\ttry {\r\n+\t\tconst appointments = await db.appointment.findMany()\r\n+\t\tconsole.log(appointments);\r\n+\t\tconst initialCounts = {\r\n+\t\t\tscheduledCount: 0,\r\n+\t\t\tpendingCount: 0,\r\n+\t\t\tcancelledCount: 0,\r\n+\t\t};\r\n+\r\n+\t\t// const counts = (appointments.documents as Appointment[]).reduce(\r\n+\t\t// \t(acc, appointment) => {\r\n+\t\t// \t\tswitch (appointment.status) {\r\n+\t\t// \t\t\tcase 'scheduled':\r\n+\t\t// \t\t\t\tacc.scheduledCount++;\r\n+\t\t// \t\t\t\tbreak;\r\n+\t\t// \t\t\tcase 'pending':\r\n+\t\t// \t\t\t\tacc.pendingCount++;\r\n+\t\t// \t\t\t\tbreak;\r\n+\t\t// \t\t\tcase 'cancelled':\r\n+\t\t// \t\t\t\tacc.cancelledCount++;\r\n+\t\t// \t\t\t\tbreak;\r\n+\t\t// \t\t}\r\n+\t\t// \t\treturn acc;\r\n+\t\t// \t},\r\n+\t\t// \tinitialCounts\r\n+\t\t// );\r\n+\r\n+\t\t// const data = {\r\n+\t\t// \ttotalCount: appointments.total,\r\n+\t\t// \t...counts,\r\n+\t\t// \tdocuments: appointments.documents,\r\n+\t\t// };\r\n+\r\n+\t\t// return parseStringify(data);\r\n+\t} catch (error) {\r\n+\t\tconsole.error(\r\n+\t\t\t'An error occurred while retrieving the recent appointments:',\r\n+\t\t\terror\r\n+\t\t);\r\n+\t}\r\n+};\r\n+\r\n+export const updateAppointment = async ({\r\n+\tappointmentId,\r\n+\tappointment,\r\n+\ttype,\r\n+}: UpdateAppointmentParams) => {\r\n+\ttry {\r\n+\t\tconst updatedAppointment = await databases.updateDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tappointmentId,\r\n+\t\t\tappointment\r\n+\t\t);\r\n+\r\n+\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n+\r\n+\t\t// const smsMessage = `Greetings from CarePulse. ${\r\n+\t\t// \ttype === 'schedule'\r\n+\t\t// \t\t? `Your appointment is confirmed for ${\r\n+\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t// \t\t  } with Dr. ${appointment.primaryPhysician}`\r\n+\t\t// \t\t: `We regret to inform that your appointment for ${\r\n+\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n+\t\t// }.`;\r\n+\t\t//await sendSMSNotification(userId, smsMessage);\r\n+\r\n+\t\trevalidatePath('/admin');\r\n+\t\treturn parseStringify(updatedAppointment);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1724281175951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,142 +135,4 @@\n \t} catch (error) {\r\n \t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n \t}\r\n };\r\n-'use server';\r\n-\r\n-import { ID, Query } from 'node-appwrite';\r\n-import {\r\n-\tDATABASE_ID,\r\n-\tdatabases,\r\n-\tAPPOINTMENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { formatDateTime, parseStringify } from '../utils';\r\n-import { revalidatePath } from 'next/cache';\r\n-import { CreateAppointmentSchema } from '../validation';\r\n-import { db } from '../db';\r\n-import { AuthError } from 'next-auth';\r\n-\r\n-export const createAppointment = async (\r\n-\tappointmentData: CreateAppointmentParams\r\n-) => {\r\n-\ttry {\r\n-\t\tconst { data, success } = CreateAppointmentSchema.safeParse(appointmentData);\r\n-\r\n-\t\tif (!success) {\r\n-\t\t\treturn {\r\n-\t\t\t\terror: 'Invalid data',\r\n-\t\t\t};\r\n-\t\t}\r\n-\t\tconst { id } = await db.appointment.create({\r\n-\t\t\tdata: {\r\n-\t\t\t\t...data,\r\n-\t\t\t\tuserId: appointmentData.userId,\r\n-\t\t\t\tpatientId: appointmentData.patient,\r\n-\t\t\t\tstatus: appointmentData.status,\r\n-\t\t\t\t\r\n-\t\t\t},\r\n-\t\t});\r\n-\t\treturn { success: true, createdId: id };\r\n-\t} catch (error) {\r\n-\t\tconsole.log(error);\r\n-\t\tif (error instanceof AuthError) {\r\n-\t\t\treturn { error: error.cause?.err?.message };\r\n-\t\t}\r\n-\t\treturn { error: 'error 500' };\r\n-\t}\r\n-};\r\n-\r\n-export const getAppointment = async (appointmentId: string) => {\r\n-\tconsole.log(appointmentId);\r\n-\ttry {\r\n-\t\tconst appointment = await databases.getDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tappointmentId\r\n-\t\t);\r\n-\t\tconsole.log(appointment);\r\n-\r\n-\t\treturn parseStringify(appointment);\r\n-\t} catch (error) {\r\n-\t\tconsole.error(\r\n-\t\t\t'An error occurred while retrieving the existing patient:',\r\n-\t\t\terror\r\n-\t\t);\r\n-\t}\r\n-};\r\n-\r\n-export const getRecentAppointmentList = async () => {\r\n-\ttry {\r\n-\t\tconst appointments = await db.appointment.findMany()\r\n-\t\tconsole.log(appointments);\r\n-\t\tconst initialCounts = {\r\n-\t\t\tscheduledCount: 0,\r\n-\t\t\tpendingCount: 0,\r\n-\t\t\tcancelledCount: 0,\r\n-\t\t};\r\n-\r\n-\t\t// const counts = (appointments.documents as Appointment[]).reduce(\r\n-\t\t// \t(acc, appointment) => {\r\n-\t\t// \t\tswitch (appointment.status) {\r\n-\t\t// \t\t\tcase 'scheduled':\r\n-\t\t// \t\t\t\tacc.scheduledCount++;\r\n-\t\t// \t\t\t\tbreak;\r\n-\t\t// \t\t\tcase 'pending':\r\n-\t\t// \t\t\t\tacc.pendingCount++;\r\n-\t\t// \t\t\t\tbreak;\r\n-\t\t// \t\t\tcase 'cancelled':\r\n-\t\t// \t\t\t\tacc.cancelledCount++;\r\n-\t\t// \t\t\t\tbreak;\r\n-\t\t// \t\t}\r\n-\t\t// \t\treturn acc;\r\n-\t\t// \t},\r\n-\t\t// \tinitialCounts\r\n-\t\t// );\r\n-\r\n-\t\t// const data = {\r\n-\t\t// \ttotalCount: appointments.total,\r\n-\t\t// \t...counts,\r\n-\t\t// \tdocuments: appointments.documents,\r\n-\t\t// };\r\n-\r\n-\t\t// return parseStringify(data);\r\n-\t} catch (error) {\r\n-\t\tconsole.error(\r\n-\t\t\t'An error occurred while retrieving the recent appointments:',\r\n-\t\t\terror\r\n-\t\t);\r\n-\t}\r\n-};\r\n-\r\n-export const updateAppointment = async ({\r\n-\tappointmentId,\r\n-\tappointment,\r\n-\ttype,\r\n-}: UpdateAppointmentParams) => {\r\n-\ttry {\r\n-\t\tconst updatedAppointment = await databases.updateDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tappointmentId,\r\n-\t\t\tappointment\r\n-\t\t);\r\n-\r\n-\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n-\r\n-\t\t// const smsMessage = `Greetings from CarePulse. ${\r\n-\t\t// \ttype === 'schedule'\r\n-\t\t// \t\t? `Your appointment is confirmed for ${\r\n-\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n-\t\t// \t\t  } with Dr. ${appointment.primaryPhysician}`\r\n-\t\t// \t\t: `We regret to inform that your appointment for ${\r\n-\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n-\t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n-\t\t// }.`;\r\n-\t\t//await sendSMSNotification(userId, smsMessage);\r\n-\r\n-\t\trevalidatePath('/admin');\r\n-\t\treturn parseStringify(updatedAppointment);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n-\t}\r\n-};\r\n"
                },
                {
                    "date": 1724282427849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,10 @@\n export const createAppointment = async (\r\n \tappointmentData: CreateAppointmentParams\r\n ) => {\r\n \ttry {\r\n-\t\tconst { data, success } = CreateAppointmentSchema.safeParse(appointmentData);\r\n+\t\tconst { data, success } =\r\n+\t\t\tCreateAppointmentSchema.safeParse(appointmentData);\r\n \r\n \t\tif (!success) {\r\n \t\t\treturn {\r\n \t\t\t\terror: 'Invalid data',\r\n@@ -28,9 +29,8 @@\n \t\t\t\t...data,\r\n \t\t\t\tuserId: appointmentData.userId,\r\n \t\t\t\tpatientId: appointmentData.patient,\r\n \t\t\t\tstatus: appointmentData.status,\r\n-\t\t\t\t\r\n \t\t\t},\r\n \t\t});\r\n \t\treturn { success: true, createdId: id };\r\n \t} catch (error) {\r\n@@ -62,46 +62,46 @@\n };\r\n \r\n export const getRecentAppointmentList = async () => {\r\n \ttry {\r\n-\t\tconst appointments = await db.appointment.findMany()\r\n+\t\tconst appointments = await db.appointment.findMany({\r\n+\t\t\t_count: true\r\n+\t\t});\r\n \t\tconsole.log(appointments);\r\n \t\tconst initialCounts = {\r\n \t\t\tscheduledCount: 0,\r\n \t\t\tpendingCount: 0,\r\n \t\t\tcancelledCount: 0,\r\n \t\t};\r\n-\r\n-\t\t// const counts = (appointments.documents as Appointment[]).reduce(\r\n-\t\t// \t(acc, appointment) => {\r\n-\t\t// \t\tswitch (appointment.status) {\r\n-\t\t// \t\t\tcase 'scheduled':\r\n-\t\t// \t\t\t\tacc.scheduledCount++;\r\n-\t\t// \t\t\t\tbreak;\r\n-\t\t// \t\t\tcase 'pending':\r\n-\t\t// \t\t\t\tacc.pendingCount++;\r\n-\t\t// \t\t\t\tbreak;\r\n-\t\t// \t\t\tcase 'cancelled':\r\n-\t\t// \t\t\t\tacc.cancelledCount++;\r\n-\t\t// \t\t\t\tbreak;\r\n-\t\t// \t\t}\r\n-\t\t// \t\treturn acc;\r\n-\t\t// \t},\r\n-\t\t// \tinitialCounts\r\n-\t\t// );\r\n-\r\n-\t\t// const data = {\r\n-\t\t// \ttotalCount: appointments.total,\r\n-\t\t// \t...counts,\r\n-\t\t// \tdocuments: appointments.documents,\r\n-\t\t// };\r\n-\r\n-\t\t// return parseStringify(data);\r\n+\t\tconst counts = (appointments).reduce(\r\n+\t\t\t(acc, appointment) => {\r\n+\t\t\t\tswitch (appointment.status) {\r\n+\t\t\t\t\tcase 'scheduled':\r\n+\t\t\t\t\t\tacc.scheduledCount++;\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\tcase 'pending':\r\n+\t\t\t\t\t\tacc.pendingCount++;\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t\tcase 'cancelled':\r\n+\t\t\t\t\t\tacc.cancelledCount++;\r\n+\t\t\t\t\t\tbreak;\r\n+\t\t\t\t}\r\n+\t\t\t\treturn acc;\r\n+\t\t\t},\r\n+\t\t\tinitialCounts\r\n+\t\t);\r\n+\t\tconst data = {\r\n+\t\t\ttotalCount: appointments.total,\r\n+\t\t\t...counts,\r\n+\t\t\tdocuments: appointments.documents,\r\n+\t\t};\r\n+\t\treturn { success: true, data };\r\n \t} catch (error) {\r\n-\t\tconsole.error(\r\n-\t\t\t'An error occurred while retrieving the recent appointments:',\r\n-\t\t\terror\r\n-\t\t);\r\n+\t\tconsole.log(error);\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n \t}\r\n };\r\n \r\n export const updateAppointment = async ({\r\n"
                },
                {
                    "date": 1724282660714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,39 +62,38 @@\n };\r\n \r\n export const getRecentAppointmentList = async () => {\r\n \ttry {\r\n-\t\tconst appointments = await db.appointment.findMany({\r\n-\t\t\t_count: true\r\n-\t\t});\r\n-\t\tconsole.log(appointments);\r\n+\t\tconst appointments = await db.appointment.findMany();\r\n+\t\tconst [data, count] = await db.$transaction([\r\n+\t\t\tdb.appointment.findMany(),\r\n+\t\t\tdb.appointment.count(),\r\n+\t\t]);\r\n+\t\tconsole.log(data, count);\r\n \t\tconst initialCounts = {\r\n \t\t\tscheduledCount: 0,\r\n \t\t\tpendingCount: 0,\r\n \t\t\tcancelledCount: 0,\r\n \t\t};\r\n-\t\tconst counts = (appointments).reduce(\r\n-\t\t\t(acc, appointment) => {\r\n-\t\t\t\tswitch (appointment.status) {\r\n-\t\t\t\t\tcase 'scheduled':\r\n-\t\t\t\t\t\tacc.scheduledCount++;\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t\tcase 'pending':\r\n-\t\t\t\t\t\tacc.pendingCount++;\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t\tcase 'cancelled':\r\n-\t\t\t\t\t\tacc.cancelledCount++;\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t}\r\n-\t\t\t\treturn acc;\r\n-\t\t\t},\r\n-\t\t\tinitialCounts\r\n-\t\t);\r\n-\t\tconst data = {\r\n-\t\t\ttotalCount: appointments.total,\r\n-\t\t\t...counts,\r\n-\t\t\tdocuments: appointments.documents,\r\n-\t\t};\r\n+\t\tconst counts = appointments.reduce((acc, appointment) => {\r\n+\t\t\tswitch (appointment.status) {\r\n+\t\t\t\tcase 'scheduled':\r\n+\t\t\t\t\tacc.scheduledCount++;\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t\tcase 'pending':\r\n+\t\t\t\t\tacc.pendingCount++;\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t\tcase 'cancelled':\r\n+\t\t\t\t\tacc.cancelledCount++;\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t}\r\n+\t\t\treturn acc;\r\n+\t\t}, initialCounts);\r\n+\t\t// const data = {\r\n+\t\t// \ttotalCount: appointments.total,\r\n+\t\t// \t...counts,\r\n+\t\t// \tdocuments: appointments.documents,\r\n+\t\t// };\r\n \t\treturn { success: true, data };\r\n \t} catch (error) {\r\n \t\tconsole.log(error);\r\n \t\tif (error instanceof AuthError) {\r\n"
                },
                {
                    "date": 1724283649956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,19 +63,19 @@\n \r\n export const getRecentAppointmentList = async () => {\r\n \ttry {\r\n \t\tconst appointments = await db.appointment.findMany();\r\n-\t\tconst [data, count] = await db.$transaction([\r\n+\t\tconst [documents, count] = await db.$transaction([\r\n \t\t\tdb.appointment.findMany(),\r\n \t\t\tdb.appointment.count(),\r\n \t\t]);\r\n-\t\tconsole.log(data, count);\r\n+\t\tconsole.log(appointments, count);\r\n \t\tconst initialCounts = {\r\n \t\t\tscheduledCount: 0,\r\n \t\t\tpendingCount: 0,\r\n \t\t\tcancelledCount: 0,\r\n \t\t};\r\n-\t\tconst counts = appointments.reduce((acc, appointment) => {\r\n+\t\tconst counts = documents.reduce((acc, appointment) => {\r\n \t\t\tswitch (appointment.status) {\r\n \t\t\t\tcase 'scheduled':\r\n \t\t\t\t\tacc.scheduledCount++;\r\n \t\t\t\t\tbreak;\r\n@@ -87,13 +87,13 @@\n \t\t\t\t\tbreak;\r\n \t\t\t}\r\n \t\t\treturn acc;\r\n \t\t}, initialCounts);\r\n-\t\t// const data = {\r\n-\t\t// \ttotalCount: appointments.total,\r\n-\t\t// \t...counts,\r\n-\t\t// \tdocuments: appointments.documents,\r\n-\t\t// };\r\n+\t\tconst data = {\r\n+\t\t\ttotalCount: count,\r\n+\t\t\t...counts,\r\n+\t\t\tdocuments,\r\n+\t\t};\r\n \t\treturn { success: true, data };\r\n \t} catch (error) {\r\n \t\tconsole.log(error);\r\n \t\tif (error instanceof AuthError) {\r\n"
                },
                {
                    "date": 1724284346876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,8 @@\n \t\t\t},\r\n \t\t});\r\n \t\treturn { success: true, createdId: id };\r\n \t} catch (error) {\r\n-\t\tconsole.log(error);\r\n \t\tif (error instanceof AuthError) {\r\n \t\t\treturn { error: error.cause?.err?.message };\r\n \t\t}\r\n \t\treturn { error: 'error 500' };\r\n"
                },
                {
                    "date": 1724284372484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,12 @@\n 'use server';\r\n \r\n-import { ID, Query } from 'node-appwrite';\r\n import {\r\n \tDATABASE_ID,\r\n \tdatabases,\r\n \tAPPOINTMENT_COLLECTION_ID,\r\n } from '../appwite.config';\r\n-import { formatDateTime, parseStringify } from '../utils';\r\n+import { parseStringify } from '../utils';\r\n import { revalidatePath } from 'next/cache';\r\n import { CreateAppointmentSchema } from '../validation';\r\n import { db } from '../db';\r\n import { AuthError } from 'next-auth';\r\n"
                },
                {
                    "date": 1724287136687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,136 @@\n+'use server';\r\n+\r\n+import {\r\n+\tDATABASE_ID,\r\n+\tdatabases,\r\n+\tAPPOINTMENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+import { revalidatePath } from 'next/cache';\r\n+import { CreateAppointmentSchema } from '../validation';\r\n+import { db } from '../db';\r\n+import { AuthError } from 'next-auth';\r\n+\r\n+export const createAppointment = async (\r\n+\tappointmentData: CreateAppointmentParams\r\n+) => {\r\n+\ttry {\r\n+\t\tconst { data, success } =\r\n+\t\t\tCreateAppointmentSchema.safeParse(appointmentData);\r\n+\r\n+\t\tif (!success) {\r\n+\t\t\treturn {\r\n+\t\t\t\terror: 'Invalid data',\r\n+\t\t\t};\r\n+\t\t}\r\n+\t\tconst { id } = await db.appointment.create({\r\n+\t\t\tdata: {\r\n+\t\t\t\t...data,\r\n+\t\t\t\tuserId: appointmentData.userId,\r\n+\t\t\t\tpatientId: appointmentData.patient,\r\n+\t\t\t\tstatus: appointmentData.status,\r\n+\t\t\t},\r\n+\t\t});\r\n+\t\treturn { success: true, createdId: id };\r\n+\t} catch (error) {\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+};\r\n+\r\n+export const getAppointment = async (appointmentId: string) => {\r\n+\tconsole.log(appointmentId);\r\n+\ttry {\r\n+\t\tconst appointment = await databases.getDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tappointmentId\r\n+\t\t);\r\n+\t\tconsole.log(appointment);\r\n+\r\n+\t\treturn parseStringify(appointment);\r\n+\t} catch (error) {\r\n+\t\tconsole.error(\r\n+\t\t\t'An error occurred while retrieving the existing patient:',\r\n+\t\t\terror\r\n+\t\t);\r\n+\t}\r\n+};\r\n+\r\n+export const getRecentAppointmentList = async () => {\r\n+\ttry {\r\n+\t\tconst appointments = await db.appointment.findMany();\r\n+\t\tconsole.log(appointments)\r\n+\t\tconst [documents, count] = await db.$transaction([\r\n+\t\t\tdb.appointment.findMany(),\r\n+\t\t\tdb.appointment.count(),\r\n+\t\t]);\r\n+\t\tconsole.log(appointments, count);\r\n+\t\tconst initialCounts = {\r\n+\t\t\tscheduledCount: 0,\r\n+\t\t\tpendingCount: 0,\r\n+\t\t\tcancelledCount: 0,\r\n+\t\t};\r\n+\t\tconst counts = documents.reduce((acc, appointment) => {\r\n+\t\t\tswitch (appointment.status) {\r\n+\t\t\t\tcase 'scheduled':\r\n+\t\t\t\t\tacc.scheduledCount++;\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t\tcase 'pending':\r\n+\t\t\t\t\tacc.pendingCount++;\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t\tcase 'cancelled':\r\n+\t\t\t\t\tacc.cancelledCount++;\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t}\r\n+\t\t\treturn acc;\r\n+\t\t}, initialCounts);\r\n+\t\tconst data = {\r\n+\t\t\ttotalCount: count,\r\n+\t\t\t...counts,\r\n+\t\t\tdocuments,\r\n+\t\t};\r\n+\t\treturn { success: true, data };\r\n+\t} catch (error) {\r\n+\t\tconsole.log(error);\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+};\r\n+\r\n+export const updateAppointment = async ({\r\n+\tappointmentId,\r\n+\tappointment,\r\n+\ttype,\r\n+}: UpdateAppointmentParams) => {\r\n+\ttry {\r\n+\t\tconst updatedAppointment = await databases.updateDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tappointmentId,\r\n+\t\t\tappointment\r\n+\t\t);\r\n+\r\n+\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n+\r\n+\t\t// const smsMessage = `Greetings from CarePulse. ${\r\n+\t\t// \ttype === 'schedule'\r\n+\t\t// \t\t? `Your appointment is confirmed for ${\r\n+\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t// \t\t  } with Dr. ${appointment.primaryPhysician}`\r\n+\t\t// \t\t: `We regret to inform that your appointment for ${\r\n+\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n+\t\t// }.`;\r\n+\t\t//await sendSMSNotification(userId, smsMessage);\r\n+\r\n+\t\trevalidatePath('/admin');\r\n+\t\treturn parseStringify(updatedAppointment);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1724287153187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n \t\tconst [documents, count] = await db.$transaction([\r\n \t\t\tdb.appointment.findMany(),\r\n \t\t\tdb.appointment.count(),\r\n \t\t]);\r\n-\t\tconsole.log(appointments, count);\r\n+\t\t// console.log(appointments, count);\r\n \t\tconst initialCounts = {\r\n \t\t\tscheduledCount: 0,\r\n \t\t\tpendingCount: 0,\r\n \t\t\tcancelledCount: 0,\r\n@@ -133,139 +133,4 @@\n \t} catch (error) {\r\n \t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n \t}\r\n };\r\n-'use server';\r\n-\r\n-import {\r\n-\tDATABASE_ID,\r\n-\tdatabases,\r\n-\tAPPOINTMENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-import { revalidatePath } from 'next/cache';\r\n-import { CreateAppointmentSchema } from '../validation';\r\n-import { db } from '../db';\r\n-import { AuthError } from 'next-auth';\r\n-\r\n-export const createAppointment = async (\r\n-\tappointmentData: CreateAppointmentParams\r\n-) => {\r\n-\ttry {\r\n-\t\tconst { data, success } =\r\n-\t\t\tCreateAppointmentSchema.safeParse(appointmentData);\r\n-\r\n-\t\tif (!success) {\r\n-\t\t\treturn {\r\n-\t\t\t\terror: 'Invalid data',\r\n-\t\t\t};\r\n-\t\t}\r\n-\t\tconst { id } = await db.appointment.create({\r\n-\t\t\tdata: {\r\n-\t\t\t\t...data,\r\n-\t\t\t\tuserId: appointmentData.userId,\r\n-\t\t\t\tpatientId: appointmentData.patient,\r\n-\t\t\t\tstatus: appointmentData.status,\r\n-\t\t\t},\r\n-\t\t});\r\n-\t\treturn { success: true, createdId: id };\r\n-\t} catch (error) {\r\n-\t\tif (error instanceof AuthError) {\r\n-\t\t\treturn { error: error.cause?.err?.message };\r\n-\t\t}\r\n-\t\treturn { error: 'error 500' };\r\n-\t}\r\n-};\r\n-\r\n-export const getAppointment = async (appointmentId: string) => {\r\n-\tconsole.log(appointmentId);\r\n-\ttry {\r\n-\t\tconst appointment = await databases.getDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tappointmentId\r\n-\t\t);\r\n-\t\tconsole.log(appointment);\r\n-\r\n-\t\treturn parseStringify(appointment);\r\n-\t} catch (error) {\r\n-\t\tconsole.error(\r\n-\t\t\t'An error occurred while retrieving the existing patient:',\r\n-\t\t\terror\r\n-\t\t);\r\n-\t}\r\n-};\r\n-\r\n-export const getRecentAppointmentList = async () => {\r\n-\ttry {\r\n-\t\tconst appointments = await db.appointment.findMany();\r\n-\t\tconst [documents, count] = await db.$transaction([\r\n-\t\t\tdb.appointment.findMany(),\r\n-\t\t\tdb.appointment.count(),\r\n-\t\t]);\r\n-\t\tconsole.log(appointments, count);\r\n-\t\tconst initialCounts = {\r\n-\t\t\tscheduledCount: 0,\r\n-\t\t\tpendingCount: 0,\r\n-\t\t\tcancelledCount: 0,\r\n-\t\t};\r\n-\t\tconst counts = documents.reduce((acc, appointment) => {\r\n-\t\t\tswitch (appointment.status) {\r\n-\t\t\t\tcase 'scheduled':\r\n-\t\t\t\t\tacc.scheduledCount++;\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t\tcase 'pending':\r\n-\t\t\t\t\tacc.pendingCount++;\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t\tcase 'cancelled':\r\n-\t\t\t\t\tacc.cancelledCount++;\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t}\r\n-\t\t\treturn acc;\r\n-\t\t}, initialCounts);\r\n-\t\tconst data = {\r\n-\t\t\ttotalCount: count,\r\n-\t\t\t...counts,\r\n-\t\t\tdocuments,\r\n-\t\t};\r\n-\t\treturn { success: true, data };\r\n-\t} catch (error) {\r\n-\t\tconsole.log(error);\r\n-\t\tif (error instanceof AuthError) {\r\n-\t\t\treturn { error: error.cause?.err?.message };\r\n-\t\t}\r\n-\t\treturn { error: 'error 500' };\r\n-\t}\r\n-};\r\n-\r\n-export const updateAppointment = async ({\r\n-\tappointmentId,\r\n-\tappointment,\r\n-\ttype,\r\n-}: UpdateAppointmentParams) => {\r\n-\ttry {\r\n-\t\tconst updatedAppointment = await databases.updateDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tappointmentId,\r\n-\t\t\tappointment\r\n-\t\t);\r\n-\r\n-\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n-\r\n-\t\t// const smsMessage = `Greetings from CarePulse. ${\r\n-\t\t// \ttype === 'schedule'\r\n-\t\t// \t\t? `Your appointment is confirmed for ${\r\n-\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n-\t\t// \t\t  } with Dr. ${appointment.primaryPhysician}`\r\n-\t\t// \t\t: `We regret to inform that your appointment for ${\r\n-\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n-\t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n-\t\t// }.`;\r\n-\t\t//await sendSMSNotification(userId, smsMessage);\r\n-\r\n-\t\trevalidatePath('/admin');\r\n-\t\treturn parseStringify(updatedAppointment);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n-\t}\r\n-};\r\n"
                },
                {
                    "date": 1724287665694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+'use server';\r\n+\r\n+import {\r\n+\tDATABASE_ID,\r\n+\tdatabases,\r\n+\tAPPOINTMENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+import { revalidatePath } from 'next/cache';\r\n+import { CreateAppointmentSchema } from '../validation';\r\n+import { db } from '../db';\r\n+import { AuthError } from 'next-auth';\r\n+\r\n+export const createAppointment = async (\r\n+\tappointmentData: CreateAppointmentParams\r\n+) => {\r\n+\ttry {\r\n+\t\tconst { data, success } =\r\n+\t\t\tCreateAppointmentSchema.safeParse(appointmentData);\r\n+\r\n+\t\tif (!success) {\r\n+\t\t\treturn {\r\n+\t\t\t\terror: 'Invalid data',\r\n+\t\t\t};\r\n+\t\t}\r\n+\t\tconst { id } = await db.appointment.create({\r\n+\t\t\tdata: {\r\n+\t\t\t\t...data,\r\n+\t\t\t\tuserId: appointmentData.userId,\r\n+\t\t\t\tpatientId: appointmentData.patient,\r\n+\t\t\t\tstatus: appointmentData.status,\r\n+\t\t\t},\r\n+\t\t});\r\n+\t\treturn { success: true, createdId: id };\r\n+\t} catch (error) {\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+};\r\n+\r\n+export const getAppointment = async (appointmentId: string) => {\r\n+\tconsole.log(appointmentId);\r\n+\ttry {\r\n+\t\tconst appointment = await databases.getDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tappointmentId\r\n+\t\t);\r\n+\t\tconsole.log(appointment);\r\n+\r\n+\t\treturn parseStringify(appointment);\r\n+\t} catch (error) {\r\n+\t\tconsole.error(\r\n+\t\t\t'An error occurred while retrieving the existing patient:',\r\n+\t\t\terror\r\n+\t\t);\r\n+\t}\r\n+};\r\n+\r\n+export const getRecentAppointmentList = async () => {\r\n+\ttry {\r\n+\t\tconst appointments = await db.appointment.findMany({\r\n+\t\t\tinclude: {\r\n+\t\t\t\tpatient: true, // All posts where authorId == 20\r\n+\t\t\t  },\r\n+\t\t});\r\n+\t\tconsole.log(appointments)\r\n+\t\tconst [documents, count] = await db.$transaction([\r\n+\t\t\tdb.appointment.findMany(),\r\n+\t\t\tdb.appointment.count(),\r\n+\t\t]);\r\n+\t\t// console.log(appointments, count);\r\n+\t\tconst initialCounts = {\r\n+\t\t\tscheduledCount: 0,\r\n+\t\t\tpendingCount: 0,\r\n+\t\t\tcancelledCount: 0,\r\n+\t\t};\r\n+\t\tconst counts = documents.reduce((acc, appointment) => {\r\n+\t\t\tswitch (appointment.status) {\r\n+\t\t\t\tcase 'scheduled':\r\n+\t\t\t\t\tacc.scheduledCount++;\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t\tcase 'pending':\r\n+\t\t\t\t\tacc.pendingCount++;\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t\tcase 'cancelled':\r\n+\t\t\t\t\tacc.cancelledCount++;\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t}\r\n+\t\t\treturn acc;\r\n+\t\t}, initialCounts);\r\n+\t\tconst data = {\r\n+\t\t\ttotalCount: count,\r\n+\t\t\t...counts,\r\n+\t\t\tdocuments,\r\n+\t\t};\r\n+\t\treturn { success: true, data };\r\n+\t} catch (error) {\r\n+\t\tconsole.log(error);\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+};\r\n+\r\n+export const updateAppointment = async ({\r\n+\tappointmentId,\r\n+\tappointment,\r\n+\ttype,\r\n+}: UpdateAppointmentParams) => {\r\n+\ttry {\r\n+\t\tconst updatedAppointment = await databases.updateDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tappointmentId,\r\n+\t\t\tappointment\r\n+\t\t);\r\n+\r\n+\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n+\r\n+\t\t// const smsMessage = `Greetings from CarePulse. ${\r\n+\t\t// \ttype === 'schedule'\r\n+\t\t// \t\t? `Your appointment is confirmed for ${\r\n+\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t// \t\t  } with Dr. ${appointment.primaryPhysician}`\r\n+\t\t// \t\t: `We regret to inform that your appointment for ${\r\n+\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n+\t\t// }.`;\r\n+\t\t//await sendSMSNotification(userId, smsMessage);\r\n+\r\n+\t\trevalidatePath('/admin');\r\n+\t\treturn parseStringify(updatedAppointment);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1724287878928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+'use server';\r\n+\r\n+import {\r\n+\tDATABASE_ID,\r\n+\tdatabases,\r\n+\tAPPOINTMENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+import { revalidatePath } from 'next/cache';\r\n+import { CreateAppointmentSchema } from '../validation';\r\n+import { db } from '../db';\r\n+import { AuthError } from 'next-auth';\r\n+\r\n+export const createAppointment = async (\r\n+\tappointmentData: CreateAppointmentParams\r\n+) => {\r\n+\ttry {\r\n+\t\tconst { data, success } =\r\n+\t\t\tCreateAppointmentSchema.safeParse(appointmentData);\r\n+\r\n+\t\tif (!success) {\r\n+\t\t\treturn {\r\n+\t\t\t\terror: 'Invalid data',\r\n+\t\t\t};\r\n+\t\t}\r\n+\t\tconst { id } = await db.appointment.create({\r\n+\t\t\tdata: {\r\n+\t\t\t\t...data,\r\n+\t\t\t\tuserId: appointmentData.userId,\r\n+\t\t\t\tpatientId: appointmentData.patient,\r\n+\t\t\t\tstatus: appointmentData.status,\r\n+\t\t\t},\r\n+\t\t});\r\n+\t\treturn { success: true, createdId: id };\r\n+\t} catch (error) {\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+};\r\n+\r\n+export const getAppointment = async (appointmentId: string) => {\r\n+\tconsole.log(appointmentId);\r\n+\ttry {\r\n+\t\tconst appointment = await databases.getDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tappointmentId\r\n+\t\t);\r\n+\t\tconsole.log(appointment);\r\n+\r\n+\t\treturn parseStringify(appointment);\r\n+\t} catch (error) {\r\n+\t\tconsole.error(\r\n+\t\t\t'An error occurred while retrieving the existing patient:',\r\n+\t\t\terror\r\n+\t\t);\r\n+\t}\r\n+};\r\n+\r\n+export const getRecentAppointmentList = async () => {\r\n+\ttry {\r\n+\t\tconst appointments = await db.appointment.findMany({\r\n+\t\t\tinclude: {\r\n+\t\t\t\tpatient: true, // All posts where authorId == 20\r\n+\t\t\t  },\r\n+\t\t});\r\n+\t\tconsole.log(appointments)\r\n+\t\tconst [documents, count] = await db.$transaction([\r\n+\t\t\tdb.appointment.findMany(),\r\n+\t\t\tdb.appointment.count(),\r\n+\t\t]);\r\n+\t\t// console.log(appointments, count);\r\n+\t\tconst initialCounts = {\r\n+\t\t\tscheduledCount: 0,\r\n+\t\t\tpendingCount: 0,\r\n+\t\t\tcancelledCount: 0,\r\n+\t\t};\r\n+\t\tconst counts = documents.reduce((acc, appointment) => {\r\n+\t\t\tswitch (appointment.status) {\r\n+\t\t\t\tcase 'scheduled':\r\n+\t\t\t\t\tacc.scheduledCount++;\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t\tcase 'pending':\r\n+\t\t\t\t\tacc.pendingCount++;\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t\tcase 'cancelled':\r\n+\t\t\t\t\tacc.cancelledCount++;\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t}\r\n+\t\t\treturn acc;\r\n+\t\t}, initialCounts);\r\n+\t\tconst data = {\r\n+\t\t\ttotalCount: count,\r\n+\t\t\t...counts,\r\n+\t\t\tdocuments,\r\n+\t\t};\r\n+\t\treturn { success: true, data };\r\n+\t} catch (error) {\r\n+\t\tconsole.log(error);\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+};\r\n+\r\n+export const updateAppointment = async ({\r\n+\tappointmentId,\r\n+\tappointment,\r\n+\ttype,\r\n+}: UpdateAppointmentParams) => {\r\n+\ttry {\r\n+\t\tconst updatedAppointment = await databases.updateDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tappointmentId,\r\n+\t\t\tappointment\r\n+\t\t);\r\n+\r\n+\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n+\r\n+\t\t// const smsMessage = `Greetings from CarePulse. ${\r\n+\t\t// \ttype === 'schedule'\r\n+\t\t// \t\t? `Your appointment is confirmed for ${\r\n+\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t// \t\t  } with Dr. ${appointment.primaryPhysician}`\r\n+\t\t// \t\t: `We regret to inform that your appointment for ${\r\n+\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n+\t\t// }.`;\r\n+\t\t//await sendSMSNotification(userId, smsMessage);\r\n+\r\n+\t\trevalidatePath('/admin');\r\n+\t\treturn parseStringify(updatedAppointment);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1724288067507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,159 +66,16 @@\n \t\t\t\tpatient: true, // All posts where authorId == 20\r\n \t\t\t  },\r\n \t\t});\r\n \t\tconsole.log(appointments)\r\n-\t\tconst [documents, count] = await db.$transaction([\r\n-\t\t\tdb.appointment.findMany(),\r\n-\t\t\tdb.appointment.count(),\r\n-\t\t]);\r\n-\t\t// console.log(appointments, count);\r\n-\t\tconst initialCounts = {\r\n-\t\t\tscheduledCount: 0,\r\n-\t\t\tpendingCount: 0,\r\n-\t\t\tcancelledCount: 0,\r\n-\t\t};\r\n-\t\tconst counts = documents.reduce((acc, appointment) => {\r\n-\t\t\tswitch (appointment.status) {\r\n-\t\t\t\tcase 'scheduled':\r\n-\t\t\t\t\tacc.scheduledCount++;\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t\tcase 'pending':\r\n-\t\t\t\t\tacc.pendingCount++;\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t\tcase 'cancelled':\r\n-\t\t\t\t\tacc.cancelledCount++;\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t}\r\n-\t\t\treturn acc;\r\n-\t\t}, initialCounts);\r\n-\t\tconst data = {\r\n-\t\t\ttotalCount: count,\r\n-\t\t\t...counts,\r\n-\t\t\tdocuments,\r\n-\t\t};\r\n-\t\treturn { success: true, data };\r\n-\t} catch (error) {\r\n-\t\tconsole.log(error);\r\n-\t\tif (error instanceof AuthError) {\r\n-\t\t\treturn { error: error.cause?.err?.message };\r\n-\t\t}\r\n-\t\treturn { error: 'error 500' };\r\n-\t}\r\n-};\r\n \r\n-export const updateAppointment = async ({\r\n-\tappointmentId,\r\n-\tappointment,\r\n-\ttype,\r\n-}: UpdateAppointmentParams) => {\r\n-\ttry {\r\n-\t\tconst updatedAppointment = await databases.updateDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tappointmentId,\r\n-\t\t\tappointment\r\n-\t\t);\r\n-\r\n-\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n-\r\n-\t\t// const smsMessage = `Greetings from CarePulse. ${\r\n-\t\t// \ttype === 'schedule'\r\n-\t\t// \t\t? `Your appointment is confirmed for ${\r\n-\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n-\t\t// \t\t  } with Dr. ${appointment.primaryPhysician}`\r\n-\t\t// \t\t: `We regret to inform that your appointment for ${\r\n-\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n-\t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n-\t\t// }.`;\r\n-\t\t//await sendSMSNotification(userId, smsMessage);\r\n-\r\n-\t\trevalidatePath('/admin');\r\n-\t\treturn parseStringify(updatedAppointment);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n-\t}\r\n-};\r\n-'use server';\r\n-\r\n-import {\r\n-\tDATABASE_ID,\r\n-\tdatabases,\r\n-\tAPPOINTMENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-import { revalidatePath } from 'next/cache';\r\n-import { CreateAppointmentSchema } from '../validation';\r\n-import { db } from '../db';\r\n-import { AuthError } from 'next-auth';\r\n-\r\n-export const createAppointment = async (\r\n-\tappointmentData: CreateAppointmentParams\r\n-) => {\r\n-\ttry {\r\n-\t\tconst { data, success } =\r\n-\t\t\tCreateAppointmentSchema.safeParse(appointmentData);\r\n-\r\n-\t\tif (!success) {\r\n-\t\t\treturn {\r\n-\t\t\t\terror: 'Invalid data',\r\n-\t\t\t};\r\n-\t\t}\r\n-\t\tconst { id } = await db.appointment.create({\r\n-\t\t\tdata: {\r\n-\t\t\t\t...data,\r\n-\t\t\t\tuserId: appointmentData.userId,\r\n-\t\t\t\tpatientId: appointmentData.patient,\r\n-\t\t\t\tstatus: appointmentData.status,\r\n-\t\t\t},\r\n-\t\t});\r\n-\t\treturn { success: true, createdId: id };\r\n-\t} catch (error) {\r\n-\t\tif (error instanceof AuthError) {\r\n-\t\t\treturn { error: error.cause?.err?.message };\r\n-\t\t}\r\n-\t\treturn { error: 'error 500' };\r\n-\t}\r\n-};\r\n-\r\n-export const getAppointment = async (appointmentId: string) => {\r\n-\tconsole.log(appointmentId);\r\n-\ttry {\r\n-\t\tconst appointment = await databases.getDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tappointmentId\r\n-\t\t);\r\n-\t\tconsole.log(appointment);\r\n-\r\n-\t\treturn parseStringify(appointment);\r\n-\t} catch (error) {\r\n-\t\tconsole.error(\r\n-\t\t\t'An error occurred while retrieving the existing patient:',\r\n-\t\t\terror\r\n-\t\t);\r\n-\t}\r\n-};\r\n-\r\n-export const getRecentAppointmentList = async () => {\r\n-\ttry {\r\n-\t\tconst appointments = await db.appointment.findMany({\r\n-\t\t\tinclude: {\r\n-\t\t\t\tpatient: true, // All posts where authorId == 20\r\n-\t\t\t  },\r\n-\t\t});\r\n-\t\tconsole.log(appointments)\r\n-\t\tconst [documents, count] = await db.$transaction([\r\n-\t\t\tdb.appointment.findMany(),\r\n-\t\t\tdb.appointment.count(),\r\n-\t\t]);\r\n \t\t// console.log(appointments, count);\r\n \t\tconst initialCounts = {\r\n \t\t\tscheduledCount: 0,\r\n \t\t\tpendingCount: 0,\r\n \t\t\tcancelledCount: 0,\r\n \t\t};\r\n-\t\tconst counts = documents.reduce((acc, appointment) => {\r\n+\t\tconst counts = appointments.reduce((acc, appointment) => {\r\n \t\t\tswitch (appointment.status) {\r\n \t\t\t\tcase 'scheduled':\r\n \t\t\t\t\tacc.scheduledCount++;\r\n \t\t\t\t\tbreak;\r\n@@ -231,11 +88,11 @@\n \t\t\t}\r\n \t\t\treturn acc;\r\n \t\t}, initialCounts);\r\n \t\tconst data = {\r\n-\t\t\ttotalCount: count,\r\n+\t\t\ttotalCount: appointments.length,\r\n \t\t\t...counts,\r\n-\t\t\tdocuments,\r\n+\t\t\tappointments,\r\n \t\t};\r\n \t\treturn { success: true, data };\r\n \t} catch (error) {\r\n \t\tconsole.log(error);\r\n@@ -277,140 +134,4 @@\n \t} catch (error) {\r\n \t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n \t}\r\n };\r\n-'use server';\r\n-\r\n-import {\r\n-\tDATABASE_ID,\r\n-\tdatabases,\r\n-\tAPPOINTMENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-import { revalidatePath } from 'next/cache';\r\n-import { CreateAppointmentSchema } from '../validation';\r\n-import { db } from '../db';\r\n-import { AuthError } from 'next-auth';\r\n-\r\n-export const createAppointment = async (\r\n-\tappointmentData: CreateAppointmentParams\r\n-) => {\r\n-\ttry {\r\n-\t\tconst { data, success } =\r\n-\t\t\tCreateAppointmentSchema.safeParse(appointmentData);\r\n-\r\n-\t\tif (!success) {\r\n-\t\t\treturn {\r\n-\t\t\t\terror: 'Invalid data',\r\n-\t\t\t};\r\n-\t\t}\r\n-\t\tconst { id } = await db.appointment.create({\r\n-\t\t\tdata: {\r\n-\t\t\t\t...data,\r\n-\t\t\t\tuserId: appointmentData.userId,\r\n-\t\t\t\tpatientId: appointmentData.patient,\r\n-\t\t\t\tstatus: appointmentData.status,\r\n-\t\t\t},\r\n-\t\t});\r\n-\t\treturn { success: true, createdId: id };\r\n-\t} catch (error) {\r\n-\t\tif (error instanceof AuthError) {\r\n-\t\t\treturn { error: error.cause?.err?.message };\r\n-\t\t}\r\n-\t\treturn { error: 'error 500' };\r\n-\t}\r\n-};\r\n-\r\n-export const getAppointment = async (appointmentId: string) => {\r\n-\tconsole.log(appointmentId);\r\n-\ttry {\r\n-\t\tconst appointment = await databases.getDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tappointmentId\r\n-\t\t);\r\n-\t\tconsole.log(appointment);\r\n-\r\n-\t\treturn parseStringify(appointment);\r\n-\t} catch (error) {\r\n-\t\tconsole.error(\r\n-\t\t\t'An error occurred while retrieving the existing patient:',\r\n-\t\t\terror\r\n-\t\t);\r\n-\t}\r\n-};\r\n-\r\n-export const getRecentAppointmentList = async () => {\r\n-\ttry {\r\n-\t\tconst appointments = await db.appointment.findMany();\r\n-\t\tconsole.log(appointments)\r\n-\t\tconst [documents, count] = await db.$transaction([\r\n-\t\t\tdb.appointment.findMany(),\r\n-\t\t\tdb.appointment.count(),\r\n-\t\t]);\r\n-\t\t// console.log(appointments, count);\r\n-\t\tconst initialCounts = {\r\n-\t\t\tscheduledCount: 0,\r\n-\t\t\tpendingCount: 0,\r\n-\t\t\tcancelledCount: 0,\r\n-\t\t};\r\n-\t\tconst counts = documents.reduce((acc, appointment) => {\r\n-\t\t\tswitch (appointment.status) {\r\n-\t\t\t\tcase 'scheduled':\r\n-\t\t\t\t\tacc.scheduledCount++;\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t\tcase 'pending':\r\n-\t\t\t\t\tacc.pendingCount++;\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t\tcase 'cancelled':\r\n-\t\t\t\t\tacc.cancelledCount++;\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t}\r\n-\t\t\treturn acc;\r\n-\t\t}, initialCounts);\r\n-\t\tconst data = {\r\n-\t\t\ttotalCount: count,\r\n-\t\t\t...counts,\r\n-\t\t\tdocuments,\r\n-\t\t};\r\n-\t\treturn { success: true, data };\r\n-\t} catch (error) {\r\n-\t\tconsole.log(error);\r\n-\t\tif (error instanceof AuthError) {\r\n-\t\t\treturn { error: error.cause?.err?.message };\r\n-\t\t}\r\n-\t\treturn { error: 'error 500' };\r\n-\t}\r\n-};\r\n-\r\n-export const updateAppointment = async ({\r\n-\tappointmentId,\r\n-\tappointment,\r\n-\ttype,\r\n-}: UpdateAppointmentParams) => {\r\n-\ttry {\r\n-\t\tconst updatedAppointment = await databases.updateDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tappointmentId,\r\n-\t\t\tappointment\r\n-\t\t);\r\n-\r\n-\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n-\r\n-\t\t// const smsMessage = `Greetings from CarePulse. ${\r\n-\t\t// \ttype === 'schedule'\r\n-\t\t// \t\t? `Your appointment is confirmed for ${\r\n-\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n-\t\t// \t\t  } with Dr. ${appointment.primaryPhysician}`\r\n-\t\t// \t\t: `We regret to inform that your appointment for ${\r\n-\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n-\t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n-\t\t// }.`;\r\n-\t\t//await sendSMSNotification(userId, smsMessage);\r\n-\r\n-\t\trevalidatePath('/admin');\r\n-\t\treturn parseStringify(updatedAppointment);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n-\t}\r\n-};\r\n"
                },
                {
                    "date": 1724360552562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,11 +65,8 @@\n \t\t\tinclude: {\r\n \t\t\t\tpatient: true, // All posts where authorId == 20\r\n \t\t\t  },\r\n \t\t});\r\n-\t\tconsole.log(appointments)\r\n-\r\n-\t\t// console.log(appointments, count);\r\n \t\tconst initialCounts = {\r\n \t\t\tscheduledCount: 0,\r\n \t\t\tpendingCount: 0,\r\n \t\t\tcancelledCount: 0,\r\n"
                },
                {
                    "date": 1724366327652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,134 @@\n+'use server';\r\n+\r\n+import {\r\n+\tDATABASE_ID,\r\n+\tdatabases,\r\n+\tAPPOINTMENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+import { revalidatePath } from 'next/cache';\r\n+import { CreateAppointmentSchema } from '../validation';\r\n+import { db } from '../db';\r\n+import { AuthError } from 'next-auth';\r\n+\r\n+export const createAppointment = async (\r\n+\tappointmentData: CreateAppointmentParams\r\n+) => {\r\n+\ttry {\r\n+\t\tconst { data, success } =\r\n+\t\t\tCreateAppointmentSchema.safeParse(appointmentData);\r\n+\r\n+\t\tif (!success) {\r\n+\t\t\treturn {\r\n+\t\t\t\terror: 'Invalid data',\r\n+\t\t\t};\r\n+\t\t}\r\n+\t\tconst { id } = await db.appointment.create({\r\n+\t\t\tdata: {\r\n+\t\t\t\t...data,\r\n+\t\t\t\tuserId: appointmentData.userId,\r\n+\t\t\t\tpatientId: appointmentData.patient,\r\n+\t\t\t\tstatus: appointmentData.status,\r\n+\t\t\t},\r\n+\t\t});\r\n+\t\treturn { success: true, createdId: id };\r\n+\t} catch (error) {\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+};\r\n+\r\n+export const getAppointment = async (appointmentId: string) => {\r\n+\r\n+\ttry {\r\n+\t\tconst appointment = await databases.getDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tappointmentId\r\n+\t\t);\r\n+\t\tconsole.log(appointment);\r\n+\r\n+\t\treturn parseStringify(appointment);\r\n+\t} catch (error) {\r\n+\t\tconsole.error(\r\n+\t\t\t'An error occurred while retrieving the existing patient:',\r\n+\t\t\terror\r\n+\t\t);\r\n+\t}\r\n+};\r\n+\r\n+export const getRecentAppointmentList = async () => {\r\n+\ttry {\r\n+\t\tconst appointments = await db.appointment.findMany({\r\n+\t\t\tinclude: {\r\n+\t\t\t\tpatient: true, // All posts where authorId == 20\r\n+\t\t\t  },\r\n+\t\t});\r\n+\t\tconst initialCounts = {\r\n+\t\t\tscheduledCount: 0,\r\n+\t\t\tpendingCount: 0,\r\n+\t\t\tcancelledCount: 0,\r\n+\t\t};\r\n+\t\tconst counts = appointments.reduce((acc, appointment) => {\r\n+\t\t\tswitch (appointment.status) {\r\n+\t\t\t\tcase 'scheduled':\r\n+\t\t\t\t\tacc.scheduledCount++;\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t\tcase 'pending':\r\n+\t\t\t\t\tacc.pendingCount++;\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t\tcase 'cancelled':\r\n+\t\t\t\t\tacc.cancelledCount++;\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t}\r\n+\t\t\treturn acc;\r\n+\t\t}, initialCounts);\r\n+\t\tconst data = {\r\n+\t\t\ttotalCount: appointments.length,\r\n+\t\t\t...counts,\r\n+\t\t\tappointments,\r\n+\t\t};\r\n+\t\treturn { success: true, data };\r\n+\t} catch (error) {\r\n+\t\tconsole.log(error);\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+};\r\n+\r\n+export const updateAppointment = async ({\r\n+\tappointmentId,\r\n+\tappointment,\r\n+\ttype,\r\n+}: UpdateAppointmentParams) => {\r\n+\ttry {\r\n+\t\tconst updatedAppointment = await databases.updateDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tappointmentId,\r\n+\t\t\tappointment\r\n+\t\t);\r\n+\r\n+\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n+\r\n+\t\t// const smsMessage = `Greetings from CarePulse. ${\r\n+\t\t// \ttype === 'schedule'\r\n+\t\t// \t\t? `Your appointment is confirmed for ${\r\n+\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t// \t\t  } with Dr. ${appointment.primaryPhysician}`\r\n+\t\t// \t\t: `We regret to inform that your appointment for ${\r\n+\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n+\t\t// }.`;\r\n+\t\t//await sendSMSNotification(userId, smsMessage);\r\n+\r\n+\t\trevalidatePath('/admin');\r\n+\t\treturn parseStringify(updatedAppointment);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1724399879087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+'use server';\r\n+\r\n+import {\r\n+\tDATABASE_ID,\r\n+\tdatabases,\r\n+\tAPPOINTMENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+import { revalidatePath } from 'next/cache';\r\n+import { CreateAppointmentSchema } from '../validation';\r\n+import { db } from '../db';\r\n+import { AuthError } from 'next-auth';\r\n+\r\n+export const createAppointment = async (\r\n+\tappointmentData: CreateAppointmentParams\r\n+) => {\r\n+\ttry {\r\n+\t\tconst { data, success } =\r\n+\t\t\tCreateAppointmentSchema.safeParse(appointmentData);\r\n+\r\n+\t\tif (!success) {\r\n+\t\t\treturn {\r\n+\t\t\t\terror: 'Invalid data',\r\n+\t\t\t};\r\n+\t\t}\r\n+\t\tconst { id } = await db.appointment.create({\r\n+\t\t\tdata: {\r\n+\t\t\t\t...data,\r\n+\t\t\t\tuserId: appointmentData.userId,\r\n+\t\t\t\tpatientId: appointmentData.patient,\r\n+\t\t\t\tstatus: appointmentData.status,\r\n+\t\t\t},\r\n+\t\t});\r\n+\t\treturn { success: true, createdId: id };\r\n+\t} catch (error) {\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+};\r\n+\r\n+export const getAppointment = async (appointmentId: string) => {\r\n+\ttry {\r\n+\t\tconst appointment = await databases.getDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tappointmentId\r\n+\t\t);\r\n+\t\tconsole.log(appointment);\r\n+\r\n+\t\treturn parseStringify(appointment);\r\n+\t} catch (error) {\r\n+\t\tconsole.error(\r\n+\t\t\t'An error occurred while retrieving the existing patient:',\r\n+\t\t\terror\r\n+\t\t);\r\n+\t}\r\n+};\r\n+\r\n+export const getRecentAppointmentList = async () => {\r\n+\ttry {\r\n+\t\tconst appointments = await db.appointment.findMany({\r\n+\t\t\tinclude: {\r\n+\t\t\t\tpatient: true, // All posts where authorId == 20\r\n+\t\t\t},\r\n+\t\t});\r\n+\t\tconst initialCounts = {\r\n+\t\t\tscheduledCount: 0,\r\n+\t\t\tpendingCount: 0,\r\n+\t\t\tcancelledCount: 0,\r\n+\t\t};\r\n+\t\tconst counts = appointments.reduce((acc, appointment) => {\r\n+\t\t\tswitch (appointment.status) {\r\n+\t\t\t\tcase 'scheduled':\r\n+\t\t\t\t\tacc.scheduledCount++;\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t\tcase 'pending':\r\n+\t\t\t\t\tacc.pendingCount++;\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t\tcase 'cancelled':\r\n+\t\t\t\t\tacc.cancelledCount++;\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t}\r\n+\t\t\treturn acc;\r\n+\t\t}, initialCounts);\r\n+\t\tconst data = {\r\n+\t\t\ttotalCount: appointments.length,\r\n+\t\t\t...counts,\r\n+\t\t\tappointments,\r\n+\t\t};\r\n+\t\treturn { success: true, data };\r\n+\t} catch (error) {\r\n+\t\tconsole.log(error);\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+};\r\n+\r\n+export const updateAppointment = async ({\r\n+\tappointmentId,\r\n+\tappointment,\r\n+\ttype,\r\n+}: UpdateAppointmentParams) => {\r\n+\ttry {\r\n+\t\tconst updatedAppointment = await db.appointment.update({\r\n+\t\t\twhere: { id: appointmentId },\r\n+\t\t\tdata: appointment,\r\n+\t\t});\r\n+\r\n+\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n+\r\n+\t\t// const smsMessage = `Greetings from CarePulse. ${\r\n+\t\t// \ttype === 'schedule'\r\n+\t\t// \t\t? `Your appointment is confirmed for ${\r\n+\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t// \t\t  } with Dr. ${appointment.primaryPhysician}`\r\n+\t\t// \t\t: `We regret to inform that your appointment for ${\r\n+\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n+\t\t// }.`;\r\n+\t\t//await sendSMSNotification(userId, smsMessage);\r\n+\r\n+\t\trevalidatePath('/admin');\r\n+\t\treturn parseStringify(updatedAppointment);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1724399891352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+'use server';\r\n+\r\n+import {\r\n+\tDATABASE_ID,\r\n+\tdatabases,\r\n+\tAPPOINTMENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+import { revalidatePath } from 'next/cache';\r\n+import { CreateAppointmentSchema } from '../validation';\r\n+import { db } from '../db';\r\n+import { AuthError } from 'next-auth';\r\n+\r\n+export const createAppointment = async (\r\n+\tappointmentData: CreateAppointmentParams\r\n+) => {\r\n+\ttry {\r\n+\t\tconst { data, success } =\r\n+\t\t\tCreateAppointmentSchema.safeParse(appointmentData);\r\n+\r\n+\t\tif (!success) {\r\n+\t\t\treturn {\r\n+\t\t\t\terror: 'Invalid data',\r\n+\t\t\t};\r\n+\t\t}\r\n+\t\tconst { id } = await db.appointment.create({\r\n+\t\t\tdata: {\r\n+\t\t\t\t...data,\r\n+\t\t\t\tuserId: appointmentData.userId,\r\n+\t\t\t\tpatientId: appointmentData.patient,\r\n+\t\t\t\tstatus: appointmentData.status,\r\n+\t\t\t},\r\n+\t\t});\r\n+\t\treturn { success: true, createdId: id };\r\n+\t} catch (error) {\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+};\r\n+\r\n+export const getAppointment = async (appointmentId: string) => {\r\n+\ttry {\r\n+\t\tconst appointment = await databases.getDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n+\t\t\tappointmentId\r\n+\t\t);\r\n+\t\tconsole.log(appointment);\r\n+\r\n+\t\treturn parseStringify(appointment);\r\n+\t} catch (error) {\r\n+\t\tconsole.error(\r\n+\t\t\t'An error occurred while retrieving the existing patient:',\r\n+\t\t\terror\r\n+\t\t);\r\n+\t}\r\n+};\r\n+\r\n+export const getRecentAppointmentList = async () => {\r\n+\ttry {\r\n+\t\tconst appointments = await db.appointment.findMany({\r\n+\t\t\tinclude: {\r\n+\t\t\t\tpatient: true, // All posts where authorId == 20\r\n+\t\t\t},\r\n+\t\t});\r\n+\t\tconst initialCounts = {\r\n+\t\t\tscheduledCount: 0,\r\n+\t\t\tpendingCount: 0,\r\n+\t\t\tcancelledCount: 0,\r\n+\t\t};\r\n+\t\tconst counts = appointments.reduce((acc, appointment) => {\r\n+\t\t\tswitch (appointment.status) {\r\n+\t\t\t\tcase 'scheduled':\r\n+\t\t\t\t\tacc.scheduledCount++;\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t\tcase 'pending':\r\n+\t\t\t\t\tacc.pendingCount++;\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t\tcase 'cancelled':\r\n+\t\t\t\t\tacc.cancelledCount++;\r\n+\t\t\t\t\tbreak;\r\n+\t\t\t}\r\n+\t\t\treturn acc;\r\n+\t\t}, initialCounts);\r\n+\t\tconst data = {\r\n+\t\t\ttotalCount: appointments.length,\r\n+\t\t\t...counts,\r\n+\t\t\tappointments,\r\n+\t\t};\r\n+\t\treturn { success: true, data };\r\n+\t} catch (error) {\r\n+\t\tconsole.log(error);\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+};\r\n+\r\n+export const updateAppointment = async ({\r\n+\tappointmentId,\r\n+\tappointment,\r\n+\ttype,\r\n+}: UpdateAppointmentParams) => {\r\n+\ttry {\r\n+\t\tconst updatedAppointment = await db.appointment.update({\r\n+\t\t\twhere: { id: appointmentId },\r\n+\t\t\tdata: appointment,\r\n+\t\t});\r\n+\r\n+\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n+\r\n+\t\t// const smsMessage = `Greetings from CarePulse. ${\r\n+\t\t// \ttype === 'schedule'\r\n+\t\t// \t\t? `Your appointment is confirmed for ${\r\n+\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t// \t\t  } with Dr. ${appointment.primaryPhysician}`\r\n+\t\t// \t\t: `We regret to inform that your appointment for ${\r\n+\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n+\t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n+\t\t// }.`;\r\n+\t\t//await sendSMSNotification(userId, smsMessage);\r\n+\t\tconsole.log(updatedAppointment)\r\n+\t\trevalidatePath('/admin');\r\n+\t\treturn parseStringify(updatedAppointment);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1724400104483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,8 +103,10 @@\n \tappointmentId,\r\n \tappointment,\r\n \ttype,\r\n }: UpdateAppointmentParams) => {\r\n+\tconsole.log(type)\r\n+\tconsole.log(appointment)\r\n \ttry {\r\n \t\tconst updatedAppointment = await db.appointment.update({\r\n \t\t\twhere: { id: appointmentId },\r\n \t\t\tdata: appointment,\r\n@@ -128,403 +130,4 @@\n \t} catch (error) {\r\n \t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n \t}\r\n };\r\n-'use server';\r\n-\r\n-import {\r\n-\tDATABASE_ID,\r\n-\tdatabases,\r\n-\tAPPOINTMENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-import { revalidatePath } from 'next/cache';\r\n-import { CreateAppointmentSchema } from '../validation';\r\n-import { db } from '../db';\r\n-import { AuthError } from 'next-auth';\r\n-\r\n-export const createAppointment = async (\r\n-\tappointmentData: CreateAppointmentParams\r\n-) => {\r\n-\ttry {\r\n-\t\tconst { data, success } =\r\n-\t\t\tCreateAppointmentSchema.safeParse(appointmentData);\r\n-\r\n-\t\tif (!success) {\r\n-\t\t\treturn {\r\n-\t\t\t\terror: 'Invalid data',\r\n-\t\t\t};\r\n-\t\t}\r\n-\t\tconst { id } = await db.appointment.create({\r\n-\t\t\tdata: {\r\n-\t\t\t\t...data,\r\n-\t\t\t\tuserId: appointmentData.userId,\r\n-\t\t\t\tpatientId: appointmentData.patient,\r\n-\t\t\t\tstatus: appointmentData.status,\r\n-\t\t\t},\r\n-\t\t});\r\n-\t\treturn { success: true, createdId: id };\r\n-\t} catch (error) {\r\n-\t\tif (error instanceof AuthError) {\r\n-\t\t\treturn { error: error.cause?.err?.message };\r\n-\t\t}\r\n-\t\treturn { error: 'error 500' };\r\n-\t}\r\n-};\r\n-\r\n-export const getAppointment = async (appointmentId: string) => {\r\n-\ttry {\r\n-\t\tconst appointment = await databases.getDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tappointmentId\r\n-\t\t);\r\n-\t\tconsole.log(appointment);\r\n-\r\n-\t\treturn parseStringify(appointment);\r\n-\t} catch (error) {\r\n-\t\tconsole.error(\r\n-\t\t\t'An error occurred while retrieving the existing patient:',\r\n-\t\t\terror\r\n-\t\t);\r\n-\t}\r\n-};\r\n-\r\n-export const getRecentAppointmentList = async () => {\r\n-\ttry {\r\n-\t\tconst appointments = await db.appointment.findMany({\r\n-\t\t\tinclude: {\r\n-\t\t\t\tpatient: true, // All posts where authorId == 20\r\n-\t\t\t},\r\n-\t\t});\r\n-\t\tconst initialCounts = {\r\n-\t\t\tscheduledCount: 0,\r\n-\t\t\tpendingCount: 0,\r\n-\t\t\tcancelledCount: 0,\r\n-\t\t};\r\n-\t\tconst counts = appointments.reduce((acc, appointment) => {\r\n-\t\t\tswitch (appointment.status) {\r\n-\t\t\t\tcase 'scheduled':\r\n-\t\t\t\t\tacc.scheduledCount++;\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t\tcase 'pending':\r\n-\t\t\t\t\tacc.pendingCount++;\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t\tcase 'cancelled':\r\n-\t\t\t\t\tacc.cancelledCount++;\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t}\r\n-\t\t\treturn acc;\r\n-\t\t}, initialCounts);\r\n-\t\tconst data = {\r\n-\t\t\ttotalCount: appointments.length,\r\n-\t\t\t...counts,\r\n-\t\t\tappointments,\r\n-\t\t};\r\n-\t\treturn { success: true, data };\r\n-\t} catch (error) {\r\n-\t\tconsole.log(error);\r\n-\t\tif (error instanceof AuthError) {\r\n-\t\t\treturn { error: error.cause?.err?.message };\r\n-\t\t}\r\n-\t\treturn { error: 'error 500' };\r\n-\t}\r\n-};\r\n-\r\n-export const updateAppointment = async ({\r\n-\tappointmentId,\r\n-\tappointment,\r\n-\ttype,\r\n-}: UpdateAppointmentParams) => {\r\n-\ttry {\r\n-\t\tconst updatedAppointment = await db.appointment.update({\r\n-\t\t\twhere: { id: appointmentId },\r\n-\t\t\tdata: appointment,\r\n-\t\t});\r\n-\r\n-\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n-\r\n-\t\t// const smsMessage = `Greetings from CarePulse. ${\r\n-\t\t// \ttype === 'schedule'\r\n-\t\t// \t\t? `Your appointment is confirmed for ${\r\n-\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n-\t\t// \t\t  } with Dr. ${appointment.primaryPhysician}`\r\n-\t\t// \t\t: `We regret to inform that your appointment for ${\r\n-\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n-\t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n-\t\t// }.`;\r\n-\t\t//await sendSMSNotification(userId, smsMessage);\r\n-\r\n-\t\trevalidatePath('/admin');\r\n-\t\treturn parseStringify(updatedAppointment);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n-\t}\r\n-};\r\n-'use server';\r\n-\r\n-import {\r\n-\tDATABASE_ID,\r\n-\tdatabases,\r\n-\tAPPOINTMENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-import { revalidatePath } from 'next/cache';\r\n-import { CreateAppointmentSchema } from '../validation';\r\n-import { db } from '../db';\r\n-import { AuthError } from 'next-auth';\r\n-\r\n-export const createAppointment = async (\r\n-\tappointmentData: CreateAppointmentParams\r\n-) => {\r\n-\ttry {\r\n-\t\tconst { data, success } =\r\n-\t\t\tCreateAppointmentSchema.safeParse(appointmentData);\r\n-\r\n-\t\tif (!success) {\r\n-\t\t\treturn {\r\n-\t\t\t\terror: 'Invalid data',\r\n-\t\t\t};\r\n-\t\t}\r\n-\t\tconst { id } = await db.appointment.create({\r\n-\t\t\tdata: {\r\n-\t\t\t\t...data,\r\n-\t\t\t\tuserId: appointmentData.userId,\r\n-\t\t\t\tpatientId: appointmentData.patient,\r\n-\t\t\t\tstatus: appointmentData.status,\r\n-\t\t\t},\r\n-\t\t});\r\n-\t\treturn { success: true, createdId: id };\r\n-\t} catch (error) {\r\n-\t\tif (error instanceof AuthError) {\r\n-\t\t\treturn { error: error.cause?.err?.message };\r\n-\t\t}\r\n-\t\treturn { error: 'error 500' };\r\n-\t}\r\n-};\r\n-\r\n-export const getAppointment = async (appointmentId: string) => {\r\n-\r\n-\ttry {\r\n-\t\tconst appointment = await databases.getDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tappointmentId\r\n-\t\t);\r\n-\t\tconsole.log(appointment);\r\n-\r\n-\t\treturn parseStringify(appointment);\r\n-\t} catch (error) {\r\n-\t\tconsole.error(\r\n-\t\t\t'An error occurred while retrieving the existing patient:',\r\n-\t\t\terror\r\n-\t\t);\r\n-\t}\r\n-};\r\n-\r\n-export const getRecentAppointmentList = async () => {\r\n-\ttry {\r\n-\t\tconst appointments = await db.appointment.findMany({\r\n-\t\t\tinclude: {\r\n-\t\t\t\tpatient: true, // All posts where authorId == 20\r\n-\t\t\t  },\r\n-\t\t});\r\n-\t\tconst initialCounts = {\r\n-\t\t\tscheduledCount: 0,\r\n-\t\t\tpendingCount: 0,\r\n-\t\t\tcancelledCount: 0,\r\n-\t\t};\r\n-\t\tconst counts = appointments.reduce((acc, appointment) => {\r\n-\t\t\tswitch (appointment.status) {\r\n-\t\t\t\tcase 'scheduled':\r\n-\t\t\t\t\tacc.scheduledCount++;\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t\tcase 'pending':\r\n-\t\t\t\t\tacc.pendingCount++;\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t\tcase 'cancelled':\r\n-\t\t\t\t\tacc.cancelledCount++;\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t}\r\n-\t\t\treturn acc;\r\n-\t\t}, initialCounts);\r\n-\t\tconst data = {\r\n-\t\t\ttotalCount: appointments.length,\r\n-\t\t\t...counts,\r\n-\t\t\tappointments,\r\n-\t\t};\r\n-\t\treturn { success: true, data };\r\n-\t} catch (error) {\r\n-\t\tconsole.log(error);\r\n-\t\tif (error instanceof AuthError) {\r\n-\t\t\treturn { error: error.cause?.err?.message };\r\n-\t\t}\r\n-\t\treturn { error: 'error 500' };\r\n-\t}\r\n-};\r\n-\r\n-export const updateAppointment = async ({\r\n-\tappointmentId,\r\n-\tappointment,\r\n-\ttype,\r\n-}: UpdateAppointmentParams) => {\r\n-\ttry {\r\n-\t\tconst updatedAppointment = await databases.updateDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tappointmentId,\r\n-\t\t\tappointment\r\n-\t\t);\r\n-\r\n-\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n-\r\n-\t\t// const smsMessage = `Greetings from CarePulse. ${\r\n-\t\t// \ttype === 'schedule'\r\n-\t\t// \t\t? `Your appointment is confirmed for ${\r\n-\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n-\t\t// \t\t  } with Dr. ${appointment.primaryPhysician}`\r\n-\t\t// \t\t: `We regret to inform that your appointment for ${\r\n-\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n-\t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n-\t\t// }.`;\r\n-\t\t//await sendSMSNotification(userId, smsMessage);\r\n-\r\n-\t\trevalidatePath('/admin');\r\n-\t\treturn parseStringify(updatedAppointment);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n-\t}\r\n-};\r\n-'use server';\r\n-\r\n-import {\r\n-\tDATABASE_ID,\r\n-\tdatabases,\r\n-\tAPPOINTMENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-import { revalidatePath } from 'next/cache';\r\n-import { CreateAppointmentSchema } from '../validation';\r\n-import { db } from '../db';\r\n-import { AuthError } from 'next-auth';\r\n-\r\n-export const createAppointment = async (\r\n-\tappointmentData: CreateAppointmentParams\r\n-) => {\r\n-\ttry {\r\n-\t\tconst { data, success } =\r\n-\t\t\tCreateAppointmentSchema.safeParse(appointmentData);\r\n-\r\n-\t\tif (!success) {\r\n-\t\t\treturn {\r\n-\t\t\t\terror: 'Invalid data',\r\n-\t\t\t};\r\n-\t\t}\r\n-\t\tconst { id } = await db.appointment.create({\r\n-\t\t\tdata: {\r\n-\t\t\t\t...data,\r\n-\t\t\t\tuserId: appointmentData.userId,\r\n-\t\t\t\tpatientId: appointmentData.patient,\r\n-\t\t\t\tstatus: appointmentData.status,\r\n-\t\t\t},\r\n-\t\t});\r\n-\t\treturn { success: true, createdId: id };\r\n-\t} catch (error) {\r\n-\t\tif (error instanceof AuthError) {\r\n-\t\t\treturn { error: error.cause?.err?.message };\r\n-\t\t}\r\n-\t\treturn { error: 'error 500' };\r\n-\t}\r\n-};\r\n-\r\n-export const getAppointment = async (appointmentId: string) => {\r\n-\tconsole.log(appointmentId);\r\n-\ttry {\r\n-\t\tconst appointment = await databases.getDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tappointmentId\r\n-\t\t);\r\n-\t\tconsole.log(appointment);\r\n-\r\n-\t\treturn parseStringify(appointment);\r\n-\t} catch (error) {\r\n-\t\tconsole.error(\r\n-\t\t\t'An error occurred while retrieving the existing patient:',\r\n-\t\t\terror\r\n-\t\t);\r\n-\t}\r\n-};\r\n-\r\n-export const getRecentAppointmentList = async () => {\r\n-\ttry {\r\n-\t\tconst appointments = await db.appointment.findMany({\r\n-\t\t\tinclude: {\r\n-\t\t\t\tpatient: true, // All posts where authorId == 20\r\n-\t\t\t  },\r\n-\t\t});\r\n-\t\tconst initialCounts = {\r\n-\t\t\tscheduledCount: 0,\r\n-\t\t\tpendingCount: 0,\r\n-\t\t\tcancelledCount: 0,\r\n-\t\t};\r\n-\t\tconst counts = appointments.reduce((acc, appointment) => {\r\n-\t\t\tswitch (appointment.status) {\r\n-\t\t\t\tcase 'scheduled':\r\n-\t\t\t\t\tacc.scheduledCount++;\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t\tcase 'pending':\r\n-\t\t\t\t\tacc.pendingCount++;\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t\tcase 'cancelled':\r\n-\t\t\t\t\tacc.cancelledCount++;\r\n-\t\t\t\t\tbreak;\r\n-\t\t\t}\r\n-\t\t\treturn acc;\r\n-\t\t}, initialCounts);\r\n-\t\tconst data = {\r\n-\t\t\ttotalCount: appointments.length,\r\n-\t\t\t...counts,\r\n-\t\t\tappointments,\r\n-\t\t};\r\n-\t\treturn { success: true, data };\r\n-\t} catch (error) {\r\n-\t\tconsole.log(error);\r\n-\t\tif (error instanceof AuthError) {\r\n-\t\t\treturn { error: error.cause?.err?.message };\r\n-\t\t}\r\n-\t\treturn { error: 'error 500' };\r\n-\t}\r\n-};\r\n-\r\n-export const updateAppointment = async ({\r\n-\tappointmentId,\r\n-\tappointment,\r\n-\ttype,\r\n-}: UpdateAppointmentParams) => {\r\n-\ttry {\r\n-\t\tconst updatedAppointment = await databases.updateDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tappointmentId,\r\n-\t\t\tappointment\r\n-\t\t);\r\n-\r\n-\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n-\r\n-\t\t// const smsMessage = `Greetings from CarePulse. ${\r\n-\t\t// \ttype === 'schedule'\r\n-\t\t// \t\t? `Your appointment is confirmed for ${\r\n-\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n-\t\t// \t\t  } with Dr. ${appointment.primaryPhysician}`\r\n-\t\t// \t\t: `We regret to inform that your appointment for ${\r\n-\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n-\t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n-\t\t// }.`;\r\n-\t\t//await sendSMSNotification(userId, smsMessage);\r\n-\r\n-\t\trevalidatePath('/admin');\r\n-\t\treturn parseStringify(updatedAppointment);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n-\t}\r\n-};\r\n"
                },
                {
                    "date": 1724400627405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,14 +106,14 @@\n }: UpdateAppointmentParams) => {\r\n \tconsole.log(type)\r\n \tconsole.log(appointment)\r\n \ttry {\r\n-\t\tconst updatedAppointment = await db.appointment.update({\r\n-\t\t\twhere: { id: appointmentId },\r\n-\t\t\tdata: appointment,\r\n-\t\t});\r\n+\t\t// const updatedAppointment = await db.appointment.update({\r\n+\t\t// \twhere: { id: appointmentId },\r\n+\t\t// \tdata: appointment,\r\n+\t\t// });\r\n \r\n-\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n+\t\t// if (!updatedAppointment) throw new Error('Appointment not found');\r\n \r\n \t\t// const smsMessage = `Greetings from CarePulse. ${\r\n \t\t// \ttype === 'schedule'\r\n \t\t// \t\t? `Your appointment is confirmed for ${\r\n"
                },
                {
                    "date": 1724400771928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,8 +105,9 @@\n \ttype,\r\n }: UpdateAppointmentParams) => {\r\n \tconsole.log(type)\r\n \tconsole.log(appointment)\r\n+\tconsole.log(appointmentId)\r\n \ttry {\r\n \t\t// const updatedAppointment = await db.appointment.update({\r\n \t\t// \twhere: { id: appointmentId },\r\n \t\t// \tdata: appointment,\r\n"
                },
                {
                    "date": 1724401853609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,14 +107,14 @@\n \tconsole.log(type)\r\n \tconsole.log(appointment)\r\n \tconsole.log(appointmentId)\r\n \ttry {\r\n-\t\t// const updatedAppointment = await db.appointment.update({\r\n-\t\t// \twhere: { id: appointmentId },\r\n-\t\t// \tdata: appointment,\r\n-\t\t// });\r\n+\t\tconst updatedAppointment = await db.appointment.update({\r\n+\t\t\twhere: { id: appointmentId },\r\n+\t\t\tdata: appointment,\r\n+\t\t});\r\n \r\n-\t\t// if (!updatedAppointment) throw new Error('Appointment not found');\r\n+\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n \r\n \t\t// const smsMessage = `Greetings from CarePulse. ${\r\n \t\t// \ttype === 'schedule'\r\n \t\t// \t\t? `Your appointment is confirmed for ${\r\n@@ -124,11 +124,11 @@\n \t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n \t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n \t\t// }.`;\r\n \t\t//await sendSMSNotification(userId, smsMessage);\r\n-\t\tconsole.log(updatedAppointment)\r\n+\t\t// console.log(updatedAppointment)\r\n \t\trevalidatePath('/admin');\r\n-\t\treturn parseStringify(updatedAppointment);\r\n+\t\treturn updatedAppointment;\r\n \t} catch (error) {\r\n \t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n \t}\r\n };\r\n"
                },
                {
                    "date": 1724476292406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,23 +39,27 @@\n \t\treturn { error: 'error 500' };\r\n \t}\r\n };\r\n \r\n-export const getAppointment = async (appointmentId: string) => {\r\n+export const getAppointment = async (id: string) => {\r\n \ttry {\r\n-\t\tconst appointment = await databases.getDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n-\t\t\tappointmentId\r\n-\t\t);\r\n-\t\tconsole.log(appointment);\r\n-\r\n-\t\treturn parseStringify(appointment);\r\n-\t} catch (error) {\r\n-\t\tconsole.error(\r\n-\t\t\t'An error occurred while retrieving the existing patient:',\r\n-\t\t\terror\r\n-\t\t);\r\n+\t\tconst patient = await db.appointment.findFirst({\r\n+\t\t\twhere: {\r\n+\t\t\t\tuserId: id,\r\n+\t\t\t},\r\n+\t\t\tselect: {\r\n+\t\t\t\tid: true,\r\n+\t\t\t},\r\n+\t\t});\r\n+\t\tif (!patient) return { error: 'Patient not found' };\r\n+\t\treturn {\r\n+\t\t\tsuccess: true,\r\n+\t\t\tdata: {\r\n+\t\t\t\t...patient,\r\n+\t\t\t},\r\n+\t\t};\r\n+\t} catch (error: any) {\r\n+\t\treturn { error: 'error 500' };\r\n \t}\r\n };\r\n \r\n export const getRecentAppointmentList = async () => {\r\n"
                },
                {
                    "date": 1724476339239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n export const getAppointment = async (id: string) => {\r\n \ttry {\r\n \t\tconst patient = await db.appointment.findFirst({\r\n \t\t\twhere: {\r\n-\t\t\t\tuserId: id,\r\n+\t\t\t\tid: id,\r\n \t\t\t},\r\n \t\t\tselect: {\r\n \t\t\t\tid: true,\r\n \t\t\t},\r\n@@ -107,11 +107,8 @@\n \tappointmentId,\r\n \tappointment,\r\n \ttype,\r\n }: UpdateAppointmentParams) => {\r\n-\tconsole.log(type)\r\n-\tconsole.log(appointment)\r\n-\tconsole.log(appointmentId)\r\n \ttry {\r\n \t\tconst updatedAppointment = await db.appointment.update({\r\n \t\t\twhere: { id: appointmentId },\r\n \t\t\tdata: appointment,\r\n"
                },
                {
                    "date": 1724476487513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,6 @@\n 'use server';\r\n \r\n-import {\r\n-\tDATABASE_ID,\r\n-\tdatabases,\r\n-\tAPPOINTMENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n import { revalidatePath } from 'next/cache';\r\n import { CreateAppointmentSchema } from '../validation';\r\n import { db } from '../db';\r\n import { AuthError } from 'next-auth';\r\n@@ -47,8 +41,10 @@\n \t\t\t\tid: id,\r\n \t\t\t},\r\n \t\t\tselect: {\r\n \t\t\t\tid: true,\r\n+\t\t\t\tspecialty: true,\r\n+\t\t\t\tschedule: true,\r\n \t\t\t},\r\n \t\t});\r\n \t\tif (!patient) return { error: 'Patient not found' };\r\n \t\treturn {\r\n"
                },
                {
                    "date": 1724480257399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,8 @@\n \r\n export const updateAppointment = async ({\r\n \tappointmentId,\r\n \tappointment,\r\n-\ttype,\r\n }: UpdateAppointmentParams) => {\r\n \ttry {\r\n \t\tconst updatedAppointment = await db.appointment.update({\r\n \t\t\twhere: { id: appointmentId },\r\n"
                },
                {
                    "date": 1724489187630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,8 +102,9 @@\n export const updateAppointment = async ({\r\n \tappointmentId,\r\n \tappointment,\r\n }: UpdateAppointmentParams) => {\r\n+\tconsole.log('se loqueo la tabla')\r\n \ttry {\r\n \t\tconst updatedAppointment = await db.appointment.update({\r\n \t\t\twhere: { id: appointmentId },\r\n \t\t\tdata: appointment,\r\n"
                },
                {
                    "date": 1724490134100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,13 @@\n \r\n export const getRecentAppointmentList = async () => {\r\n \ttry {\r\n \t\tconst appointments = await db.appointment.findMany({\r\n+\t\t\torderBy: [\r\n+\t\t\t\t{\r\n+\t\t\t\t\tschedule: 'desc',\r\n+\t\t\t\t},\r\n+\t\t\t],\r\n \t\t\tinclude: {\r\n \t\t\t\tpatient: true, // All posts where authorId == 20\r\n \t\t\t},\r\n \t\t});\r\n@@ -102,14 +107,15 @@\n export const updateAppointment = async ({\r\n \tappointmentId,\r\n \tappointment,\r\n }: UpdateAppointmentParams) => {\r\n-\tconsole.log('se loqueo la tabla')\r\n+\tconsole.log('se loqueo la tabla');\r\n \ttry {\r\n \t\tconst updatedAppointment = await db.appointment.update({\r\n \t\t\twhere: { id: appointmentId },\r\n \t\t\tdata: appointment,\r\n \t\t});\r\n+\t\tconsole.log(updatedAppointment);\r\n \r\n \t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n \r\n \t\t// const smsMessage = `Greetings from CarePulse. ${\r\n"
                }
            ],
            "date": 1724111190276,
            "name": "Commit-0",
            "content": "'use server';\r\n\r\nimport { ID, Query } from 'node-appwrite';\r\nimport {\r\n\tDATABASE_ID,\r\n\tdatabases,\r\n\tAPPOINTMENT_COLLECTION_ID,\r\n} from '../appwite.config';\r\nimport { formatDateTime, parseStringify } from '../utils';\r\nimport { revalidatePath } from 'next/cache';\r\nimport { CreateAppointmentSchema } from '../validation';\r\nimport { db } from '../db';\r\nimport { AuthError } from 'next-auth';\r\n\r\nexport const createAppointment = async (\r\n\tappointmentData: CreateAppointmentParams\r\n) => {\r\n\ttry {\r\n\t\tconst { data, success } = CreateAppointmentSchema.safeParse(appointmentData);\r\n\t\tconsole.log(data);\r\n\t\tif (!success) {\r\n\t\t\treturn {\r\n\t\t\t\terror: 'Invalid data',\r\n\t\t\t};\r\n\t\t}\r\n\t\tconst { id } = await db.patients.create({\r\n\t\t\tdata,\r\n\t\t});\r\n\t\treturn { success: true, createdId: id };\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t\tif (error instanceof AuthError) {\r\n\t\t\treturn { error: error.cause?.err?.message };\r\n\t\t}\r\n\t\treturn { error: 'error 500' };\r\n\t}\r\n};\r\n\r\nexport const getAppointment = async (appointmentId: string) => {\r\n\tconsole.log(appointmentId);\r\n\ttry {\r\n\t\tconst appointment = await databases.getDocument(\r\n\t\t\tDATABASE_ID!,\r\n\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n\t\t\tappointmentId\r\n\t\t);\r\n\t\tconsole.log(appointment);\r\n\r\n\t\treturn parseStringify(appointment);\r\n\t} catch (error) {\r\n\t\tconsole.error(\r\n\t\t\t'An error occurred while retrieving the existing patient:',\r\n\t\t\terror\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport const getRecentAppointmentList = async () => {\r\n\ttry {\r\n\t\tconst appointments = await databases.listDocuments(\r\n\t\t\tDATABASE_ID!,\r\n\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n\t\t\t[Query.orderDesc('$createdAt')]\r\n\t\t);\r\n\r\n\t\tconst initialCounts = {\r\n\t\t\tscheduledCount: 0,\r\n\t\t\tpendingCount: 0,\r\n\t\t\tcancelledCount: 0,\r\n\t\t};\r\n\r\n\t\tconst counts = (appointments.documents as Appointment[]).reduce(\r\n\t\t\t(acc, appointment) => {\r\n\t\t\t\tswitch (appointment.status) {\r\n\t\t\t\t\tcase 'scheduled':\r\n\t\t\t\t\t\tacc.scheduledCount++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'pending':\r\n\t\t\t\t\t\tacc.pendingCount++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'cancelled':\r\n\t\t\t\t\t\tacc.cancelledCount++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\treturn acc;\r\n\t\t\t},\r\n\t\t\tinitialCounts\r\n\t\t);\r\n\r\n\t\tconst data = {\r\n\t\t\ttotalCount: appointments.total,\r\n\t\t\t...counts,\r\n\t\t\tdocuments: appointments.documents,\r\n\t\t};\r\n\r\n\t\treturn parseStringify(data);\r\n\t} catch (error) {\r\n\t\tconsole.error(\r\n\t\t\t'An error occurred while retrieving the recent appointments:',\r\n\t\t\terror\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport const updateAppointment = async ({\r\n\tappointmentId,\r\n\tappointment,\r\n\ttype,\r\n}: UpdateAppointmentParams) => {\r\n\ttry {\r\n\t\tconst updatedAppointment = await databases.updateDocument(\r\n\t\t\tDATABASE_ID!,\r\n\t\t\tAPPOINTMENT_COLLECTION_ID!,\r\n\t\t\tappointmentId,\r\n\t\t\tappointment\r\n\t\t);\r\n\r\n\t\tif (!updatedAppointment) throw new Error('Appointment not found');\r\n\r\n\t\t// const smsMessage = `Greetings from CarePulse. ${\r\n\t\t// \ttype === 'schedule'\r\n\t\t// \t\t? `Your appointment is confirmed for ${\r\n\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n\t\t// \t\t  } with Dr. ${appointment.primaryPhysician}`\r\n\t\t// \t\t: `We regret to inform that your appointment for ${\r\n\t\t// \t\t\t\tformatDateTime(appointment.schedule!, timeZone).dateTime\r\n\t\t// \t\t  } is cancelled. Reason:  ${appointment.cancellationReason}`\r\n\t\t// }.`;\r\n\t\t//await sendSMSNotification(userId, smsMessage);\r\n\r\n\t\trevalidatePath('/admin');\r\n\t\treturn parseStringify(updatedAppointment);\r\n\t} catch (error) {\r\n\t\tconsole.error('An error occurred while scheduling an appointment:', error);\r\n\t}\r\n};\r\n"
        }
    ]
}