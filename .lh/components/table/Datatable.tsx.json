{
    "sourceFile": "components/table/Datatable.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1722291631103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722293296363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,132 +1,132 @@\n-\"use client\";\r\n+'use client';\r\n \r\n import {\r\n-  getPaginationRowModel,\r\n-  ColumnDef,\r\n-  flexRender,\r\n-  getCoreRowModel,\r\n-  useReactTable,\r\n-} from \"@tanstack/react-table\";\r\n-import Image from \"next/image\";\r\n-import { redirect } from \"next/navigation\";\r\n-import { useEffect } from \"react\";\r\n+\tgetPaginationRowModel,\r\n+\tColumnDef,\r\n+\tflexRender,\r\n+\tgetCoreRowModel,\r\n+\tuseReactTable,\r\n+} from '@tanstack/react-table';\r\n+import Image from 'next/image';\r\n+import { redirect } from 'next/navigation';\r\n+import { useEffect } from 'react';\r\n \r\n-import { Button } from \"@/components/ui/button\";\r\n+import { Button } from '@/components/ui/button';\r\n import {\r\n-  Table,\r\n-  TableBody,\r\n-  TableCell,\r\n-  TableHead,\r\n-  TableHeader,\r\n-  TableRow,\r\n-} from \"@/components/ui/table\";\r\n-import { decryptKey } from \"@/lib/utils\";\r\n+\tTable,\r\n+\tTableBody,\r\n+\tTableCell,\r\n+\tTableHead,\r\n+\tTableHeader,\r\n+\tTableRow,\r\n+} from '@/components/ui/table';\r\n+import { decryptKey } from '@/lib/utils';\r\n \r\n interface DataTableProps<TData, TValue> {\r\n-  columns: ColumnDef<TData, TValue>[];\r\n-  data: TData[];\r\n+\tcolumns: ColumnDef<TData, TValue>[];\r\n+\tdata: TData[];\r\n }\r\n \r\n export function DataTable<TData, TValue>({\r\n-  columns,\r\n-  data,\r\n+\tcolumns,\r\n+\tdata,\r\n }: DataTableProps<TData, TValue>) {\r\n-  const encryptedKey =\r\n-    typeof window !== \"undefined\"\r\n-      ? window.localStorage.getItem(\"accessKey\")\r\n-      : null;\r\n+\tconst encryptedKey =\r\n+\t\ttypeof window !== 'undefined'\r\n+\t\t\t? window.localStorage.getItem('accessKey')\r\n+\t\t\t: null;\r\n \r\n-  useEffect(() => {\r\n-    const accessKey = encryptedKey && decryptKey(encryptedKey);\r\n+\tuseEffect(() => {\r\n+\t\tconst accessKey = encryptedKey && decryptKey(encryptedKey);\r\n \r\n-    if (accessKey !== process.env.NEXT_PUBLIC_ADMIN_PASSKEY!.toString()) {\r\n-      redirect(\"/\");\r\n-    }\r\n-  }, [encryptedKey]);\r\n+\t\tif (accessKey !== process.env.NEXT_PUBLIC_ADMIN_PASSKEY!.toString()) {\r\n+\t\t\tredirect('/');\r\n+\t\t}\r\n+\t}, [encryptedKey]);\r\n \r\n-  const table = useReactTable({\r\n-    data,\r\n-    columns,\r\n-    getCoreRowModel: getCoreRowModel(),\r\n-    getPaginationRowModel: getPaginationRowModel(),\r\n-  });\r\n+\tconst table = useReactTable({\r\n+\t\tdata,\r\n+\t\tcolumns,\r\n+\t\tgetCoreRowModel: getCoreRowModel(),\r\n+\t\tgetPaginationRowModel: getPaginationRowModel(),\r\n+\t});\r\n \r\n-  return (\r\n-    <div className=\"data-table\">\r\n-      <Table className=\"shad-table\">\r\n-        <TableHeader className=\" bg-dark-200\">\r\n-          {table.getHeaderGroups().map((headerGroup) => (\r\n-            <TableRow key={headerGroup.id} className=\"shad-table-row-header\">\r\n-              {headerGroup.headers.map((header) => {\r\n-                return (\r\n-                  <TableHead key={header.id}>\r\n-                    {header.isPlaceholder\r\n-                      ? null\r\n-                      : flexRender(\r\n-                          header.column.columnDef.header,\r\n-                          header.getContext()\r\n-                        )}\r\n-                  </TableHead>\r\n-                );\r\n-              })}\r\n-            </TableRow>\r\n-          ))}\r\n-        </TableHeader>\r\n-        <TableBody>\r\n-          {table.getRowModel().rows?.length ? (\r\n-            table.getRowModel().rows.map((row) => (\r\n-              <TableRow\r\n-                key={row.id}\r\n-                data-state={row.getIsSelected() && \"selected\"}\r\n-                className=\"shad-table-row\"\r\n-              >\r\n-                {row.getVisibleCells().map((cell) => (\r\n-                  <TableCell key={cell.id}>\r\n-                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n-                  </TableCell>\r\n-                ))}\r\n-              </TableRow>\r\n-            ))\r\n-          ) : (\r\n-            <TableRow>\r\n-              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\r\n-                No results.\r\n\\ No newline at end of file\n-              </TableCell>\r\n-            </TableRow>\r\n-          )}\r\n-        </TableBody>\r\n-      </Table>\r\n-      <div className=\"table-actions\">\r\n-        <Button\r\n-          variant=\"outline\"\r\n-          size=\"sm\"\r\n-          onClick={() => table.previousPage()}\r\n-          disabled={!table.getCanPreviousPage()}\r\n-          className=\"shad-gray-btn\"\r\n-        >\r\n-          <Image\r\n-            src=\"/assets/icons/arrow.svg\"\r\n-            width={24}\r\n-            height={24}\r\n-            alt=\"arrow\"\r\n-          />\r\n-        </Button>\r\n-        <Button\r\n-          variant=\"outline\"\r\n-          size=\"sm\"\r\n-          onClick={() => table.nextPage()}\r\n-          disabled={!table.getCanNextPage()}\r\n-          className=\"shad-gray-btn\"\r\n-        >\r\n-          <Image\r\n-            src=\"/assets/icons/arrow.svg\"\r\n-            width={24}\r\n-            height={24}\r\n-            alt=\"arrow \"\r\n-            className=\"rotate-180\"\r\n-          />\r\n-        </Button>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-}\n+\treturn (\r\n+\t\t<div className=\"data-table\">\r\n+\t\t\t<Table className=\"shad-table\">\r\n+\t\t\t\t<TableHeader className=\" bg-dark-200\">\r\n+\t\t\t\t\t{table.getHeaderGroups().map((headerGroup) => (\r\n+\t\t\t\t\t\t<TableRow key={headerGroup.id} className=\"shad-table-row-header\">\r\n+\t\t\t\t\t\t\t{headerGroup.headers.map((header) => {\r\n+\t\t\t\t\t\t\t\treturn (\r\n+\t\t\t\t\t\t\t\t\t<TableHead key={header.id}>\r\n+\t\t\t\t\t\t\t\t\t\t{header.isPlaceholder\r\n+\t\t\t\t\t\t\t\t\t\t\t? null\r\n+\t\t\t\t\t\t\t\t\t\t\t: flexRender(\r\n+\t\t\t\t\t\t\t\t\t\t\t\t\theader.column.columnDef.header,\r\n+\t\t\t\t\t\t\t\t\t\t\t\t\theader.getContext()\r\n+\t\t\t\t\t\t\t\t\t\t\t  )}\r\n+\t\t\t\t\t\t\t\t\t</TableHead>\r\n+\t\t\t\t\t\t\t\t);\r\n+\t\t\t\t\t\t\t})}\r\n+\t\t\t\t\t\t</TableRow>\r\n+\t\t\t\t\t))}\r\n+\t\t\t\t</TableHeader>\r\n+\t\t\t\t<TableBody>\r\n+\t\t\t\t\t{table.getRowModel().rows?.length ? (\r\n+\t\t\t\t\t\ttable.getRowModel().rows.map((row) => (\r\n+\t\t\t\t\t\t\t<TableRow\r\n+\t\t\t\t\t\t\t\tkey={row.id}\r\n+\t\t\t\t\t\t\t\tdata-state={row.getIsSelected() && 'selected'}\r\n+\t\t\t\t\t\t\t\tclassName=\"shad-table-row\"\r\n+\t\t\t\t\t\t\t>\r\n+\t\t\t\t\t\t\t\t{row.getVisibleCells().map((cell) => (\r\n+\t\t\t\t\t\t\t\t\t<TableCell key={cell.id}>\r\n+\t\t\t\t\t\t\t\t\t\t{flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n+\t\t\t\t\t\t\t\t\t</TableCell>\r\n+\t\t\t\t\t\t\t\t))}\r\n+\t\t\t\t\t\t\t</TableRow>\r\n+\t\t\t\t\t\t))\r\n+\t\t\t\t\t) : (\r\n+\t\t\t\t\t\t<TableRow>\r\n+\t\t\t\t\t\t\t<TableCell colSpan={columns.length} className=\"h-24 text-center\">\r\n+\t\t\t\t\t\t\t\tNo results.\r\n+\t\t\t\t\t\t\t</TableCell>\r\n+\t\t\t\t\t\t</TableRow>\r\n+\t\t\t\t\t)}\r\n+\t\t\t\t</TableBody>\r\n+\t\t\t</Table>\r\n+\t\t\t<div className=\"table-actions\">\r\n+\t\t\t\t<Button\r\n+\t\t\t\t\tvariant=\"outline\"\r\n+\t\t\t\t\tsize=\"sm\"\r\n+\t\t\t\t\tonClick={() => table.previousPage()}\r\n+\t\t\t\t\tdisabled={!table.getCanPreviousPage()}\r\n+\t\t\t\t\tclassName=\"shad-gray-btn\"\r\n+\t\t\t\t>\r\n+\t\t\t\t\t<Image\r\n+\t\t\t\t\t\tsrc=\"/assets/icons/arrow.svg\"\r\n+\t\t\t\t\t\twidth={24}\r\n+\t\t\t\t\t\theight={24}\r\n+\t\t\t\t\t\talt=\"arrow\"\r\n+\t\t\t\t\t/>\r\n+\t\t\t\t</Button>\r\n+\t\t\t\t<Button\r\n+\t\t\t\t\tvariant=\"outline\"\r\n+\t\t\t\t\tsize=\"sm\"\r\n+\t\t\t\t\tonClick={() => table.nextPage()}\r\n+\t\t\t\t\tdisabled={!table.getCanNextPage()}\r\n+\t\t\t\t\tclassName=\"shad-gray-btn\"\r\n+\t\t\t\t>\r\n+\t\t\t\t\t<Image\r\n+\t\t\t\t\t\tsrc=\"/assets/icons/arrow.svg\"\r\n+\t\t\t\t\t\twidth={24}\r\n+\t\t\t\t\t\theight={24}\r\n+\t\t\t\t\t\talt=\"arrow \"\r\n+\t\t\t\t\t\tclassName=\"rotate-180\"\r\n+\t\t\t\t\t/>\r\n+\t\t\t\t</Button>\r\n+\t\t\t</div>\r\n+\t\t</div>\r\n+\t);\r\n+}\r\n"
                }
            ],
            "date": 1722291631103,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport {\r\n  getPaginationRowModel,\r\n  ColumnDef,\r\n  flexRender,\r\n  getCoreRowModel,\r\n  useReactTable,\r\n} from \"@tanstack/react-table\";\r\nimport Image from \"next/image\";\r\nimport { redirect } from \"next/navigation\";\r\nimport { useEffect } from \"react\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport { decryptKey } from \"@/lib/utils\";\r\n\r\ninterface DataTableProps<TData, TValue> {\r\n  columns: ColumnDef<TData, TValue>[];\r\n  data: TData[];\r\n}\r\n\r\nexport function DataTable<TData, TValue>({\r\n  columns,\r\n  data,\r\n}: DataTableProps<TData, TValue>) {\r\n  const encryptedKey =\r\n    typeof window !== \"undefined\"\r\n      ? window.localStorage.getItem(\"accessKey\")\r\n      : null;\r\n\r\n  useEffect(() => {\r\n    const accessKey = encryptedKey && decryptKey(encryptedKey);\r\n\r\n    if (accessKey !== process.env.NEXT_PUBLIC_ADMIN_PASSKEY!.toString()) {\r\n      redirect(\"/\");\r\n    }\r\n  }, [encryptedKey]);\r\n\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getPaginationRowModel: getPaginationRowModel(),\r\n  });\r\n\r\n  return (\r\n    <div className=\"data-table\">\r\n      <Table className=\"shad-table\">\r\n        <TableHeader className=\" bg-dark-200\">\r\n          {table.getHeaderGroups().map((headerGroup) => (\r\n            <TableRow key={headerGroup.id} className=\"shad-table-row-header\">\r\n              {headerGroup.headers.map((header) => {\r\n                return (\r\n                  <TableHead key={header.id}>\r\n                    {header.isPlaceholder\r\n                      ? null\r\n                      : flexRender(\r\n                          header.column.columnDef.header,\r\n                          header.getContext()\r\n                        )}\r\n                  </TableHead>\r\n                );\r\n              })}\r\n            </TableRow>\r\n          ))}\r\n        </TableHeader>\r\n        <TableBody>\r\n          {table.getRowModel().rows?.length ? (\r\n            table.getRowModel().rows.map((row) => (\r\n              <TableRow\r\n                key={row.id}\r\n                data-state={row.getIsSelected() && \"selected\"}\r\n                className=\"shad-table-row\"\r\n              >\r\n                {row.getVisibleCells().map((cell) => (\r\n                  <TableCell key={cell.id}>\r\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            ))\r\n          ) : (\r\n            <TableRow>\r\n              <TableCell colSpan={columns.length} className=\"h-24 text-center\">\r\n                No results.\r\n              </TableCell>\r\n            </TableRow>\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n      <div className=\"table-actions\">\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          onClick={() => table.previousPage()}\r\n          disabled={!table.getCanPreviousPage()}\r\n          className=\"shad-gray-btn\"\r\n        >\r\n          <Image\r\n            src=\"/assets/icons/arrow.svg\"\r\n            width={24}\r\n            height={24}\r\n            alt=\"arrow\"\r\n          />\r\n        </Button>\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          onClick={() => table.nextPage()}\r\n          disabled={!table.getCanNextPage()}\r\n          className=\"shad-gray-btn\"\r\n        >\r\n          <Image\r\n            src=\"/assets/icons/arrow.svg\"\r\n            width={24}\r\n            height={24}\r\n            alt=\"arrow \"\r\n            className=\"rotate-180\"\r\n          />\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}"
        }
    ]
}