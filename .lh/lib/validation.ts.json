{
    "sourceFile": "lib/validation.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 160,
            "patches": [
                {
                    "date": 1723500887456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1723501794033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,135 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z.object({\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido.'\r\n+\t\t),\r\n+\tpassword: z.string().min(8, 'Debe tener al menos 8 caracteres.'),\r\n+});\r\n+\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\r\n+});\r\n+\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprimaryPhysician: z.string().min(2, 'Seleccione un médico'),\r\n+\tinsuranceProvider: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\tinsurancePolicyNumber: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\tallergies: z.string().optional(),\r\n+\tcurrentMedication: z.string().optional(),\r\n+\tfamilyMedicalHistory: z.string().optional(),\r\n+\tpastMedicalHistory: z.string().optional(),\r\n+\tidentificationType: z.string().optional(),\r\n+\tidentificationNumber: z.string(),\r\n+\tidentificationDocument: z.custom<File[]>().optional(),\r\n+\ttreatmentConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento al tratamiento para continuar',\r\n+\t\t}),\r\n+\tdisclosureConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la divulgación para continuar',\r\n+\t\t}),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1723502649152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,19 @@\n \t\t.refine(\r\n \t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n \t\t\t'Número de teléfono inválido.'\r\n \t\t),\r\n-\tpassword: z.string().min(8, 'Debe tener al menos 8 caracteres.'),\r\n+\tpassword: z\r\n+\t.string()\r\n+\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n+\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t  message: 'Debe tener al menus una Mayúscula.',\r\n+\t})\r\n+\t.refine((password) => /[0-9]/.test(password), { message: 'Debe tener al menus un número' })\r\n+\t.refine((password) => /[!@#$%^&*]/.test(password), {\r\n+\t  message: specialCharacterErrorMessage,\r\n+\t});\r\n });\r\n \r\n \r\n export const userLoginFormValidation = z.object({\r\n"
                },
                {
                    "date": 1723502656673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,142 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z.object({\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido.'\r\n+\t\t),\r\n+\tpassword: z\r\n+\t.string()\r\n+\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n+\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t  message: 'Debe tener al menus una Mayúscula.',\r\n+\t})\r\n+\t.refine((password) => /[0-9]/.test(password), { message: 'Debe tener al menus un número' })\r\n+});\r\n+\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\r\n+});\r\n+\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprimaryPhysician: z.string().min(2, 'Seleccione un médico'),\r\n+\tinsuranceProvider: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\tinsurancePolicyNumber: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\tallergies: z.string().optional(),\r\n+\tcurrentMedication: z.string().optional(),\r\n+\tfamilyMedicalHistory: z.string().optional(),\r\n+\tpastMedicalHistory: z.string().optional(),\r\n+\tidentificationType: z.string().optional(),\r\n+\tidentificationNumber: z.string(),\r\n+\tidentificationDocument: z.custom<File[]>().optional(),\r\n+\ttreatmentConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento al tratamiento para continuar',\r\n+\t\t}),\r\n+\tdisclosureConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la divulgación para continuar',\r\n+\t\t}),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1723503243181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,283 +139,4 @@\n \t\tdefault:\r\n \t\t\treturn ScheduleAppointmentSchema;\r\n \t}\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z.object({\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido.'\r\n-\t\t),\r\n-\tpassword: z\r\n-\t.string()\r\n-\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n-\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t  message: 'Debe tener al menus una Mayúscula.',\r\n-\t})\r\n-\t.refine((password) => /[0-9]/.test(password), { message: 'Debe tener al menus un número' })\r\n-\t.refine((password) => /[!@#$%^&*]/.test(password), {\r\n-\t  message: specialCharacterErrorMessage,\r\n-\t});\r\n-});\r\n-\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\r\n-});\r\n-\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprimaryPhysician: z.string().min(2, 'Seleccione un médico'),\r\n-\tinsuranceProvider: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\tinsurancePolicyNumber: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\tallergies: z.string().optional(),\r\n-\tcurrentMedication: z.string().optional(),\r\n-\tfamilyMedicalHistory: z.string().optional(),\r\n-\tpastMedicalHistory: z.string().optional(),\r\n-\tidentificationType: z.string().optional(),\r\n-\tidentificationNumber: z.string(),\r\n-\tidentificationDocument: z.custom<File[]>().optional(),\r\n-\ttreatmentConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento al tratamiento para continuar',\r\n-\t\t}),\r\n-\tdisclosureConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la divulgación para continuar',\r\n-\t\t}),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z.object({\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido.'\r\n-\t\t)\r\n-});\r\n-\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\r\n-});\r\n-\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprimaryPhysician: z.string().min(2, 'Seleccione un médico'),\r\n-\tinsuranceProvider: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\tinsurancePolicyNumber: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\tallergies: z.string().optional(),\r\n-\tcurrentMedication: z.string().optional(),\r\n-\tfamilyMedicalHistory: z.string().optional(),\r\n-\tpastMedicalHistory: z.string().optional(),\r\n-\tidentificationType: z.string().optional(),\r\n-\tidentificationNumber: z.string(),\r\n-\tidentificationDocument: z.custom<File[]>().optional(),\r\n-\ttreatmentConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento al tratamiento para continuar',\r\n-\t\t}),\r\n-\tdisclosureConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la divulgación para continuar',\r\n-\t\t}),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n"
                },
                {
                    "date": 1723506539667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,14 @@\n \t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n \t.refine((password) => /[A-Z]/.test(password), {\r\n \t  message: 'Debe tener al menus una Mayúscula.',\r\n \t})\r\n-\t.refine((password) => /[0-9]/.test(password), { message: 'Debe tener al menus un número' })\r\n-});\r\n+\t.refine((password) => /[0-9]/.test(password), { message: 'Debe tener al menus un número' }),\r\n+\tpassword2:z.string()\r\n+}).refine((data) => data.password === data.password2, {\r\n+\tmessage: \"Passwords don't match\",\r\n+\tpath: [\"confirm\"],\r\n+});;\r\n \r\n \r\n export const userLoginFormValidation = z.object({\r\n \temail: z.string().email('Debe ser un correo válido.'),\r\n"
                },
                {
                    "date": 1723506545727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z.object({\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido.'\r\n+\t\t),\r\n+\tpassword: z\r\n+\t.string()\r\n+\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n+\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t  message: 'Debe tener al menus una Mayúscula.',\r\n+\t})\r\n+\t.refine((password) => /[0-9]/.test(password), { message: 'Debe tener al menus un número' }),\r\n+\tpassword2:z.string()\r\n+}).refine((data) => data.password === data.password2, {\r\n+\tmessage: \"Passwords don't match\",\r\n+\tpath: [\"password2\"],\r\n+});;\r\n+\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\r\n+});\r\n+\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprimaryPhysician: z.string().min(2, 'Seleccione un médico'),\r\n+\tinsuranceProvider: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\tinsurancePolicyNumber: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\tallergies: z.string().optional(),\r\n+\tcurrentMedication: z.string().optional(),\r\n+\tfamilyMedicalHistory: z.string().optional(),\r\n+\tpastMedicalHistory: z.string().optional(),\r\n+\tidentificationType: z.string().optional(),\r\n+\tidentificationNumber: z.string(),\r\n+\tidentificationDocument: z.custom<File[]>().optional(),\r\n+\ttreatmentConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento al tratamiento para continuar',\r\n+\t\t}),\r\n+\tdisclosureConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la divulgación para continuar',\r\n+\t\t}),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1723506558474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,150 +143,4 @@\n \t\tdefault:\r\n \t\t\treturn ScheduleAppointmentSchema;\r\n \t}\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z.object({\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido.'\r\n-\t\t),\r\n-\tpassword: z\r\n-\t.string()\r\n-\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n-\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t  message: 'Debe tener al menus una Mayúscula.',\r\n-\t})\r\n-\t.refine((password) => /[0-9]/.test(password), { message: 'Debe tener al menus un número' }),\r\n-\tpassword2:z.string()\r\n-}).refine((data) => data.password === data.password2, {\r\n-\tmessage: \"Passwords don't match\",\r\n-\tpath: [\"confirm\"],\r\n-});;\r\n-\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\r\n-});\r\n-\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprimaryPhysician: z.string().min(2, 'Seleccione un médico'),\r\n-\tinsuranceProvider: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\tinsurancePolicyNumber: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\tallergies: z.string().optional(),\r\n-\tcurrentMedication: z.string().optional(),\r\n-\tfamilyMedicalHistory: z.string().optional(),\r\n-\tpastMedicalHistory: z.string().optional(),\r\n-\tidentificationType: z.string().optional(),\r\n-\tidentificationNumber: z.string(),\r\n-\tidentificationDocument: z.custom<File[]>().optional(),\r\n-\ttreatmentConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento al tratamiento para continuar',\r\n-\t\t}),\r\n-\tdisclosureConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la divulgación para continuar',\r\n-\t\t}),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n"
                },
                {
                    "date": 1723506972216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,12 +19,12 @@\n \t.refine((password) => /[A-Z]/.test(password), {\r\n \t  message: 'Debe tener al menus una Mayúscula.',\r\n \t})\r\n \t.refine((password) => /[0-9]/.test(password), { message: 'Debe tener al menus un número' }),\r\n-\tpassword2:z.string()\r\n-}).refine((data) => data.password === data.password2, {\r\n+\trepeatpassword:z.string()\r\n+}).refine((data) => data.password === data.repeatpassword, {\r\n \tmessage: \"Passwords don't match\",\r\n-\tpath: [\"password2\"],\r\n+\tpath: [\"repeatpassword\"],\r\n });;\r\n \r\n \r\n export const userLoginFormValidation = z.object({\r\n"
                },
                {
                    "date": 1723507000137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z.object({\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido.'\r\n+\t\t),\r\n+\tpassword: z\r\n+\t.string()\r\n+\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n+\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t  message: 'Debe tener al menus una Mayúscula.',\r\n+\t})\r\n+\t.refine((password) => /[0-9]/.test(password), { message: 'Debe tener al menus un número' }),\r\n+\trepeatpassword:z.string().min(2, 'Debe tener al menos 2 caracteres.')\r\n+}).refine((data) => data.password === data.repeatpassword, {\r\n+\tmessage: \"Passwords don't match\",\r\n+\tpath: [\"repeatpassword\"],\r\n+});;\r\n+\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\r\n+});\r\n+\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprimaryPhysician: z.string().min(2, 'Seleccione un médico'),\r\n+\tinsuranceProvider: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\tinsurancePolicyNumber: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\tallergies: z.string().optional(),\r\n+\tcurrentMedication: z.string().optional(),\r\n+\tfamilyMedicalHistory: z.string().optional(),\r\n+\tpastMedicalHistory: z.string().optional(),\r\n+\tidentificationType: z.string().optional(),\r\n+\tidentificationNumber: z.string(),\r\n+\tidentificationDocument: z.custom<File[]>().optional(),\r\n+\ttreatmentConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento al tratamiento para continuar',\r\n+\t\t}),\r\n+\tdisclosureConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la divulgación para continuar',\r\n+\t\t}),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1723507024427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z.object({\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido.'\r\n+\t\t),\r\n+\tpassword: z\r\n+\t.string()\r\n+\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n+\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t  message: 'Debe tener al menus una Mayúscula.',\r\n+\t})\r\n+\t.refine((password) => /[0-9]/.test(password), { message: 'Debe tener al menus un número' }),\r\n+\trepeatpassword:z.string().min(2, 'Debe tener al menos 2 caracteres.')\r\n+}).refine((data) => data.password === data.repeatpassword, {\r\n+\tmessage: \"La contraseña no coinciden\",\r\n+\tpath: [\"repeatpassword\"],\r\n+});;\r\n+\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\r\n+});\r\n+\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprimaryPhysician: z.string().min(2, 'Seleccione un médico'),\r\n+\tinsuranceProvider: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\tinsurancePolicyNumber: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\tallergies: z.string().optional(),\r\n+\tcurrentMedication: z.string().optional(),\r\n+\tfamilyMedicalHistory: z.string().optional(),\r\n+\tpastMedicalHistory: z.string().optional(),\r\n+\tidentificationType: z.string().optional(),\r\n+\tidentificationNumber: z.string(),\r\n+\tidentificationDocument: z.custom<File[]>().optional(),\r\n+\ttreatmentConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento al tratamiento para continuar',\r\n+\t\t}),\r\n+\tdisclosureConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la divulgación para continuar',\r\n+\t\t}),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1723507365272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z.object({\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido.'\r\n+\t\t),\r\n+\tpassword: z\r\n+\t.string()\r\n+\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n+\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t  message: 'Debe tener al menus una Mayúscula.',\r\n+\t})\r\n+\t.refine((password) => /[0-9]/.test(password), { message: 'Debe tener al menus un número' }),\r\n+\trepeatpassword:z.string('requerido')\r\n+}).refine((data) => data.password === data.repeatpassword, {\r\n+\tmessage: \"La contraseña no coinciden\",\r\n+\tpath: [\"repeatpassword\"],\r\n+});;\r\n+\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\r\n+});\r\n+\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprimaryPhysician: z.string().min(2, 'Seleccione un médico'),\r\n+\tinsuranceProvider: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\tinsurancePolicyNumber: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\tallergies: z.string().optional(),\r\n+\tcurrentMedication: z.string().optional(),\r\n+\tfamilyMedicalHistory: z.string().optional(),\r\n+\tpastMedicalHistory: z.string().optional(),\r\n+\tidentificationType: z.string().optional(),\r\n+\tidentificationNumber: z.string(),\r\n+\tidentificationDocument: z.custom<File[]>().optional(),\r\n+\ttreatmentConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento al tratamiento para continuar',\r\n+\t\t}),\r\n+\tdisclosureConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la divulgación para continuar',\r\n+\t\t}),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1723507376884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n \t.refine((password) => /[A-Z]/.test(password), {\r\n \t  message: 'Debe tener al menus una Mayúscula.',\r\n \t})\r\n \t.refine((password) => /[0-9]/.test(password), { message: 'Debe tener al menus un número' }),\r\n-\trepeatpassword:z.string('requerido')\r\n+\trepeatpassword:z.string()\r\n }).refine((data) => data.password === data.repeatpassword, {\r\n \tmessage: \"La contraseña no coinciden\",\r\n \tpath: [\"repeatpassword\"],\r\n });;\r\n@@ -143,442 +143,4 @@\n \t\tdefault:\r\n \t\t\treturn ScheduleAppointmentSchema;\r\n \t}\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z.object({\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido.'\r\n-\t\t),\r\n-\tpassword: z\r\n-\t.string()\r\n-\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n-\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t  message: 'Debe tener al menus una Mayúscula.',\r\n-\t})\r\n-\t.refine((password) => /[0-9]/.test(password), { message: 'Debe tener al menus un número' }),\r\n-\trepeatpassword:z.string().min(2, 'Debe tener al menos 2 caracteres.')\r\n-}).refine((data) => data.password === data.repeatpassword, {\r\n-\tmessage: \"La contraseña no coinciden\",\r\n-\tpath: [\"repeatpassword\"],\r\n-});;\r\n-\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\r\n-});\r\n-\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprimaryPhysician: z.string().min(2, 'Seleccione un médico'),\r\n-\tinsuranceProvider: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\tinsurancePolicyNumber: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\tallergies: z.string().optional(),\r\n-\tcurrentMedication: z.string().optional(),\r\n-\tfamilyMedicalHistory: z.string().optional(),\r\n-\tpastMedicalHistory: z.string().optional(),\r\n-\tidentificationType: z.string().optional(),\r\n-\tidentificationNumber: z.string(),\r\n-\tidentificationDocument: z.custom<File[]>().optional(),\r\n-\ttreatmentConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento al tratamiento para continuar',\r\n-\t\t}),\r\n-\tdisclosureConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la divulgación para continuar',\r\n-\t\t}),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z.object({\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido.'\r\n-\t\t),\r\n-\tpassword: z\r\n-\t.string()\r\n-\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n-\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t  message: 'Debe tener al menus una Mayúscula.',\r\n-\t})\r\n-\t.refine((password) => /[0-9]/.test(password), { message: 'Debe tener al menus un número' }),\r\n-\trepeatpassword:z.string().min(2, 'Debe tener al menos 2 caracteres.')\r\n-}).refine((data) => data.password === data.repeatpassword, {\r\n-\tmessage: \"Passwords don't match\",\r\n-\tpath: [\"repeatpassword\"],\r\n-});;\r\n-\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\r\n-});\r\n-\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprimaryPhysician: z.string().min(2, 'Seleccione un médico'),\r\n-\tinsuranceProvider: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\tinsurancePolicyNumber: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\tallergies: z.string().optional(),\r\n-\tcurrentMedication: z.string().optional(),\r\n-\tfamilyMedicalHistory: z.string().optional(),\r\n-\tpastMedicalHistory: z.string().optional(),\r\n-\tidentificationType: z.string().optional(),\r\n-\tidentificationNumber: z.string(),\r\n-\tidentificationDocument: z.custom<File[]>().optional(),\r\n-\ttreatmentConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento al tratamiento para continuar',\r\n-\t\t}),\r\n-\tdisclosureConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la divulgación para continuar',\r\n-\t\t}),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z.object({\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido.'\r\n-\t\t),\r\n-\tpassword: z\r\n-\t.string()\r\n-\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n-\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t  message: 'Debe tener al menus una Mayúscula.',\r\n-\t})\r\n-\t.refine((password) => /[0-9]/.test(password), { message: 'Debe tener al menus un número' }),\r\n-\trepeatpassword:z.string()\r\n-}).refine((data) => data.password === data.repeatpassword, {\r\n-\tmessage: \"Passwords don't match\",\r\n-\tpath: [\"repeatpassword\"],\r\n-});;\r\n-\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\r\n-});\r\n-\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprimaryPhysician: z.string().min(2, 'Seleccione un médico'),\r\n-\tinsuranceProvider: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\tinsurancePolicyNumber: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\tallergies: z.string().optional(),\r\n-\tcurrentMedication: z.string().optional(),\r\n-\tfamilyMedicalHistory: z.string().optional(),\r\n-\tpastMedicalHistory: z.string().optional(),\r\n-\tidentificationType: z.string().optional(),\r\n-\tidentificationNumber: z.string(),\r\n-\tidentificationDocument: z.custom<File[]>().optional(),\r\n-\ttreatmentConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento al tratamiento para continuar',\r\n-\t\t}),\r\n-\tdisclosureConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la divulgación para continuar',\r\n-\t\t}),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n"
                },
                {
                    "date": 1723507438100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z.object({\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido.'\r\n+\t\t),\r\n+\tpassword: z\r\n+\t.string()\r\n+\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n+\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t  message: 'Debe tener al menus una Mayúscula.',\r\n+\t})\r\n+\t.refine((password) => /[0-9]/.test(password), { message: 'Debe tener al menus un número' }),\r\n+\trepeatpassword:z.string().min(1, { message: \"Las contraseñas no coinciden\" })\r\n+}).refine((data) => data.password === data.repeatpassword, {\r\n+\tmessage: \"Las contraseñas no coinciden\",\r\n+\tpath: [\"repeatpassword\"],\r\n+});;\r\n+\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\r\n+});\r\n+\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprimaryPhysician: z.string().min(2, 'Seleccione un médico'),\r\n+\tinsuranceProvider: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\tinsurancePolicyNumber: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\tallergies: z.string().optional(),\r\n+\tcurrentMedication: z.string().optional(),\r\n+\tfamilyMedicalHistory: z.string().optional(),\r\n+\tpastMedicalHistory: z.string().optional(),\r\n+\tidentificationType: z.string().optional(),\r\n+\tidentificationNumber: z.string(),\r\n+\tidentificationDocument: z.custom<File[]>().optional(),\r\n+\ttreatmentConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento al tratamiento para continuar',\r\n+\t\t}),\r\n+\tdisclosureConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la divulgación para continuar',\r\n+\t\t}),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1723507446318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z.object({\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido.'\r\n+\t\t),\r\n+\tpassword: z\r\n+\t.string()\r\n+\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n+\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t  message: 'Debe tener al menus una Mayúscula.',\r\n+\t})\r\n+\t.refine((password) => /[0-9]/.test(password), { message: 'Debe tener al menus un número' }),\r\n+\trepeatpassword:z.string().min(1, { message: \"Las contraseñas no coinciden\" }) \r\n+}).refine((data) => data.password === data.repeatpassword, {\r\n+\tmessage: \"Las contraseñas no coinciden\",\r\n+\tpath: [\"repeatpassword\"],\r\n+});;\r\n+\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\r\n+});\r\n+\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprimaryPhysician: z.string().min(2, 'Seleccione un médico'),\r\n+\tinsuranceProvider: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\tinsurancePolicyNumber: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\tallergies: z.string().optional(),\r\n+\tcurrentMedication: z.string().optional(),\r\n+\tfamilyMedicalHistory: z.string().optional(),\r\n+\tpastMedicalHistory: z.string().optional(),\r\n+\tidentificationType: z.string().optional(),\r\n+\tidentificationNumber: z.string(),\r\n+\tidentificationDocument: z.custom<File[]>().optional(),\r\n+\ttreatmentConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento al tratamiento para continuar',\r\n+\t\t}),\r\n+\tdisclosureConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la divulgación para continuar',\r\n+\t\t}),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1723507674930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,39 +1,42 @@\n import { z } from 'zod';\r\n \r\n-export const userFormValidation = z.object({\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido.'\r\n-\t\t),\r\n-\tpassword: z\r\n-\t.string()\r\n-\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n-\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t  message: 'Debe tener al menus una Mayúscula.',\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido.'\r\n+\t\t\t),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menus una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menus un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n \t})\r\n-\t.refine((password) => /[0-9]/.test(password), { message: 'Debe tener al menus un número' }),\r\n-\trepeatpassword:z.string().min(1, { message: \"Las contraseñas no coinciden\" }) \r\n-}).refine((data) => data.password === data.repeatpassword, {\r\n-\tmessage: \"Las contraseñas no coinciden\",\r\n-\tpath: [\"repeatpassword\"],\r\n-});;\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n \r\n-\r\n export const userLoginFormValidation = z.object({\r\n \temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\r\n });\r\n \r\n-\r\n export const PatientFormValidation = z.object({\r\n \tname: z\r\n \t\t.string()\r\n \t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n@@ -143,296 +146,4 @@\n \t\tdefault:\r\n \t\t\treturn ScheduleAppointmentSchema;\r\n \t}\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z.object({\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido.'\r\n-\t\t),\r\n-\tpassword: z\r\n-\t.string()\r\n-\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n-\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t  message: 'Debe tener al menus una Mayúscula.',\r\n-\t})\r\n-\t.refine((password) => /[0-9]/.test(password), { message: 'Debe tener al menus un número' }),\r\n-\trepeatpassword:z.string().min(1, { message: \"Las contraseñas no coinciden\" })\r\n-}).refine((data) => data.password === data.repeatpassword, {\r\n-\tmessage: \"Las contraseñas no coinciden\",\r\n-\tpath: [\"repeatpassword\"],\r\n-});;\r\n-\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\r\n-});\r\n-\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprimaryPhysician: z.string().min(2, 'Seleccione un médico'),\r\n-\tinsuranceProvider: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\tinsurancePolicyNumber: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\tallergies: z.string().optional(),\r\n-\tcurrentMedication: z.string().optional(),\r\n-\tfamilyMedicalHistory: z.string().optional(),\r\n-\tpastMedicalHistory: z.string().optional(),\r\n-\tidentificationType: z.string().optional(),\r\n-\tidentificationNumber: z.string(),\r\n-\tidentificationDocument: z.custom<File[]>().optional(),\r\n-\ttreatmentConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento al tratamiento para continuar',\r\n-\t\t}),\r\n-\tdisclosureConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la divulgación para continuar',\r\n-\t\t}),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z.object({\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido.'\r\n-\t\t),\r\n-\tpassword: z\r\n-\t.string()\r\n-\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n-\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t  message: 'Debe tener al menus una Mayúscula.',\r\n-\t})\r\n-\t.refine((password) => /[0-9]/.test(password), { message: 'Debe tener al menus un número' }),\r\n-\trepeatpassword:z.string()\r\n-}).refine((data) => data.password === data.repeatpassword, {\r\n-\tmessage: \"La contraseña no coinciden\",\r\n-\tpath: [\"repeatpassword\"],\r\n-});;\r\n-\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\r\n-});\r\n-\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprimaryPhysician: z.string().min(2, 'Seleccione un médico'),\r\n-\tinsuranceProvider: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\tinsurancePolicyNumber: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\tallergies: z.string().optional(),\r\n-\tcurrentMedication: z.string().optional(),\r\n-\tfamilyMedicalHistory: z.string().optional(),\r\n-\tpastMedicalHistory: z.string().optional(),\r\n-\tidentificationType: z.string().optional(),\r\n-\tidentificationNumber: z.string(),\r\n-\tidentificationDocument: z.custom<File[]>().optional(),\r\n-\ttreatmentConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento al tratamiento para continuar',\r\n-\t\t}),\r\n-\tdisclosureConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la divulgación para continuar',\r\n-\t\t}),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n"
                },
                {
                    "date": 1723507808044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,8 @@\n \t\t\t\tmessage: 'Debe tener al menus un número',\r\n \t\t\t}),\r\n \t\trepeatpassword: z\r\n \t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n \t})\r\n \t.refine((data) => data.password === data.repeatpassword, {\r\n \t\tmessage: 'Las contraseñas no coinciden',\r\n \t\tpath: ['repeatpassword'],\r\n"
                },
                {
                    "date": 1723507836294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,12 +25,8 @@\n \t\t\t}),\r\n \t\trepeatpassword: z\r\n \t\t\t.string()\r\n \t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n \r\n export const userLoginFormValidation = z.object({\r\n \temail: z.string().email('Debe ser un correo válido.'),\r\n });\r\n"
                },
                {
                    "date": 1723507847844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,12 @@\n \t\t\t}),\r\n \t\trepeatpassword: z\r\n \t\t\t.string()\r\n \t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n \r\n export const userLoginFormValidation = z.object({\r\n \temail: z.string().email('Debe ser un correo válido.'),\r\n });\r\n"
                },
                {
                    "date": 1723508760656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n \t\t\t\tmessage: 'Debe tener al menus un número',\r\n \t\t\t}),\r\n \t\trepeatpassword: z\r\n \t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n \t})\r\n \t.refine((data) => data.password === data.repeatpassword, {\r\n \t\tmessage: 'Las contraseñas no coinciden',\r\n \t\tpath: ['repeatpassword'],\r\n"
                },
                {
                    "date": 1723508775922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,8 @@\n \t\t\t\tmessage: 'Debe tener al menus un número',\r\n \t\t\t}),\r\n \t\trepeatpassword: z\r\n \t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n \t})\r\n \t.refine((data) => data.password === data.repeatpassword, {\r\n \t\tmessage: 'Las contraseñas no coinciden',\r\n \t\tpath: ['repeatpassword'],\r\n"
                },
                {
                    "date": 1723508781904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,13 +24,10 @@\n \t\t\t\tmessage: 'Debe tener al menus un número',\r\n \t\t\t}),\r\n \t\trepeatpassword: z\r\n \t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n \t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n \r\n export const userLoginFormValidation = z.object({\r\n \temail: z.string().email('Debe ser un correo válido.'),\r\n });\r\n"
                },
                {
                    "date": 1723508895911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,144 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido.'\r\n+\t\t\t),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menus una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menus un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z\r\n+\t\t\t.string()\r\n+\t})\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprimaryPhysician: z.string().min(2, 'Seleccione un médico'),\r\n+\tinsuranceProvider: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\tinsurancePolicyNumber: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\tallergies: z.string().optional(),\r\n+\tcurrentMedication: z.string().optional(),\r\n+\tfamilyMedicalHistory: z.string().optional(),\r\n+\tpastMedicalHistory: z.string().optional(),\r\n+\tidentificationType: z.string().optional(),\r\n+\tidentificationNumber: z.string(),\r\n+\tidentificationDocument: z.custom<File[]>().optional(),\r\n+\ttreatmentConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento al tratamiento para continuar',\r\n+\t\t}),\r\n+\tdisclosureConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la divulgación para continuar',\r\n+\t\t}),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1723509053236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,143 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z.object({\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido.'\r\n+\t\t),\r\n+\tpassword: z\r\n+\t\t.string()\r\n+\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n+\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\tmessage: 'Debe tener al menus una Mayúscula.',\r\n+\t\t})\r\n+\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\tmessage: 'Debe tener al menus un número',\r\n+\t\t}),\r\n+\trepeatpassword: z.string(),\r\n+});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprimaryPhysician: z.string().min(2, 'Seleccione un médico'),\r\n+\tinsuranceProvider: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\tinsurancePolicyNumber: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\tallergies: z.string().optional(),\r\n+\tcurrentMedication: z.string().optional(),\r\n+\tfamilyMedicalHistory: z.string().optional(),\r\n+\tpastMedicalHistory: z.string().optional(),\r\n+\tidentificationType: z.string().optional(),\r\n+\tidentificationNumber: z.string(),\r\n+\tidentificationDocument: z.custom<File[]>().optional(),\r\n+\ttreatmentConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento al tratamiento para continuar',\r\n+\t\t}),\r\n+\tdisclosureConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la divulgación para continuar',\r\n+\t\t}),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1723509476874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,149 +1,6 @@\n import { z } from 'zod';\r\n \r\n-export const userFormValidation = z.object({\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido.'\r\n-\t\t),\r\n-\tpassword: z\r\n-\t\t.string()\r\n-\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n-\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\tmessage: 'Debe tener al menus una Mayúscula.',\r\n-\t\t})\r\n-\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\tmessage: 'Debe tener al menus un número',\r\n-\t\t}),\r\n-\trepeatpassword: z.string(),\r\n-});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprimaryPhysician: z.string().min(2, 'Seleccione un médico'),\r\n-\tinsuranceProvider: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\tinsurancePolicyNumber: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\tallergies: z.string().optional(),\r\n-\tcurrentMedication: z.string().optional(),\r\n-\tfamilyMedicalHistory: z.string().optional(),\r\n-\tpastMedicalHistory: z.string().optional(),\r\n-\tidentificationType: z.string().optional(),\r\n-\tidentificationNumber: z.string(),\r\n-\tidentificationDocument: z.custom<File[]>().optional(),\r\n-\ttreatmentConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento al tratamiento para continuar',\r\n-\t\t}),\r\n-\tdisclosureConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la divulgación para continuar',\r\n-\t\t}),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-import { z } from 'zod';\r\n-\r\n export const userFormValidation = z\r\n \t.object({\r\n \t\tname: z\r\n \t\t\t.string()\r\n@@ -168,8 +25,12 @@\n \t\t\t}),\r\n \t\trepeatpassword: z\r\n \t\t\t.string()\r\n \t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n \r\n export const userLoginFormValidation = z.object({\r\n \temail: z.string().email('Debe ser un correo válido.'),\r\n });\r\n@@ -284,149 +145,4 @@\n \t\tdefault:\r\n \t\t\treturn ScheduleAppointmentSchema;\r\n \t}\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido.'\r\n-\t\t\t),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menus una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menus un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t})\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprimaryPhysician: z.string().min(2, 'Seleccione un médico'),\r\n-\tinsuranceProvider: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\tinsurancePolicyNumber: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\tallergies: z.string().optional(),\r\n-\tcurrentMedication: z.string().optional(),\r\n-\tfamilyMedicalHistory: z.string().optional(),\r\n-\tpastMedicalHistory: z.string().optional(),\r\n-\tidentificationType: z.string().optional(),\r\n-\tidentificationNumber: z.string(),\r\n-\tidentificationDocument: z.custom<File[]>().optional(),\r\n-\ttreatmentConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento al tratamiento para continuar',\r\n-\t\t}),\r\n-\tdisclosureConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la divulgación para continuar',\r\n-\t\t}),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n"
                },
                {
                    "date": 1723509491356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,18 +22,18 @@\n \t\t\t})\r\n \t\t\t.refine((password) => /[0-9]/.test(password), {\r\n \t\t\t\tmessage: 'Debe tener al menus un número',\r\n \t\t\t}),\r\n-\t\trepeatpassword: z\r\n-\t\t\t.string()\r\n+\t\trepeatpassword: z.string(),\r\n \t})\r\n \t.refine((data) => data.password === data.repeatpassword, {\r\n \t\tmessage: 'Las contraseñas no coinciden',\r\n \t\tpath: ['repeatpassword'],\r\n \t});\r\n \r\n export const userLoginFormValidation = z.object({\r\n \temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n });\r\n \r\n export const PatientFormValidation = z.object({\r\n \tname: z\r\n"
                },
                {
                    "date": 1723535630901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,12 +17,12 @@\n \t\t\t.string()\r\n \t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n \t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n \t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menus una Mayúscula.',\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n \t\t\t})\r\n \t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menus un número',\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n \t\t\t}),\r\n \t\trepeatpassword: z.string(),\r\n \t})\r\n \t.refine((data) => data.password === data.repeatpassword, {\r\n"
                },
                {
                    "date": 1723888758083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido.'\r\n+\t\t\t),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprimaryPhysician: z.string().min(2, 'Seleccione un médico'),\r\n+\tinsuranceProvider: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\tinsurancePolicyNumber: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\tallergies: z.string().optional(),\r\n+\tcurrentMedication: z.string().optional(),\r\n+\tfamilyMedicalHistory: z.string().optional(),\r\n+\tpastMedicalHistory: z.string().optional(),\r\n+\tidentificationType: z.string().optional(),\r\n+\tidentificationNumber: z.string(),\r\n+\tidentificationDocument: z.custom<File[]>().optional(),\r\n+\ttreatmentConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento al tratamiento para continuar',\r\n+\t\t}),\r\n+\tdisclosureConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la divulgación para continuar',\r\n+\t\t}),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1723940085364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,14 +6,8 @@\n \t\t\t.string()\r\n \t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n \t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n \t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido.'\r\n-\t\t\t),\r\n \t\tpassword: z\r\n \t\t\t.string()\r\n \t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n \t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n@@ -145,152 +139,4 @@\n \t\tdefault:\r\n \t\t\treturn ScheduleAppointmentSchema;\r\n \t}\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido.'\r\n-\t\t\t),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprimaryPhysician: z.string().min(2, 'Seleccione un médico'),\r\n-\tinsuranceProvider: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\tinsurancePolicyNumber: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\tallergies: z.string().optional(),\r\n-\tcurrentMedication: z.string().optional(),\r\n-\tfamilyMedicalHistory: z.string().optional(),\r\n-\tpastMedicalHistory: z.string().optional(),\r\n-\tidentificationType: z.string().optional(),\r\n-\tidentificationNumber: z.string(),\r\n-\tidentificationDocument: z.custom<File[]>().optional(),\r\n-\ttreatmentConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento al tratamiento para continuar',\r\n-\t\t}),\r\n-\tdisclosureConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la divulgación para continuar',\r\n-\t\t}),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n"
                },
                {
                    "date": 1723951097173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,9 @@\n \t\t\t'Número de teléfono inválido'\r\n \t\t),\r\n \tbirthDate: z.coerce.date(),\r\n \tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n \taddress: z\r\n \t\t.string()\r\n \t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n \t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n"
                },
                {
                    "date": 1723951164089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,38 +62,8 @@\n \t\t.refine(\r\n \t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n \t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n \t\t),\r\n-\tprimaryPhysician: z.string().min(2, 'Seleccione un médico'),\r\n-\tinsuranceProvider: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\tinsurancePolicyNumber: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\tallergies: z.string().optional(),\r\n-\tcurrentMedication: z.string().optional(),\r\n-\tfamilyMedicalHistory: z.string().optional(),\r\n-\tpastMedicalHistory: z.string().optional(),\r\n-\tidentificationType: z.string().optional(),\r\n-\tidentificationNumber: z.string(),\r\n-\tidentificationDocument: z.custom<File[]>().optional(),\r\n-\ttreatmentConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento al tratamiento para continuar',\r\n-\t\t}),\r\n-\tdisclosureConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la divulgación para continuar',\r\n-\t\t}),\r\n \tprivacyConsent: z\r\n \t\t.boolean()\r\n \t\t.default(false)\r\n \t\t.refine((value) => value === true, {\r\n"
                },
                {
                    "date": 1723951289840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,10 +41,12 @@\n \t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n \t\t\t'Número de teléfono inválido'\r\n \t\t),\r\n \tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n \tgender: z.enum(['male', 'female', 'other']),\r\n \ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().optional(),\r\n \taddress: z\r\n \t\t.string()\r\n \t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n \t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n"
                },
                {
                    "date": 1723951834922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,9 @@\n \tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n \tgender: z.enum(['male', 'female', 'other']),\r\n \ttype: z.enum(['adult', 'child']),\r\n \treligion: z.string().optional(),\r\n+\tplaceOfBirth: z.string().optional(),\r\n \taddress: z\r\n \t\t.string()\r\n \t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n \t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n"
                },
                {
                    "date": 1723952518844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,117 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().optional(),\r\n+\tplaceOfBirth: z.string().optional(),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1723953643074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,10 +45,11 @@\n \tbirthDate: z.coerce.date(),\r\n \tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n \tgender: z.enum(['male', 'female', 'other']),\r\n \ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().optional(),\r\n-\tplaceOfBirth: z.string().optional(),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z.string().min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string().or(z.literal('')),\r\n \taddress: z\r\n \t\t.string()\r\n \t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n \t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n"
                },
                {
                    "date": 1723953989470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n \t\t\t'Número de teléfono inválido'\r\n \t\t),\r\n \tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']).optional(),\r\n \tgender: z.enum(['male', 'female', 'other']),\r\n \ttype: z.enum(['adult', 'child']),\r\n \treligion: z.string().or(z.literal('')),\r\n \tplaceOfBirth: z.string().min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n"
                },
                {
                    "date": 1723955234675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,118 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']).optional(),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z.string().min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1723955534855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,238 +115,4 @@\n \t\tdefault:\r\n \t\t\treturn ScheduleAppointmentSchema;\r\n \t}\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']).optional(),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z.string().min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string().or(z.literal('')),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().optional(),\r\n-\tplaceOfBirth: z.string().optional(),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n"
                },
                {
                    "date": 1723964793430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,120 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']).optional(),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z.string().min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationNumber: z.string(),\r\n+\tidentificationDocument: z.custom<File[]>().optional(),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1723964807990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,122 +117,4 @@\n \t\tdefault:\r\n \t\t\treturn ScheduleAppointmentSchema;\r\n \t}\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']).optional(),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z.string().min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n"
                },
                {
                    "date": 1723965283796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,11 @@\n \ttype: z.enum(['adult', 'child']),\r\n \treligion: z.string().or(z.literal('')),\r\n \tplaceOfBirth: z.string().min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n \tacademicGrade: z.string(),\r\n+\tidentificationType: z.string().optional(),\r\n \tidentificationNumber: z.string(),\r\n+\t\r\n \tidentificationDocument: z.custom<File[]>().optional(),\r\n \taddress: z\r\n \t\t.string()\r\n \t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n"
                },
                {
                    "date": 1723966074100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,22 +42,25 @@\n \t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n \t\t\t'Número de teléfono inválido'\r\n \t\t),\r\n \tbirthDate: z.coerce.date(),\r\n+\r\n \tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']).optional(),\r\n \tgender: z.enum(['male', 'female', 'other']),\r\n \ttype: z.enum(['adult', 'child']),\r\n \treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z.string().min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\r\n \tacademicGrade: z.string(),\r\n \tidentificationType: z.string().optional(),\r\n \tidentificationNumber: z.string(),\r\n-\t\r\n-\tidentificationDocument: z.custom<File[]>().optional(),\r\n \taddress: z\r\n \t\t.string()\r\n \t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n \t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\r\n \toccupation: z\r\n \t\t.string()\r\n \t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n \t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n"
                },
                {
                    "date": 1723966660863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,14 +53,13 @@\n \t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n \r\n \tacademicGrade: z.string(),\r\n \tidentificationType: z.string().optional(),\r\n-\tidentificationNumber: z.string(),\r\n+\tidentificationNumber: z.string().min(8, 'N identificación debe tener al menos 2 caracteres'),\r\n \taddress: z\r\n \t\t.string()\r\n \t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n \t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\r\n \toccupation: z\r\n \t\t.string()\r\n \t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n \t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n"
                },
                {
                    "date": 1723966667946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n \t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n \r\n \tacademicGrade: z.string(),\r\n \tidentificationType: z.string().optional(),\r\n-\tidentificationNumber: z.string().min(8, 'N identificación debe tener al menos 2 caracteres'),\r\n+\tidentificationNumber: z.string().min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n \taddress: z\r\n \t\t.string()\r\n \t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n \t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n"
                },
                {
                    "date": 1723966796063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,124 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']).optional(),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string().optional(),\r\n+\tidentificationNumber: z.string().min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1723968192568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,128 +121,4 @@\n \t\tdefault:\r\n \t\t\treturn ScheduleAppointmentSchema;\r\n \t}\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']).optional(),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string().optional(),\r\n-\tidentificationNumber: z.string().min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n"
                },
                {
                    "date": 1723971684280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,17 +42,15 @@\n \t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n \t\t\t'Número de teléfono inválido'\r\n \t\t),\r\n \tbirthDate: z.coerce.date(),\r\n-\r\n \tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']).optional(),\r\n \tgender: z.enum(['male', 'female', 'other']),\r\n \ttype: z.enum(['adult', 'child']),\r\n \treligion: z.string().or(z.literal('')),\r\n \tplaceOfBirth: z\r\n \t\t.string()\r\n \t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\r\n \tacademicGrade: z.string(),\r\n \tidentificationType: z.string().optional(),\r\n \tidentificationNumber: z.string().min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n \taddress: z\r\n"
                },
                {
                    "date": 1723972448279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n \t\t\t'Número de teléfono inválido'\r\n \t\t),\r\n \tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']).optional(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n \tgender: z.enum(['male', 'female', 'other']),\r\n \ttype: z.enum(['adult', 'child']),\r\n \treligion: z.string().or(z.literal('')),\r\n \tplaceOfBirth: z\r\n"
                },
                {
                    "date": 1724089581841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n \tplaceOfBirth: z\r\n \t\t.string()\r\n \t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n \tacademicGrade: z.string(),\r\n-\tidentificationType: z.string().optional(),\r\n+\tidentificationType: z.string(),\r\n \tidentificationNumber: z.string().min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n \taddress: z\r\n \t\t.string()\r\n \t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n"
                },
                {
                    "date": 1724103533433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,122 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z.string().min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Selecionar una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\treason: z.string().optional(),\r\n+\tnote: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1724104067112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,11 @@\n \t\t.string()\r\n \t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n \tacademicGrade: z.string(),\r\n \tidentificationType: z.string(),\r\n-\tidentificationNumber: z.string().min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n \taddress: z\r\n \t\t.string()\r\n \t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n \t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n@@ -80,31 +82,26 @@\n \t\t}),\r\n });\r\n \r\n export const CreateAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n \tschedule: z.coerce.date(),\r\n-\treason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-\tnote: z.string().optional(),\r\n+\taditionalInfo: z.string().optional(),\r\n \tcancellationReason: z.string().optional(),\r\n });\r\n \r\n export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Selecionar una especialidad'),\r\n+\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n \tschedule: z.coerce.date(),\r\n \taditionalInfo: z.string().optional(),\r\n \tnote: z.string().optional(),\r\n \tcancellationReason: z.string().optional(),\r\n });\r\n \r\n export const CancelAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n+\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n \tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n+\taditionalInfo: z.string().optional(),\r\n \tcancellationReason: z\r\n \t\t.string()\r\n \t\t.min(2, 'Reason must be at least 2 characters')\r\n \t\t.max(500, 'Reason must be at most 500 characters'),\r\n@@ -119,126 +116,4 @@\n \t\tdefault:\r\n \t\t\treturn ScheduleAppointmentSchema;\r\n \t}\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z.string().min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\treason: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n"
                },
                {
                    "date": 1724104082444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,118 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1724104208972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,123 +115,4 @@\n \t\tdefault:\r\n \t\t\treturn ScheduleAppointmentSchema;\r\n \t}\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tnote: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n"
                },
                {
                    "date": 1724110840076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,120 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tuserId: z.string(),\r\n+\tpatient: z.string(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1724111033128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,120 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tuserId: z.string(),\r\n+\tpatient: z.string(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1724111065795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,242 +117,4 @@\n \t\tdefault:\r\n \t\t\treturn ScheduleAppointmentSchema;\r\n \t}\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tuserId: z.string(),\r\n-\tpatient: z.string(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n"
                },
                {
                    "date": 1724112260344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,8 @@\n export const CreateAppointmentSchema = z.object({\r\n \tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n \tschedule: z.coerce.date(),\r\n \taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n \tuserId: z.string(),\r\n \tpatient: z.string(),\r\n });\r\n \r\n"
                },
                {
                    "date": 1724112309616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,117 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional()\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1724112326922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,127 +84,11 @@\n \r\n export const CreateAppointmentSchema = z.object({\r\n \tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n \tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional()\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n \taditionalInfo: z.string().optional(),\r\n \tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n \tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tuserId: z.string(),\r\n \tpatient: z.string(),\r\n });\r\n \r\n export const ScheduleAppointmentSchema = z.object({\r\n"
                },
                {
                    "date": 1724112344798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,11 +85,9 @@\n export const CreateAppointmentSchema = z.object({\r\n \tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n \tschedule: z.coerce.date(),\r\n \taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tuserId: z.string(),\r\n-\tpatient: z.string(),\r\n+\tcancellationReason: z.string().optional()\r\n });\r\n \r\n export const ScheduleAppointmentSchema = z.object({\r\n \tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n"
                },
                {
                    "date": 1724112694214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,11 @@\n export const CreateAppointmentSchema = z.object({\r\n \tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n \tschedule: z.coerce.date(),\r\n \taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional()\r\n+\tcancellationReason: z.string().optional(),\r\n+\tuserId: z.string(),\r\n+\tpatientId: z.string()\r\n });\r\n \r\n export const ScheduleAppointmentSchema = z.object({\r\n \tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n"
                },
                {
                    "date": 1724112798053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,118 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional()\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1724114484759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \t\temail: z.string().email('Debe ser un correo válido.'),\r\n \t\tpassword: z\r\n \t\t\t.string()\r\n \t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n+\t\t\t.max(12, { message: 'Debe tener máximo 15 caracteres.' })\r\n \t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n \t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n \t\t\t})\r\n \t\t\t.refine((password) => /[0-9]/.test(password), {\r\n@@ -115,124 +115,4 @@\n \t\tdefault:\r\n \t\t\treturn ScheduleAppointmentSchema;\r\n \t}\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(12, { message: 'Debe tener máximo 12 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tuserId: z.string(),\r\n-\tpatientId: z.string()\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n"
                },
                {
                    "date": 1724114542532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \t\temail: z.string().email('Debe ser un correo válido.'),\r\n \t\tpassword: z\r\n \t\t\t.string()\r\n \t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(12, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n \t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n \t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n \t\t\t})\r\n \t\t\t.refine((password) => /[0-9]/.test(password), {\r\n"
                },
                {
                    "date": 1724385897282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,8 @@\n export const ScheduleAppointmentSchema = z.object({\r\n \tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n \tschedule: z.coerce.date(),\r\n \taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n });\r\n \r\n export const CancelAppointmentSchema = z.object({\r\n \tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n"
                },
                {
                    "date": 1724403883860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,8 @@\n export const CreateAppointmentSchema = z.object({\r\n \tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n \tschedule: z.coerce.date(),\r\n \taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional()\r\n });\r\n \r\n export const ScheduleAppointmentSchema = z.object({\r\n \tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n"
                },
                {
                    "date": 1724404124075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,116 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Reason must be at least 2 characters')\r\n+\t\t.max(500, 'Reason must be at most 500 characters'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1724404690957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,14 +85,16 @@\n export const CreateAppointmentSchema = z.object({\r\n \tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n \tschedule: z.coerce.date(),\r\n \taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n });\r\n \r\n export const ScheduleAppointmentSchema = z.object({\r\n \tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n \tschedule: z.coerce.date(),\r\n \taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n });\r\n \r\n export const CancelAppointmentSchema = z.object({\r\n \tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n@@ -113,120 +115,4 @@\n \t\tdefault:\r\n \t\t\treturn ScheduleAppointmentSchema;\r\n \t}\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n"
                },
                {
                    "date": 1724404734766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,23 +82,23 @@\n \t\t}),\r\n });\r\n \r\n export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n \tschedule: z.coerce.date(),\r\n \taditionalInfo: z.string().optional(),\r\n \tcancellationReason: z.string().optional(),\r\n });\r\n \r\n export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n \tschedule: z.coerce.date(),\r\n \taditionalInfo: z.string().optional(),\r\n \tcancellationReason: z.string().optional(),\r\n });\r\n \r\n export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Select at least one doctor'),\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n \tschedule: z.coerce.date(),\r\n \taditionalInfo: z.string().optional(),\r\n \tcancellationReason: z\r\n \t\t.string()\r\n"
                },
                {
                    "date": 1724404753252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,118 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1724804439986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,14 @@\n \t\t\t.refine((password) => /[0-9]/.test(password), {\r\n \t\t\t\tmessage: 'Debe tener al menos un número',\r\n \t\t\t}),\r\n \t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n \t})\r\n \t.refine((data) => data.password === data.repeatpassword, {\r\n \t\tmessage: 'Las contraseñas no coinciden',\r\n \t\tpath: ['repeatpassword'],\r\n@@ -115,122 +121,4 @@\n \t\tdefault:\r\n \t\t\treturn ScheduleAppointmentSchema;\r\n \t}\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Reason must be at least 2 characters')\r\n-\t\t.max(500, 'Reason must be at most 500 characters'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n"
                },
                {
                    "date": 1724804488725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n \t\t\t.string()\r\n \t\t\t.refine(\r\n \t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n \t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n+\t\t\t)\r\n \t})\r\n \t.refine((data) => data.password === data.repeatpassword, {\r\n \t\tmessage: 'Las contraseñas no coinciden',\r\n \t\tpath: ['repeatpassword'],\r\n"
                },
                {
                    "date": 1724804495810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n \t\t\t.string()\r\n \t\t\t.refine(\r\n \t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n \t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n+\t\t\t).optional()\r\n \t})\r\n \t.refine((data) => data.password === data.repeatpassword, {\r\n \t\tmessage: 'Las contraseñas no coinciden',\r\n \t\tpath: ['repeatpassword'],\r\n"
                },
                {
                    "date": 1724805718871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,124 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t).optional()\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1724805747944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n \t\t\t.string()\r\n \t\t\t.refine(\r\n \t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n \t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t).optional()\r\n+\t\t\t)\r\n \t})\r\n \t.refine((data) => data.password === data.repeatpassword, {\r\n \t\tmessage: 'Las contraseñas no coinciden',\r\n \t\tpath: ['repeatpassword'],\r\n@@ -121,128 +121,4 @@\n \t\tdefault:\r\n \t\t\treturn ScheduleAppointmentSchema;\r\n \t}\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t).optional()\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n"
                },
                {
                    "date": 1724879520274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n \t\t\t.string()\r\n \t\t\t.refine(\r\n \t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n \t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n+\t\t\t),\r\n \t})\r\n \t.refine((data) => data.password === data.repeatpassword, {\r\n \t\tmessage: 'Las contraseñas no coinciden',\r\n \t\tpath: ['repeatpassword'],\r\n@@ -121,4 +121,12 @@\n \t\tdefault:\r\n \t\t\treturn ScheduleAppointmentSchema;\r\n \t}\r\n }\r\n+\r\n+export function getRegisterUser(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'campaign':\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1724879634759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'campaign':\r\n+\t\t\treturn;\r\n+\t\tdefault:\r\n+\t\t\treturn userFormValidation;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1724879745105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'campaign':\r\n+\t\t\treturn;\r\n+\t\tdefault:\r\n+\t\t\treturn userFormValidation;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1724879756324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,156 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'campaign':\r\n+\t\t\treturn;\r\n+\t\tdefault:\r\n+\t\t\treturn userFormValidation;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1724880952379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,156 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'campaign':\r\n+\t\t\treturn userFormCampaignValidation;\r\n+\t\tdefault:\r\n+\t\t\treturn userFormValidation;\r\n+\t}\r\n+}\r\n"
                },
                {
                    "date": 1724892010929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,170 +17,20 @@\n \t\t\t.refine((password) => /[0-9]/.test(password), {\r\n \t\t\t\tmessage: 'Debe tener al menos un número',\r\n \t\t\t}),\r\n \t\trepeatpassword: z.string(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n \t\tphone: z\r\n \t\t\t.string()\r\n \t\t\t.refine(\r\n \t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n \t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n+\t\t\t).optional()\r\n \t})\r\n \t.refine((data) => data.password === data.repeatpassword, {\r\n \t\tmessage: 'Las contraseñas no coinciden',\r\n \t\tpath: ['repeatpassword'],\r\n \t});\r\n \r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'campaign':\r\n-\t\t\treturn userFormCampaignValidation;\r\n-\t\tdefault:\r\n-\t\t\treturn userFormValidation;\r\n-\t}\r\n-}\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n export const userFormCampaignValidation = z\r\n \t.object({\r\n \t\tname: z\r\n \t\t\t.string()\r\n@@ -304,455 +154,9 @@\n \r\n export function getRegisterUser(type: string) {\r\n \tswitch (type) {\r\n \t\tcase 'campaign':\r\n-\t\t\treturn;\r\n+\t\t\treturn userFormCampaignValidation;\r\n \t\tdefault:\r\n \t\t\treturn userFormValidation;\r\n \t}\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'campaign':\r\n-\t\t\treturn;\r\n-\t\tdefault:\r\n-\t\t\treturn userFormValidation;\r\n-\t}\r\n-}\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'campaign':\r\n-\t\t\treturn;\r\n-\t\tdefault:\r\n-\t\t\treturn userFormValidation;\r\n-\t}\r\n-}\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'campaign':\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n"
                },
                {
                    "date": 1724892223444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,158 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1724892239449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,169 +152,7 @@\n \t\t\treturn ScheduleAppointmentSchema;\r\n \t}\r\n }\r\n \r\n-export function getRegisterUser(type: string) {\r\n+export function getRegisterUser(type?: string) {\r\n \treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t).optional()\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'campaign':\r\n-\t\t\treturn userFormCampaignValidation;\r\n-\t\tdefault:\r\n-\t\t\treturn userFormValidation;\r\n-\t}\r\n-}\r\n"
                },
                {
                    "date": 1726522438442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,8 +122,9 @@\n \tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n \tschedule: z.coerce.date(),\r\n \taditionalInfo: z.string().optional(),\r\n \tcancellationReason: z.string().optional(),\r\n+\tidentificationDocument: z.custom<File[]>().optional(),\r\n });\r\n \r\n export const ScheduleAppointmentSchema = z.object({\r\n \tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n"
                },
                {
                    "date": 1726525946252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,8 +130,9 @@\n \tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n \tschedule: z.coerce.date(),\r\n \taditionalInfo: z.string().optional(),\r\n \tcancellationReason: z.string().optional(),\r\n+\tidentificationDocument: z.custom<File[]>().optional(),\r\n });\r\n \r\n export const CancelAppointmentSchema = z.object({\r\n \tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n@@ -140,8 +141,9 @@\n \tcancellationReason: z\r\n \t\t.string()\r\n \t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n \t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tidentificationDocument: z.custom<File[]>().optional(),\r\n });\r\n \r\n export function getAppointmentSchema(type: string) {\r\n \tswitch (type) {\r\n"
                },
                {
                    "date": 1726525960664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,17 +122,17 @@\n \tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n \tschedule: z.coerce.date(),\r\n \taditionalInfo: z.string().optional(),\r\n \tcancellationReason: z.string().optional(),\r\n-\tidentificationDocument: z.custom<File[]>().optional(),\r\n+\tvoucherImage: z.custom<File[]>().optional(),\r\n });\r\n \r\n export const ScheduleAppointmentSchema = z.object({\r\n \tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n \tschedule: z.coerce.date(),\r\n \taditionalInfo: z.string().optional(),\r\n \tcancellationReason: z.string().optional(),\r\n-\tidentificationDocument: z.custom<File[]>().optional(),\r\n+\tvoucherImage: z.custom<File[]>().optional(),\r\n });\r\n \r\n export const CancelAppointmentSchema = z.object({\r\n \tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n@@ -141,9 +141,9 @@\n \tcancellationReason: z\r\n \t\t.string()\r\n \t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n \t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tidentificationDocument: z.custom<File[]>().optional(),\r\n+\tvoucherImage: z.custom<File[]>().optional(),\r\n });\r\n \r\n export function getAppointmentSchema(type: string) {\r\n \tswitch (type) {\r\n"
                },
                {
                    "date": 1726525985191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n \tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n \tschedule: z.coerce.date(),\r\n \taditionalInfo: z.string().optional(),\r\n \tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n });\r\n \r\n export const ScheduleAppointmentSchema = z.object({\r\n \tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n"
                },
                {
                    "date": 1726534022306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,9 @@\n \tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n \tschedule: z.coerce.date(),\r\n \taditionalInfo: z.string().optional(),\r\n \tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n });\r\n \r\n export const CancelAppointmentSchema = z.object({\r\n \tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n@@ -141,9 +141,9 @@\n \tcancellationReason: z\r\n \t\t.string()\r\n \t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n \t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n });\r\n \r\n export function getAppointmentSchema(type: string) {\r\n \tswitch (type) {\r\n"
                },
                {
                    "date": 1726535324906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,14 +117,28 @@\n \t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n \t\t}),\r\n });\r\n \r\n+const MAX_FILE_SIZE = 5000000;\r\n+const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+\r\n export const CreateAppointmentSchema = z.object({\r\n \tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n \tschedule: z.coerce.date(),\r\n \taditionalInfo: z.string().optional(),\r\n \tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((file) => file?.size <= MAX_FILE_SIZE, `Max image size is 5MB.`)\r\n+\t\t.refine(\r\n+\t\t\t(file) => ACCEPTED_IMAGE_TYPES.includes(file?.type),\r\n+\t\t\t'Only .jpg, .jpeg, .png and .webp formats are supported.'\r\n+\t\t),\r\n });\r\n \r\n export const ScheduleAppointmentSchema = z.object({\r\n \tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n"
                },
                {
                    "date": 1726612709196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,12 +132,12 @@\n \taditionalInfo: z.string().optional(),\r\n \tcancellationReason: z.string().optional(),\r\n \tvoucherImage: z\r\n \t\t.any()\r\n-\t\t.refine((file) => file?.size <= MAX_FILE_SIZE, `Max image size is 5MB.`)\r\n+\t\t.refine((file) => file?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n \t\t.refine(\r\n \t\t\t(file) => ACCEPTED_IMAGE_TYPES.includes(file?.type),\r\n-\t\t\t'Only .jpg, .jpeg, .png and .webp formats are supported.'\r\n+\t\t\t'Solo son soportados los formatos .jpg, .jpeg, .png and .webp'\r\n \t\t),\r\n });\r\n \r\n export const ScheduleAppointmentSchema = z.object({\r\n"
                },
                {
                    "date": 1726705411893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n \tschedule: z.coerce.date(),\r\n \taditionalInfo: z.string().optional(),\r\n \tcancellationReason: z.string().optional(),\r\n \tvoucherImage: z\r\n-\t\t.any()\r\n+\t\t.instanceof(File)\r\n \t\t.refine((file) => file?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n \t\t.refine(\r\n \t\t\t(file) => ACCEPTED_IMAGE_TYPES.includes(file?.type),\r\n \t\t\t'Solo son soportados los formatos .jpg, .jpeg, .png and .webp'\r\n"
                },
                {
                    "date": 1726705540687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,10 +130,10 @@\n \tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n \tschedule: z.coerce.date(),\r\n \taditionalInfo: z.string().optional(),\r\n \tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.instanceof(File)\r\n+\tvoucherImage: z.any()\r\n+\t\t.refine((files) => files?.length == 1, \"Image is required.\")\r\n \t\t.refine((file) => file?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n \t\t.refine(\r\n \t\t\t(file) => ACCEPTED_IMAGE_TYPES.includes(file?.type),\r\n \t\t\t'Solo son soportados los formatos .jpg, .jpeg, .png and .webp'\r\n"
                },
                {
                    "date": 1726705559308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n \tschedule: z.coerce.date(),\r\n \taditionalInfo: z.string().optional(),\r\n \tcancellationReason: z.string().optional(),\r\n \tvoucherImage: z.any()\r\n-\t\t.refine((files) => files?.length == 1, \"Image is required.\")\r\n+\t\t.refine((files) => files?.length == 1, \"Porfavor suba un archivo.\")\r\n \t\t.refine((file) => file?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n \t\t.refine(\r\n \t\t\t(file) => ACCEPTED_IMAGE_TYPES.includes(file?.type),\r\n \t\t\t'Solo son soportados los formatos .jpg, .jpeg, .png and .webp'\r\n"
                },
                {
                    "date": 1726705570180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n \tschedule: z.coerce.date(),\r\n \taditionalInfo: z.string().optional(),\r\n \tcancellationReason: z.string().optional(),\r\n \tvoucherImage: z.any()\r\n-\t\t.refine((files) => files?.length == 1, \"Porfavor suba un archivo.\")\r\n+\t\t.refine((files) => files?.length == 1, \"Porfavor la imagen de su deposito.\")\r\n \t\t.refine((file) => file?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n \t\t.refine(\r\n \t\t\t(file) => ACCEPTED_IMAGE_TYPES.includes(file?.type),\r\n \t\t\t'Solo son soportados los formatos .jpg, .jpeg, .png and .webp'\r\n"
                },
                {
                    "date": 1726705598237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n \tschedule: z.coerce.date(),\r\n \taditionalInfo: z.string().optional(),\r\n \tcancellationReason: z.string().optional(),\r\n \tvoucherImage: z.any()\r\n-\t\t.refine((files) => files?.length == 1, \"Porfavor la imagen de su deposito.\")\r\n+\t\t.refine((files) => files?.length == 1, \"Porfavor adjuntar la imagen de su deposito.\")\r\n \t\t.refine((file) => file?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n \t\t.refine(\r\n \t\t\t(file) => ACCEPTED_IMAGE_TYPES.includes(file?.type),\r\n \t\t\t'Solo son soportados los formatos .jpg, .jpeg, .png and .webp'\r\n"
                },
                {
                    "date": 1726727184130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n \tschedule: z.coerce.date(),\r\n \taditionalInfo: z.string().optional(),\r\n \tcancellationReason: z.string().optional(),\r\n \tvoucherImage: z.any()\r\n-\t\t.refine((files) => files?.length == 1, \"Porfavor adjuntar la imagen de su deposito.\")\r\n+\t\t.refine((files) => files?.length == 1, \"Adjuntar la imagen de su deposito.\")\r\n \t\t.refine((file) => file?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n \t\t.refine(\r\n \t\t\t(file) => ACCEPTED_IMAGE_TYPES.includes(file?.type),\r\n \t\t\t'Solo son soportados los formatos .jpg, .jpeg, .png and .webp'\r\n"
                },
                {
                    "date": 1726729550202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+const MAX_FILE_SIZE = 50000000;\r\n+const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.any()\r\n+\t\t.refine((files) => files?.length == 1, \"Adjuntar la imagen de su deposito.\")\r\n+\t\t.refine((file) => file?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n+\t\t.refine(\r\n+\t\t\t(file) => ACCEPTED_IMAGE_TYPES.includes(file?.type),\r\n+\t\t\t'Solo son soportados los formatos .jpg, .jpeg, .png and .webp'\r\n+\t\t),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1726730975413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+const MAX_FILE_SIZE = 5000000;\r\n+const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.any()\r\n+\t\t.refine((files) => files?.length == 1, \"Adjuntar la imagen de su deposito.\")\r\n+\t\t.refine((file) => file?.size >= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n+\t\t.refine(\r\n+\t\t\t(file) => ACCEPTED_IMAGE_TYPES.includes(file?.type),\r\n+\t\t\t'Solo son soportados los formatos .jpg, .jpeg, .png and .webp'\r\n+\t\t),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1726730985245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+const MAX_FILE_SIZE = 50000;\r\n+const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.any()\r\n+\t\t.refine((files) => files?.length == 1, \"Adjuntar la imagen de su deposito.\")\r\n+\t\t.refine((file) => file?.size >= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n+\t\t.refine(\r\n+\t\t\t(file) => ACCEPTED_IMAGE_TYPES.includes(file?.type),\r\n+\t\t\t'Solo son soportados los formatos .jpg, .jpeg, .png and .webp'\r\n+\t\t),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1726730992334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+const MAX_FILE_SIZE = 5000;\r\n+const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.any()\r\n+\t\t.refine((files) => files?.length == 1, \"Adjuntar la imagen de su deposito.\")\r\n+\t\t.refine((file) => file?.size >= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n+\t\t.refine(\r\n+\t\t\t(file) => ACCEPTED_IMAGE_TYPES.includes(file?.type),\r\n+\t\t\t'Solo son soportados los formatos .jpg, .jpeg, .png and .webp'\r\n+\t\t),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1726731060259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,358 +117,8 @@\n \t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n \t\t}),\r\n });\r\n \r\n-const MAX_FILE_SIZE = 5000;\r\n-const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.any()\r\n-\t\t.refine((files) => files?.length == 1, \"Adjuntar la imagen de su deposito.\")\r\n-\t\t.refine((file) => file?.size >= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n-\t\t.refine(\r\n-\t\t\t(file) => ACCEPTED_IMAGE_TYPES.includes(file?.type),\r\n-\t\t\t'Solo son soportados los formatos .jpg, .jpeg, .png and .webp'\r\n-\t\t),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-const MAX_FILE_SIZE = 50000;\r\n-const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.any()\r\n-\t\t.refine((files) => files?.length == 1, \"Adjuntar la imagen de su deposito.\")\r\n-\t\t.refine((file) => file?.size >= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n-\t\t.refine(\r\n-\t\t\t(file) => ACCEPTED_IMAGE_TYPES.includes(file?.type),\r\n-\t\t\t'Solo son soportados los formatos .jpg, .jpeg, .png and .webp'\r\n-\t\t),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n const MAX_FILE_SIZE = 5000000;\r\n const ACCEPTED_IMAGE_TYPES = [\r\n \t'image/jpeg',\r\n \t'image/jpg',\r\n@@ -522,354 +172,4 @@\n \r\n export function getRegisterUser(type?: string) {\r\n \treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-const MAX_FILE_SIZE = 50000000;\r\n-const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.any()\r\n-\t\t.refine((files) => files?.length == 1, \"Adjuntar la imagen de su deposito.\")\r\n-\t\t.refine((file) => file?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n-\t\t.refine(\r\n-\t\t\t(file) => ACCEPTED_IMAGE_TYPES.includes(file?.type),\r\n-\t\t\t'Solo son soportados los formatos .jpg, .jpeg, .png and .webp'\r\n-\t\t),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-const MAX_FILE_SIZE = 5000000;\r\n-const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.any()\r\n-\t\t.refine((files) => files?.length == 1, \"Adjuntar la imagen de su deposito.\")\r\n-\t\t.refine((file) => file?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n-\t\t.refine(\r\n-\t\t\t(file) => ACCEPTED_IMAGE_TYPES.includes(file?.type),\r\n-\t\t\t'Solo son soportados los formatos .jpg, .jpeg, .png and .webp'\r\n-\t\t),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n"
                },
                {
                    "date": 1726731075832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+const MAX_FILE_SIZE = 5000000;\r\n+const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((file) => file?.size >= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n+\t\t.refine(\r\n+\t\t\t(files) => ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type),\r\n+\t\t\t'.jpg, .jpeg, .png and .webp files are accepted.'\r\n+\t\t),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1726731084714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+const MAX_FILE_SIZE = 5000000;\r\n+const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((file) => file?.size >= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n+\t\t.refine(\r\n+\t\t\t(files) => ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type),\r\n+\t\t\t'.jpg, .jpeg, .png and .webp files are accepted.'\r\n+\t\t),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1726731123800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,187 +132,14 @@\n \taditionalInfo: z.string().optional(),\r\n \tcancellationReason: z.string().optional(),\r\n \tvoucherImage: z\r\n \t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((file) => file?.size >= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n+\t\t.refine((files) => files?.length === 0, 'Image is required.') // if no file files?.length === 0, if file files?.length === 1\r\n \t\t.refine(\r\n-\t\t\t(files) => ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type),\r\n-\t\t\t'.jpg, .jpeg, .png and .webp files are accepted.'\r\n-\t\t),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n+\t\t\t(files) => files?.[0]?.size >= MAX_FILE_SIZE,\r\n+\t\t\t`Max file size is 5MB.`\r\n+\t\t) // this should be greater than or equals (>=) not less that or equals (<=)\r\n \t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-const MAX_FILE_SIZE = 5000000;\r\n-const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((file) => file?.size >= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n-\t\t.refine(\r\n \t\t\t(files) => ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type),\r\n \t\t\t'.jpg, .jpeg, .png and .webp files are accepted.'\r\n \t\t),\r\n });\r\n@@ -349,179 +176,4 @@\n \r\n export function getRegisterUser(type?: string) {\r\n \treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-const MAX_FILE_SIZE = 5000000;\r\n-const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.any()\r\n-\t\t.refine((files) => files?.length == 1, \"Adjuntar la imagen de su deposito.\")\r\n-\t\t.refine((file) => file?.size >= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n-\t\t.refine(\r\n-\t\t\t(file) => ACCEPTED_IMAGE_TYPES.includes(file?.type),\r\n-\t\t\t'Solo son soportados los formatos .jpg, .jpeg, .png and .webp'\r\n-\t\t),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n"
                },
                {
                    "date": 1726731957865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,14 +132,11 @@\n \taditionalInfo: z.string().optional(),\r\n \tcancellationReason: z.string().optional(),\r\n \tvoucherImage: z\r\n \t\t.any()\r\n-\t\t.refine((files) => files?.length === 0, 'Image is required.') // if no file files?.length === 0, if file files?.length === 1\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((file) => file?.size >= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n \t\t.refine(\r\n-\t\t\t(files) => files?.[0]?.size >= MAX_FILE_SIZE,\r\n-\t\t\t`Max file size is 5MB.`\r\n-\t\t) // this should be greater than or equals (>=) not less that or equals (<=)\r\n-\t\t.refine(\r\n \t\t\t(files) => ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type),\r\n \t\t\t'.jpg, .jpeg, .png and .webp files are accepted.'\r\n \t\t),\r\n });\r\n"
                },
                {
                    "date": 1726734635398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n \tcancellationReason: z.string().optional(),\r\n \tvoucherImage: z\r\n \t\t.any()\r\n \t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((file) => file?.size >= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n+\t\t.refine((file) => file?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n \t\t.refine(\r\n \t\t\t(files) => ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type),\r\n \t\t\t'.jpg, .jpeg, .png and .webp files are accepted.'\r\n \t\t),\r\n"
                },
                {
                    "date": 1726734666818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+const MAX_FILE_SIZE = 5000000;\r\n+const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((file) => file?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n+\t\t.refine(\r\n+\t\t\t(files) => ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type),\r\n+\t\t\t'.jpg, .jpeg, .png and .webp files are accepted.'\r\n+\t\t),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1726734678365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+const MAX_FILE_SIZE = 500;\r\n+const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((file) => file?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n+\t\t.refine(\r\n+\t\t\t(files) => ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type),\r\n+\t\t\t'.jpg, .jpeg, .png and .webp files are accepted.'\r\n+\t\t),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1726734769101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+const MAX_FILE_SIZE = 500;\r\n+const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => files?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n+\t\t.refine(\r\n+\t\t\t(files) => ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type),\r\n+\t\t\t'.jpg, .jpeg, .png and .webp files are accepted.'\r\n+\t\t),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1726734806332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n \t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n \t\t}),\r\n });\r\n \r\n-const MAX_FILE_SIZE = 500;\r\n+const MAX_FILE_SIZE = 500000;\r\n const ACCEPTED_IMAGE_TYPES = [\r\n \t'image/jpeg',\r\n \t'image/jpg',\r\n \t'image/png',\r\n@@ -173,532 +173,4 @@\n \r\n export function getRegisterUser(type?: string) {\r\n \treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-const MAX_FILE_SIZE = 500;\r\n-const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((file) => file?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n-\t\t.refine(\r\n-\t\t\t(files) => ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type),\r\n-\t\t\t'.jpg, .jpeg, .png and .webp files are accepted.'\r\n-\t\t),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-const MAX_FILE_SIZE = 5000000;\r\n-const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((file) => file?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n-\t\t.refine(\r\n-\t\t\t(files) => ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type),\r\n-\t\t\t'.jpg, .jpeg, .png and .webp files are accepted.'\r\n-\t\t),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-const MAX_FILE_SIZE = 5000000;\r\n-const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((file) => file?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n-\t\t.refine(\r\n-\t\t\t(files) => ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type),\r\n-\t\t\t'.jpg, .jpeg, .png and .webp files are accepted.'\r\n-\t\t),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n"
                },
                {
                    "date": 1726734829125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+const MAX_FILE_SIZE = 5000000;\r\n+const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => files?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n+\t\t.refine(\r\n+\t\t\t(files) => ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type),\r\n+\t\t\t'.jpg, .jpeg, .png and .webp files are accepted.'\r\n+\t\t),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1726734841350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,180 +173,4 @@\n \r\n export function getRegisterUser(type?: string) {\r\n \treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-const MAX_FILE_SIZE = 500000;\r\n-const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => files?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n-\t\t.refine(\r\n-\t\t\t(files) => ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type),\r\n-\t\t\t'.jpg, .jpeg, .png and .webp files are accepted.'\r\n-\t\t),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n"
                },
                {
                    "date": 1726735283875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+const MAX_FILE_SIZE = 50000000;\r\n+const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => files?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n+\t\t.refine(\r\n+\t\t\t(files) => ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type),\r\n+\t\t\t'.jpg, .jpeg, .png and .webp files are accepted.'\r\n+\t\t),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1726735297340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,184 +117,8 @@\n \t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n \t\t}),\r\n });\r\n \r\n-const MAX_FILE_SIZE = 50000000;\r\n-const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => files?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n-\t\t.refine(\r\n-\t\t\t(files) => ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type),\r\n-\t\t\t'.jpg, .jpeg, .png and .webp files are accepted.'\r\n-\t\t),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n const MAX_FILE_SIZE = 5000000;\r\n const ACCEPTED_IMAGE_TYPES = [\r\n \t'image/jpeg',\r\n \t'image/jpg',\r\n"
                },
                {
                    "date": 1726735306584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n \t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n \t\t}),\r\n });\r\n \r\n-const MAX_FILE_SIZE = 5000000;\r\n+const MAX_FILE_SIZE = 500000;\r\n const ACCEPTED_IMAGE_TYPES = [\r\n \t'image/jpeg',\r\n \t'image/jpg',\r\n \t'image/png',\r\n"
                },
                {
                    "date": 1726735321014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n \t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n \t\t}),\r\n });\r\n \r\n-const MAX_FILE_SIZE = 500000;\r\n+const MAX_FILE_SIZE = 50000;\r\n const ACCEPTED_IMAGE_TYPES = [\r\n \t'image/jpeg',\r\n \t'image/jpg',\r\n \t'image/png',\r\n"
                },
                {
                    "date": 1726735340266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n \t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n \t\t}),\r\n });\r\n \r\n-const MAX_FILE_SIZE = 50000;\r\n+const MAX_FILE_SIZE = 5000000;\r\n const ACCEPTED_IMAGE_TYPES = [\r\n \t'image/jpeg',\r\n \t'image/jpg',\r\n \t'image/png',\r\n"
                },
                {
                    "date": 1726735351721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+const MAX_FILE_SIZE = 5000000;\r\n+const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => files?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n+\t\t.refine(\r\n+\t\t\t(files) => ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type),\r\n+\t\t\t'.jpg, .jpeg, .png and .webp files are accepted.'\r\n+\t\t),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1726735385794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+const MAX_FILE_SIZE = 5000000;\r\n+const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => files?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n+\t\t.refine(\r\n+\t\t\t(files) => ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type),\r\n+\t\t\t'.jpg, .jpeg, .png and .webp files are accepted.'\r\n+\t\t),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1726735400360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n \tcancellationReason: z.string().optional(),\r\n \tvoucherImage: z\r\n \t\t.any()\r\n \t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => files?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n+\t\t.refine((files) => files?.size >= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n \t\t.refine(\r\n \t\t\t(files) => ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type),\r\n \t\t\t'.jpg, .jpeg, .png and .webp files are accepted.'\r\n \t\t),\r\n@@ -173,356 +173,4 @@\n \r\n export function getRegisterUser(type?: string) {\r\n \treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-const MAX_FILE_SIZE = 5000000;\r\n-const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => files?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n-\t\t.refine(\r\n-\t\t\t(files) => ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type),\r\n-\t\t\t'.jpg, .jpeg, .png and .webp files are accepted.'\r\n-\t\t),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-const MAX_FILE_SIZE = 5000000;\r\n-const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => files?.size <= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n-\t\t.refine(\r\n-\t\t\t(files) => ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type),\r\n-\t\t\t'.jpg, .jpeg, .png and .webp files are accepted.'\r\n-\t\t),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n"
                },
                {
                    "date": 1726735418036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,8 @@\n \tcancellationReason: z.string().optional(),\r\n \tvoucherImage: z\r\n \t\t.any()\r\n \t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => files?.size >= MAX_FILE_SIZE, `Tamaño máximo es 5MB.`)\r\n \t\t.refine(\r\n \t\t\t(files) => ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type),\r\n \t\t\t'.jpg, .jpeg, .png and .webp files are accepted.'\r\n \t\t),\r\n"
                },
                {
                    "date": 1726735446142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,12 +133,12 @@\n \tcancellationReason: z.string().optional(),\r\n \tvoucherImage: z\r\n \t\t.any()\r\n \t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine(\r\n-\t\t\t(files) => ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type),\r\n-\t\t\t'.jpg, .jpeg, .png and .webp files are accepted.'\r\n-\t\t),\r\n+\t\t.refine((files) => {\r\n+\t\t\tconsole.log(files);\r\n+\t\t\tACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n+\t\t}, '.jpg, .jpeg, .png and .webp files are accepted.'),\r\n });\r\n \r\n export const ScheduleAppointmentSchema = z.object({\r\n \tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n"
                },
                {
                    "date": 1726735502646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+const MAX_FILE_SIZE = 5000000;\r\n+const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\tconsole.log(files);\r\n+\t\t\tACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n+\t\t}, 'Solo .jpg, .jpeg, .png and .webp son archivos permitidos'),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1726735518105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,9 @@\n \t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n \t\t.refine((files) => {\r\n \t\t\tconsole.log(files);\r\n \t\t\tACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n-\t\t}, 'Solo .jpg, .jpeg, .png and .webp son archivos permitidos'),\r\n+\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n });\r\n \r\n export const ScheduleAppointmentSchema = z.object({\r\n \tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n@@ -172,179 +172,4 @@\n \r\n export function getRegisterUser(type?: string) {\r\n \treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-const MAX_FILE_SIZE = 5000000;\r\n-const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\tconsole.log(files);\r\n-\t\t\tACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n-\t\t}, '.jpg, .jpeg, .png and .webp files are accepted.'),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n"
                },
                {
                    "date": 1726735965516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,11 @@\n \tvoucherImage: z\r\n \t\t.any()\r\n \t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n \t\t.refine((files) => {\r\n-\t\t\tconsole.log(files);\r\n+\t\t\tconsole.log(files, files.size, MAX_FILE_SIZE)\r\n+\t\t}, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n \t\t\tACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n \t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n });\r\n \r\n"
                },
                {
                    "date": 1726736884161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,8 +135,9 @@\n \t\t.any()\r\n \t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n \t\t.refine((files) => {\r\n \t\t\tconsole.log(files, files.size, MAX_FILE_SIZE)\r\n+\t\t\treturn true\r\n \t\t}, 'Adjuntar la imagen de su deposito.')\r\n \t\t.refine((files) => {\r\n \t\t\tACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n \t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n"
                },
                {
                    "date": 1726736892024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n \t\t.any()\r\n \t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n \t\t.refine((files) => {\r\n \t\t\tconsole.log(files, files.size, MAX_FILE_SIZE)\r\n-\t\t\treturn true\r\n+\t\t\treturn false\r\n \t\t}, 'Adjuntar la imagen de su deposito.')\r\n \t\t.refine((files) => {\r\n \t\t\tACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n \t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n"
                },
                {
                    "date": 1726736927468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,178 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+const MAX_FILE_SIZE = 5000000;\r\n+const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\tconsole.log(files, files?.[0]?.type.size, MAX_FILE_SIZE)\r\n+\t\t\treturn false\r\n+\t\t}, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\tACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n+\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1726736934004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,9 @@\n \tvoucherImage: z\r\n \t\t.any()\r\n \t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n \t\t.refine((files) => {\r\n-\t\t\tconsole.log(files, files?.[0]?.type.size, MAX_FILE_SIZE)\r\n+\t\t\tconsole.log(files, files?.[0]?.size, MAX_FILE_SIZE)\r\n \t\t\treturn false\r\n \t\t}, 'Adjuntar la imagen de su deposito.')\r\n \t\t.refine((files) => {\r\n \t\t\tACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n@@ -175,182 +175,4 @@\n \r\n export function getRegisterUser(type?: string) {\r\n \treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-const MAX_FILE_SIZE = 5000000;\r\n-const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\tconsole.log(files, files.size, MAX_FILE_SIZE)\r\n-\t\t\treturn false\r\n-\t\t}, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\tACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n-\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n"
                },
                {
                    "date": 1726736966635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,8 +135,9 @@\n \t\t.any()\r\n \t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n \t\t.refine((files) => {\r\n \t\t\tconsole.log(files, files?.[0]?.size, MAX_FILE_SIZE)\r\n+\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE\r\n \t\t\treturn false\r\n \t\t}, 'Adjuntar la imagen de su deposito.')\r\n \t\t.refine((files) => {\r\n \t\t\tACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n"
                },
                {
                    "date": 1726736988630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n \t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n \t\t}),\r\n });\r\n \r\n-const MAX_FILE_SIZE = 5000000;\r\n+const MAX_FILE_SIZE = 500000;\r\n const ACCEPTED_IMAGE_TYPES = [\r\n \t'image/jpeg',\r\n \t'image/jpg',\r\n \t'image/png',\r\n@@ -134,11 +134,10 @@\n \tvoucherImage: z\r\n \t\t.any()\r\n \t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n \t\t.refine((files) => {\r\n-\t\t\tconsole.log(files, files?.[0]?.size, MAX_FILE_SIZE)\r\n-\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE\r\n-\t\t\treturn false\r\n+\t\t\tconsole.log(files, files?.[0]?.size, MAX_FILE_SIZE);\r\n+\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n \t\t}, 'Adjuntar la imagen de su deposito.')\r\n \t\t.refine((files) => {\r\n \t\t\tACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n \t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n"
                },
                {
                    "date": 1726737028395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,178 @@\n+import { z } from 'zod';\r\n+\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+const MAX_FILE_SIZE = 5000000;\r\n+const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\tconsole.log(files, files?.[0]?.size, MAX_FILE_SIZE);\r\n+\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n+\t\t}, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\tACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n+\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1726737034778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,182 +175,4 @@\n \r\n export function getRegisterUser(type?: string) {\r\n \treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-const MAX_FILE_SIZE = 500000;\r\n-const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\tconsole.log(files, files?.[0]?.size, MAX_FILE_SIZE);\r\n-\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n-\t\t}, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\tACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n-\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n"
                },
                {
                    "date": 1726737124997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import { z } from 'zod';\r\n+const MAX_FILE_SIZE = 5000000;\r\n+const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\tconsole.log(files, files?.[0]?.size, MAX_FILE_SIZE);\r\n+\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n+\t\t}, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\tACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n+\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1726738636770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,8 @@\n \tvoucherImage: z\r\n \t\t.any()\r\n \t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n \t\t.refine((files) => {\r\n-\t\t\tconsole.log(files, files?.[0]?.size, MAX_FILE_SIZE);\r\n \t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n \t\t}, 'Adjuntar la imagen de su deposito.')\r\n \t\t.refine((files) => {\r\n \t\t\tACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n@@ -173,182 +172,4 @@\n \r\n export function getRegisterUser(type?: string) {\r\n \treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n }\r\n-import { z } from 'zod';\r\n-\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-const MAX_FILE_SIZE = 5000000;\r\n-const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\tconsole.log(files, files?.[0]?.size, MAX_FILE_SIZE);\r\n-\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n-\t\t}, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\tACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n-\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n"
                },
                {
                    "date": 1726738871710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import { z } from 'zod';\r\n+const MAX_FILE_SIZE = 5000000;\r\n+export const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n+\t\t}, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\tACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n+\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1726738913408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import { z } from 'zod';\r\n+const MAX_FILE_SIZE = 5000000;\r\n+export const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n+\t\t}, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\tACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n+\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1726740638585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import { z } from 'zod';\r\n+const MAX_FILE_SIZE = 5000000;\r\n+export const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n+\t\t}, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\tACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n+\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1726740652791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n \t\t.refine((files) => {\r\n \t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n \t\t}, 'Adjuntar la imagen de su deposito.')\r\n \t\t.refine((files) => {\r\n-\t\t\tACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n+\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n \t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n });\r\n \r\n export const ScheduleAppointmentSchema = z.object({\r\n@@ -172,529 +172,4 @@\n \r\n export function getRegisterUser(type?: string) {\r\n \treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n }\r\n-import { z } from 'zod';\r\n-const MAX_FILE_SIZE = 5000000;\r\n-export const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n-\t\t}, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\tACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n-\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n-import { z } from 'zod';\r\n-const MAX_FILE_SIZE = 5000000;\r\n-export const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n-\t\t}, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\tACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n-\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n-import { z } from 'zod';\r\n-const MAX_FILE_SIZE = 5000000;\r\n-const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n-\t\t}, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\tACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n-\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n"
                },
                {
                    "date": 1726872129226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,9 @@\n \taditionalInfo: z.string().optional(),\r\n \tcancellationReason: z.string().optional(),\r\n \tvoucherImage: z\r\n \t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n \t\t.refine((files) => {\r\n \t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n \t\t}, 'Adjuntar la imagen de su deposito.')\r\n \t\t.refine((files) => {\r\n"
                },
                {
                    "date": 1727139084357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import { z } from 'zod';\r\n+const MAX_FILE_SIZE = 5000000;\r\n+export const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{9,9}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n+\t\t}, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n+\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1727139117581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import { z } from 'zod';\r\n+const MAX_FILE_SIZE = 5000000;\r\n+export const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{9,11}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n+\t\t}, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n+\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1727140310338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n \t\trepeatpassword: z.string(),\r\n \t\tphone: z\r\n \t\t\t.string()\r\n \t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{9,11}$/.test(phone),\r\n+\t\t\t\t(phone) => /^\\+\\d{10,12}$/.test(phone),\r\n \t\t\t\t'Número de teléfono inválido'\r\n \t\t\t),\r\n \t})\r\n \t.refine((data) => data.password === data.repeatpassword, {\r\n@@ -172,354 +172,4 @@\n \r\n export function getRegisterUser(type?: string) {\r\n \treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n }\r\n-import { z } from 'zod';\r\n-const MAX_FILE_SIZE = 5000000;\r\n-export const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{9,9}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n-\t\t}, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n-\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n-import { z } from 'zod';\r\n-const MAX_FILE_SIZE = 5000000;\r\n-export const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n-\t\t}, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n-\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n"
                },
                {
                    "date": 1727140335440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n \t\trepeatpassword: z.string(),\r\n \t\tphone: z\r\n \t\t\t.string()\r\n \t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,12}$/.test(phone),\r\n+\t\t\t\t(phone) => /^\\+\\d{9,12}$/.test(phone),\r\n \t\t\t\t'Número de teléfono inválido'\r\n \t\t\t),\r\n \t})\r\n \t.refine((data) => data.password === data.repeatpassword, {\r\n"
                },
                {
                    "date": 1727216130157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n \t\trepeatpassword: z.string(),\r\n \t\tphone: z\r\n \t\t\t.string()\r\n \t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{9,12}$/.test(phone),\r\n+\t\t\t\t(phone) => /^\\+\\d{9,9}$/.test(phone),\r\n \t\t\t\t'Número de teléfono inválido'\r\n \t\t\t),\r\n \t})\r\n \t.refine((data) => data.password === data.repeatpassword, {\r\n"
                },
                {
                    "date": 1727216498727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n \t\trepeatpassword: z.string(),\r\n \t\tphone: z\r\n \t\t\t.string()\r\n \t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{9,9}$/.test(phone),\r\n+\t\t\t\t(phone) => /^\\+\\d{8,10}$/.test(phone),\r\n \t\t\t\t'Número de teléfono inválido'\r\n \t\t\t),\r\n \t})\r\n \t.refine((data) => data.password === data.repeatpassword, {\r\n"
                },
                {
                    "date": 1727216982725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import { z } from 'zod';\r\n+const MAX_FILE_SIZE = 5000000;\r\n+export const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{9,12}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n+\t\t}, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n+\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1727217588922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import { z } from 'zod';\r\n+const MAX_FILE_SIZE = 5000000;\r\n+export const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{9,12}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n+\t\t}, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n+\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1727217708957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n \t\trepeatpassword: z.string(),\r\n \t\tphone: z\r\n \t\t\t.string()\r\n \t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t(phone) => /^\\+\\d{9,15}$/.test(phone),\r\n \t\t\t\t'Número de teléfono inválido'\r\n \t\t\t)\r\n \t\t\t.optional(),\r\n \t})\r\n@@ -172,354 +172,4 @@\n \r\n export function getRegisterUser(type?: string) {\r\n \treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n }\r\n-import { z } from 'zod';\r\n-const MAX_FILE_SIZE = 5000000;\r\n-export const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{9,12}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n-\t\t}, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n-\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n-import { z } from 'zod';\r\n-const MAX_FILE_SIZE = 5000000;\r\n-export const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{8,10}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n-\t\t}, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n-\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n"
                },
                {
                    "date": 1727217754913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import { z } from 'zod';\r\n+const MAX_FILE_SIZE = 5000000;\r\n+export const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{9,12}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n+\t\t}, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n+\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1727217778473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n \t\trepeatpassword: z.string(),\r\n \t\tphone: z\r\n \t\t\t.string()\r\n \t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{9,12}$/.test(phone),\r\n+\t\t\t\t(phone) => /^\\+\\d{10,12}$/.test(phone),\r\n \t\t\t\t'Número de teléfono inválido'\r\n \t\t\t),\r\n \t})\r\n \t.refine((data) => data.password === data.repeatpassword, {\r\n@@ -172,179 +172,4 @@\n \r\n export function getRegisterUser(type?: string) {\r\n \treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n }\r\n-import { z } from 'zod';\r\n-const MAX_FILE_SIZE = 5000000;\r\n-export const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{9,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{9,12}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n-\t\t}, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n-\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n"
                },
                {
                    "date": 1727217803667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+import { z } from 'zod';\r\n+const MAX_FILE_SIZE = 5000000;\r\n+export const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{11,12}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n+\t\t}, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n+\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1727217826255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,12 @@\n \t\trepeatpassword: z.string(),\r\n \t\tphone: z\r\n \t\t\t.string()\r\n \t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{11,12}$/.test(phone),\r\n+\t\t\t\t(phone) =>{\r\n+\t\t\t\t\tconsole.log(phone)\r\n+\t\t\t\t\treturn /^\\+\\d{11,12}$/.test(phone)\r\n+\t\t\t\t} ,\r\n \t\t\t\t'Número de teléfono inválido'\r\n \t\t\t),\r\n \t})\r\n \t.refine((data) => data.password === data.repeatpassword, {\r\n@@ -172,179 +175,4 @@\n \r\n export function getRegisterUser(type?: string) {\r\n \treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n }\r\n-import { z } from 'zod';\r\n-const MAX_FILE_SIZE = 5000000;\r\n-export const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,12}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n-\t\t}, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n-\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n"
                },
                {
                    "date": 1727217954068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,178 @@\n+import { z } from 'zod';\r\n+const MAX_FILE_SIZE = 5000000;\r\n+export const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) =>{\r\n+\t\t\t\t\tconsole.log(phone)\r\n+\t\t\t\t\treturn /^\\+\\d{11,12}$/.test(phone)\r\n+\t\t\t\t} ,\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n+\t\t}, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n+\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1727217962780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,178 @@\n+import { z } from 'zod';\r\n+const MAX_FILE_SIZE = 5000000;\r\n+export const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) =>{\r\n+\t\t\t\t\tconsole.log(phone)\r\n+\t\t\t\t\treturn /^\\+\\d{11,12}$/.test(phone)\r\n+\t\t\t\t} ,\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n+\t\t}, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n+\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1727218014848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,178 @@\n+import { z } from 'zod';\r\n+const MAX_FILE_SIZE = 5000000;\r\n+export const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) =>{\r\n+\t\t\t\t\tconsole.log(phone)\r\n+\t\t\t\t\treturn /^\\+\\d{11,12}$/.test(phone)\r\n+\t\t\t\t} ,\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n+\t\t}, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n+\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1727219074918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,178 @@\n+import { z } from 'zod';\r\n+const MAX_FILE_SIZE = 5000000;\r\n+export const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) =>{ \r\n+\t\t\t\t\tconsole.log(phone) \r\n+\t\t\t\t\treturn /^\\+\\d{11,12}$/.test(phone)\r\n+\t\t\t\t} ,\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n+\t\t}, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n+\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1727219086576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,178 @@\n+import { z } from 'zod';\r\n+const MAX_FILE_SIZE = 5000000;\r\n+export const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválidsado'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) =>{ \r\n+\t\t\t\t\tconsole.log(phone) \r\n+\t\t\t\t\treturn /^\\+\\d{11,12}$/.test(phone)\r\n+\t\t\t\t} ,\r\n+\t\t\t\t'Número de teléfono inválido'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n+\t\t}, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n+\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1727219195786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,178 @@\n+import { z } from 'zod';\r\n+const MAX_FILE_SIZE = 5000000;\r\n+export const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválidsado'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) =>{ \r\n+\t\t\t\t\tconsole.log(phone) \r\n+\t\t\t\t\treturn /^\\d{9,9}$/.test(phone)\r\n+\t\t\t\t} ,\r\n+\t\t\t\t'Número de teléfono inválidso'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n+\t\t}, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n+\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1727219366948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,178 @@\n+import { z } from 'zod';\r\n+const MAX_FILE_SIZE = 5000000;\r\n+export const ACCEPTED_IMAGE_TYPES = [\r\n+\t'image/jpeg',\r\n+\t'image/jpg',\r\n+\t'image/png',\r\n+\t'image/webp',\r\n+];\r\n+export const userFormValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\temail: z.string().email('Debe ser un correo válido.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t'Número de teléfono inválidsado'\r\n+\t\t\t)\r\n+\t\t\t.optional(),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userFormCampaignValidation = z\r\n+\t.object({\r\n+\t\tname: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n+\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n+\t\tpassword: z\r\n+\t\t\t.string()\r\n+\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n+\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n+\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n+\t\t\t})\r\n+\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n+\t\t\t\tmessage: 'Debe tener al menos un número',\r\n+\t\t\t}),\r\n+\t\trepeatpassword: z.string(),\r\n+\t\tphone: z\r\n+\t\t\t.string()\r\n+\t\t\t.refine(\r\n+\t\t\t\t(phone) =>{ \r\n+\t\t\t\t\tconsole.log(phone) \r\n+\t\t\t\t\treturn /^9\\d{8}$/.test(phone)\r\n+\t\t\t\t} ,\r\n+\t\t\t\t'Número de teléfono inválidso'\r\n+\t\t\t),\r\n+\t})\r\n+\t.refine((data) => data.password === data.repeatpassword, {\r\n+\t\tmessage: 'Las contraseñas no coinciden',\r\n+\t\tpath: ['repeatpassword'],\r\n+\t});\r\n+\r\n+export const userLoginFormValidation = z.object({\r\n+\temail: z.string().email('Debe ser un correo válido.'),\r\n+\tpassword: z.string(),\r\n+});\r\n+\r\n+export const PatientFormValidation = z.object({\r\n+\tuserId: z.string(),\r\n+\tname: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n+\temail: z.string().email('Ingrese un correo válido'),\r\n+\tphone: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t'Número de teléfono inválido'\r\n+\t\t),\r\n+\tbirthDate: z.coerce.date(),\r\n+\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n+\tgender: z.enum(['male', 'female', 'other']),\r\n+\ttype: z.enum(['adult', 'child']),\r\n+\treligion: z.string().or(z.literal('')),\r\n+\tplaceOfBirth: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n+\tacademicGrade: z.string(),\r\n+\tidentificationType: z.string(),\r\n+\tidentificationNumber: z\r\n+\t\t.string()\r\n+\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n+\taddress: z\r\n+\t\t.string()\r\n+\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n+\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n+\toccupation: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n+\t\t.or(z.literal('')),\r\n+\temergencyContactName: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n+\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n+\temergencyContactNumber: z\r\n+\t\t.string()\r\n+\t\t.refine(\r\n+\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n+\t\t),\r\n+\tprivacyConsent: z\r\n+\t\t.boolean()\r\n+\t\t.default(false)\r\n+\t\t.refine((value) => value === true, {\r\n+\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n+\t\t}),\r\n+});\r\n+\r\n+export const CreateAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z\r\n+\t\t.any()\r\n+\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n+\t\t}, 'Adjuntar la imagen de su deposito.')\r\n+\t\t.refine((files) => {\r\n+\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n+\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n+});\r\n+\r\n+export const ScheduleAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z.string().optional(),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export const CancelAppointmentSchema = z.object({\r\n+\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n+\tschedule: z.coerce.date(),\r\n+\taditionalInfo: z.string().optional(),\r\n+\tcancellationReason: z\r\n+\t\t.string()\r\n+\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n+\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n+\tvoucherImage: z.custom<File[]>(),\r\n+});\r\n+\r\n+export function getAppointmentSchema(type: string) {\r\n+\tswitch (type) {\r\n+\t\tcase 'create':\r\n+\t\t\treturn CreateAppointmentSchema;\r\n+\t\tcase 'cancel':\r\n+\t\t\treturn CancelAppointmentSchema;\r\n+\t\tdefault:\r\n+\t\t\treturn ScheduleAppointmentSchema;\r\n+\t}\r\n+}\r\n+\r\n+export function getRegisterUser(type?: string) {\r\n+\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n+}\r\n"
                },
                {
                    "date": 1727219406468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n \t\trepeatpassword: z.string(),\r\n \t\tphone: z\r\n \t\t\t.string()\r\n \t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t\t(phone) => /^9\\d{8}$/.test(phone),\r\n \t\t\t\t'Número de teléfono inválidsado'\r\n \t\t\t)\r\n \t\t\t.optional(),\r\n \t})\r\n@@ -83,9 +83,9 @@\n \temail: z.string().email('Ingrese un correo válido'),\r\n \tphone: z\r\n \t\t.string()\r\n \t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n+\t\t\t(phone) => /^9\\d{8}$/.test(phone),\r\n \t\t\t'Número de teléfono inválido'\r\n \t\t),\r\n \tbirthDate: z.coerce.date(),\r\n \tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n@@ -115,9 +115,9 @@\n \t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n \temergencyContactNumber: z\r\n \t\t.string()\r\n \t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n+\t\t\t(emergencyContactNumber) => /^9\\d{8}$/.test(emergencyContactNumber),\r\n \t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n \t\t),\r\n \tprivacyConsent: z\r\n \t\t.boolean()\r\n@@ -175,1250 +175,4 @@\n \r\n export function getRegisterUser(type?: string) {\r\n \treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n }\r\n-import { z } from 'zod';\r\n-const MAX_FILE_SIZE = 5000000;\r\n-export const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválidsado'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) =>{ \r\n-\t\t\t\t\tconsole.log(phone) \r\n-\t\t\t\t\treturn /^\\d{9,9}$/.test(phone)\r\n-\t\t\t\t} ,\r\n-\t\t\t\t'Número de teléfono inválidso'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n-\t\t}, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n-\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n-import { z } from 'zod';\r\n-const MAX_FILE_SIZE = 5000000;\r\n-export const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválidsado'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) =>{ \r\n-\t\t\t\t\tconsole.log(phone) \r\n-\t\t\t\t\treturn /^\\+\\d{11,12}$/.test(phone)\r\n-\t\t\t\t} ,\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n-\t\t}, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n-\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n-import { z } from 'zod';\r\n-const MAX_FILE_SIZE = 5000000;\r\n-export const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) =>{ \r\n-\t\t\t\t\tconsole.log(phone) \r\n-\t\t\t\t\treturn /^\\+\\d{11,12}$/.test(phone)\r\n-\t\t\t\t} ,\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n-\t\t}, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n-\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n-import { z } from 'zod';\r\n-const MAX_FILE_SIZE = 5000000;\r\n-export const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) =>{\r\n-\t\t\t\t\tconsole.log(phone)\r\n-\t\t\t\t\treturn /^\\+\\d{11,12}$/.test(phone)\r\n-\t\t\t\t} ,\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n-\t\t}, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n-\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n-import { z } from 'zod';\r\n-const MAX_FILE_SIZE = 5000000;\r\n-export const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) =>{\r\n-\t\t\t\t\tconsole.log(phone)\r\n-\t\t\t\t\treturn /^\\+\\d{11,12}$/.test(phone)\r\n-\t\t\t\t} ,\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n-\t\t}, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n-\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n-import { z } from 'zod';\r\n-const MAX_FILE_SIZE = 5000000;\r\n-export const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) =>{\r\n-\t\t\t\t\tconsole.log(phone)\r\n-\t\t\t\t\treturn /^\\+\\d{11,12}$/.test(phone)\r\n-\t\t\t\t} ,\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n-\t\t}, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n-\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n-import { z } from 'zod';\r\n-const MAX_FILE_SIZE = 5000000;\r\n-export const ACCEPTED_IMAGE_TYPES = [\r\n-\t'image/jpeg',\r\n-\t'image/jpg',\r\n-\t'image/png',\r\n-\t'image/webp',\r\n-];\r\n-export const userFormValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\temail: z.string().email('Debe ser un correo válido.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t)\r\n-\t\t\t.optional(),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userFormCampaignValidation = z\r\n-\t.object({\r\n-\t\tname: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n-\t\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n-\t\tpassword: z\r\n-\t\t\t.string()\r\n-\t\t\t.min(8, { message: 'Debe tener minimo 8 caracteres.' })\r\n-\t\t\t.max(15, { message: 'Debe tener máximo 15 caracteres.' })\r\n-\t\t\t.refine((password) => /[A-Z]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos una Mayúscula.',\r\n-\t\t\t})\r\n-\t\t\t.refine((password) => /[0-9]/.test(password), {\r\n-\t\t\t\tmessage: 'Debe tener al menos un número',\r\n-\t\t\t}),\r\n-\t\trepeatpassword: z.string(),\r\n-\t\tphone: z\r\n-\t\t\t.string()\r\n-\t\t\t.refine(\r\n-\t\t\t\t(phone) =>{\r\n-\t\t\t\t\tconsole.log(phone)\r\n-\t\t\t\t\treturn /^\\+\\d{11,12}$/.test(phone)\r\n-\t\t\t\t} ,\r\n-\t\t\t\t'Número de teléfono inválido'\r\n-\t\t\t),\r\n-\t})\r\n-\t.refine((data) => data.password === data.repeatpassword, {\r\n-\t\tmessage: 'Las contraseñas no coinciden',\r\n-\t\tpath: ['repeatpassword'],\r\n-\t});\r\n-\r\n-export const userLoginFormValidation = z.object({\r\n-\temail: z.string().email('Debe ser un correo válido.'),\r\n-\tpassword: z.string(),\r\n-});\r\n-\r\n-export const PatientFormValidation = z.object({\r\n-\tuserId: z.string(),\r\n-\tname: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n-\temail: z.string().email('Ingrese un correo válido'),\r\n-\tphone: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n-\t\t\t'Número de teléfono inválido'\r\n-\t\t),\r\n-\tbirthDate: z.coerce.date(),\r\n-\tcivilStatus: z.enum(['single', 'married', 'divorced', 'widowed']),\r\n-\tgender: z.enum(['male', 'female', 'other']),\r\n-\ttype: z.enum(['adult', 'child']),\r\n-\treligion: z.string().or(z.literal('')),\r\n-\tplaceOfBirth: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Lugar de nacimiento debe tener al menos 2 caracteres'),\r\n-\tacademicGrade: z.string(),\r\n-\tidentificationType: z.string(),\r\n-\tidentificationNumber: z\r\n-\t\t.string()\r\n-\t\t.min(8, 'N identificación debe tener al menos 8 dígitos'),\r\n-\taddress: z\r\n-\t\t.string()\r\n-\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n-\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n-\toccupation: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n-\t\t.or(z.literal('')),\r\n-\temergencyContactName: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n-\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n-\temergencyContactNumber: z\r\n-\t\t.string()\r\n-\t\t.refine(\r\n-\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n-\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n-\t\t),\r\n-\tprivacyConsent: z\r\n-\t\t.boolean()\r\n-\t\t.default(false)\r\n-\t\t.refine((value) => value === true, {\r\n-\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n-\t\t}),\r\n-});\r\n-\r\n-export const CreateAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z\r\n-\t\t.any()\r\n-\t\t.refine((files) => files?.length == 1, 'Adjuntar el comprobante del pago realizado.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn files?.[0]?.size <= MAX_FILE_SIZE;\r\n-\t\t}, 'Adjuntar la imagen de su deposito.')\r\n-\t\t.refine((files) => {\r\n-\t\t\treturn ACCEPTED_IMAGE_TYPES.includes(files?.[0]?.type);\r\n-\t\t}, 'Solo .jpg, .jpeg, .png y .webp son archivos permitidos'),\r\n-});\r\n-\r\n-export const ScheduleAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z.string().optional(),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export const CancelAppointmentSchema = z.object({\r\n-\tspecialty: z.string().min(2, 'Seleccione una especialidad'),\r\n-\tschedule: z.coerce.date(),\r\n-\taditionalInfo: z.string().optional(),\r\n-\tcancellationReason: z\r\n-\t\t.string()\r\n-\t\t.min(2, 'motivo de cancelación debe tener al menos 2 caracteres')\r\n-\t\t.max(500, 'motivo de cancelación debe tener menos de 500 caracteres'),\r\n-\tvoucherImage: z.custom<File[]>(),\r\n-});\r\n-\r\n-export function getAppointmentSchema(type: string) {\r\n-\tswitch (type) {\r\n-\t\tcase 'create':\r\n-\t\t\treturn CreateAppointmentSchema;\r\n-\t\tcase 'cancel':\r\n-\t\t\treturn CancelAppointmentSchema;\r\n-\t\tdefault:\r\n-\t\t\treturn ScheduleAppointmentSchema;\r\n-\t}\r\n-}\r\n-\r\n-export function getRegisterUser(type?: string) {\r\n-\treturn type === 'campaign' ? userFormCampaignValidation : userFormValidation;\r\n-}\r\n"
                }
            ],
            "date": 1723500887456,
            "name": "Commit-0",
            "content": "import { z } from 'zod';\r\n\r\nexport const userFormValidation = z.object({\r\n\tname: z\r\n\t\t.string()\r\n\t\t.min(2, 'Debe tener al menos 2 caracteres.')\r\n\t\t.max(50, 'Debe tener menos de 50 caracteres.'),\r\n\temail: z.string().email('Debe ser un correo válido.'),\r\n\tphone: z\r\n\t\t.string()\r\n\t\t.refine(\r\n\t\t\t(phone) => /^\\+[1-9]\\d{1,14}$/.test(phone),\r\n\t\t\t'Número de teléfono inválido.'\r\n\t\t)\r\n});\r\n\r\n\r\nexport const userLoginFormValidation = z.object({\r\n\temail: z.string().email('Debe ser un correo válido.'),\r\n\t\r\n});\r\n\r\n\r\nexport const PatientFormValidation = z.object({\r\n\tname: z\r\n\t\t.string()\r\n\t\t.min(2, 'Nombre debe tener al menos 2 caracteres')\r\n\t\t.max(50, 'Nombre debe tener menos de 50 caracteres'),\r\n\temail: z.string().email('Ingrese un correo válido'),\r\n\tphone: z\r\n\t\t.string()\r\n\t\t.refine(\r\n\t\t\t(phone) => /^\\+\\d{10,15}$/.test(phone),\r\n\t\t\t'Número de teléfono inválido'\r\n\t\t),\r\n\tbirthDate: z.coerce.date(),\r\n\tgender: z.enum(['male', 'female', 'other']),\r\n\taddress: z\r\n\t\t.string()\r\n\t\t.min(5, 'Dirección debe tener al menos 5 caracteres')\r\n\t\t.max(500, 'Dirección debe tener menos de 500 caracteres'),\r\n\toccupation: z\r\n\t\t.string()\r\n\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n\t\t.max(500, 'Numbero de póliza debe tener menos de 500 caracteres')\r\n\t\t.or(z.literal('')),\r\n\temergencyContactName: z\r\n\t\t.string()\r\n\t\t.min(2, 'Contacto de emergencia debe tener al menos 2 caracteres')\r\n\t\t.max(50, 'Contacto de emergencia debe tener menos de 50 caracteres'),\r\n\temergencyContactNumber: z\r\n\t\t.string()\r\n\t\t.refine(\r\n\t\t\t(emergencyContactNumber) => /^\\+\\d{10,15}$/.test(emergencyContactNumber),\r\n\t\t\t'Número de teléfono de contacto de emergencia inválido'\r\n\t\t),\r\n\tprimaryPhysician: z.string().min(2, 'Seleccione un médico'),\r\n\tinsuranceProvider: z\r\n\t\t.string()\r\n\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n\t\t.or(z.literal('')),\r\n\tinsurancePolicyNumber: z\r\n\t\t.string()\r\n\t\t.min(2, 'Numbero de póliza debe tener al menos 2 caracteres')\r\n\t\t.max(50, 'Numbero de póliza debe tener menos de 50 caracteres')\r\n\t\t.or(z.literal('')),\r\n\tallergies: z.string().optional(),\r\n\tcurrentMedication: z.string().optional(),\r\n\tfamilyMedicalHistory: z.string().optional(),\r\n\tpastMedicalHistory: z.string().optional(),\r\n\tidentificationType: z.string().optional(),\r\n\tidentificationNumber: z.string(),\r\n\tidentificationDocument: z.custom<File[]>().optional(),\r\n\ttreatmentConsent: z\r\n\t\t.boolean()\r\n\t\t.default(false)\r\n\t\t.refine((value) => value === true, {\r\n\t\t\tmessage: 'Debe dar su consentimiento al tratamiento para continuar',\r\n\t\t}),\r\n\tdisclosureConsent: z\r\n\t\t.boolean()\r\n\t\t.default(false)\r\n\t\t.refine((value) => value === true, {\r\n\t\t\tmessage: 'Debe dar su consentimiento a la divulgación para continuar',\r\n\t\t}),\r\n\tprivacyConsent: z\r\n\t\t.boolean()\r\n\t\t.default(false)\r\n\t\t.refine((value) => value === true, {\r\n\t\t\tmessage: 'Debe dar su consentimiento a la privacidad para continuar',\r\n\t\t}),\r\n});\r\n\r\nexport const CreateAppointmentSchema = z.object({\r\n\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n\tschedule: z.coerce.date(),\r\n\treason: z\r\n\t\t.string()\r\n\t\t.min(2, 'Reason must be at least 2 characters')\r\n\t\t.max(500, 'Reason must be at most 500 characters'),\r\n\tnote: z.string().optional(),\r\n\tcancellationReason: z.string().optional(),\r\n});\r\n\r\nexport const ScheduleAppointmentSchema = z.object({\r\n\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n\tschedule: z.coerce.date(),\r\n\treason: z.string().optional(),\r\n\tnote: z.string().optional(),\r\n\tcancellationReason: z.string().optional(),\r\n});\r\n\r\nexport const CancelAppointmentSchema = z.object({\r\n\tprimaryPhysician: z.string().min(2, 'Select at least one doctor'),\r\n\tschedule: z.coerce.date(),\r\n\treason: z.string().optional(),\r\n\tnote: z.string().optional(),\r\n\tcancellationReason: z\r\n\t\t.string()\r\n\t\t.min(2, 'Reason must be at least 2 characters')\r\n\t\t.max(500, 'Reason must be at most 500 characters'),\r\n});\r\n\r\nexport function getAppointmentSchema(type: string) {\r\n\tswitch (type) {\r\n\t\tcase 'create':\r\n\t\t\treturn CreateAppointmentSchema;\r\n\t\tcase 'cancel':\r\n\t\t\treturn CancelAppointmentSchema;\r\n\t\tdefault:\r\n\t\t\treturn ScheduleAppointmentSchema;\r\n\t}\r\n}\r\n"
        }
    ]
}