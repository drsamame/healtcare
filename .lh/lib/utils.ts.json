{
    "sourceFile": "lib/utils.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1721254595795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1721766314976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,75 @@\n+import { type ClassValue, clsx } from 'clsx';\r\n+import { twMerge } from 'tailwind-merge';\r\n+\r\n+export function cn(...inputs: ClassValue[]) {\r\n+\treturn twMerge(clsx(inputs));\r\n+}\r\n+\r\n+export const parseStringify = (value: any) => JSON.parse(JSON.stringify(value));\r\n+\r\n+export const convertFileToUrl = (file: File) => URL.createObjectURL(file);\r\n+\r\n+export const formatDateTime = (\r\n+\tdateString: Date | string,\r\n+\ttimeZone: string = Intl.DateTimeFormat().resolvedOptions().timeZone\r\n+) => {\r\n+\tconst dateTimeOptions: Intl.DateTimeFormatOptions = {\r\n+\t\t// weekday: \"short\", // abbreviated weekday name (e.g., 'Mon')\r\n+\t\tmonth: 'short', // abbreviated month name (e.g., 'Oct')\r\n+\t\tday: 'numeric', // numeric day of the month (e.g., '25')\r\n+\t\tyear: 'numeric', // numeric year (e.g., '2023')\r\n+\t\thour: 'numeric', // numeric hour (e.g., '8')\r\n+\t\tminute: 'numeric', // numeric minute (e.g., '30')\r\n+\t\thour12: true, // use 12-hour clock (true) or 24-hour clock (false),\r\n+\t\ttimeZone: timeZone, // use the provided timezone\r\n+\t};\r\n+\r\n+\tconst dateDayOptions: Intl.DateTimeFormatOptions = {\r\n+\t\tweekday: 'short', // abbreviated weekday name (e.g., 'Mon')\r\n+\t\tyear: 'numeric', // numeric year (e.g., '2023')\r\n+\t\tmonth: '2-digit', // abbreviated month name (e.g., 'Oct')\r\n+\t\tday: '2-digit', // numeric day of the month (e.g., '25')\r\n+\t\ttimeZone: timeZone, // use the provided timezone\r\n+\t};\r\n+\r\n+\tconst dateOptions: Intl.DateTimeFormatOptions = {\r\n+\t\tmonth: 'short', // abbreviated month name (e.g., 'Oct')\r\n+\t\tyear: 'numeric', // numeric year (e.g., '2023')\r\n+\t\tday: 'numeric', // numeric day of the month (e.g., '25')\r\n+\t\ttimeZone: timeZone, // use the provided timezone\r\n+\t};\r\n+\r\n+\tconst timeOptions: Intl.DateTimeFormatOptions = {\r\n+\t\thour: 'numeric', // numeric hour (e.g., '8')\r\n+\t\tminute: 'numeric', // numeric minute (e.g., '30')\r\n+\t\thour12: true, // use 12-hour clock (true) or 24-hour clock (false)\r\n+\t\ttimeZone: timeZone, // use the provided timezone\r\n+\t};\r\n+\r\n+\tconst formattedDateTime: string = new Date(dateString).toLocaleString(\r\n+\t\t'en-US',\r\n+\t\tdateTimeOptions\r\n+\t);\r\n+\r\n+\tconst formattedDateDay: string = new Date(dateString).toLocaleString(\r\n+\t\t'en-US',\r\n+\t\tdateDayOptions\r\n+\t);\r\n+\r\n+\tconst formattedDate: string = new Date(dateString).toLocaleString(\r\n+\t\t'en-US',\r\n+\t\tdateOptions\r\n+\t);\r\n+\r\n+\tconst formattedTime: string = new Date(dateString).toLocaleString(\r\n+\t\t'en-US',\r\n+\t\ttimeOptions\r\n+\t);\r\n+\r\n+\treturn {\r\n+\t\tdateTime: formattedDateTime,\r\n+\t\tdateDay: formattedDateDay,\r\n+\t\tdateOnly: formattedDate,\r\n+\t\ttimeOnly: formattedTime,\r\n+\t};\r\n+};\r\n"
                },
                {
                    "date": 1721777257131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,24 +46,24 @@\n \t\ttimeZone: timeZone, // use the provided timezone\r\n \t};\r\n \r\n \tconst formattedDateTime: string = new Date(dateString).toLocaleString(\r\n-\t\t'en-US',\r\n+\t\t'es-ES',\r\n \t\tdateTimeOptions\r\n \t);\r\n \r\n \tconst formattedDateDay: string = new Date(dateString).toLocaleString(\r\n-\t\t'en-US',\r\n+\t\t'es-ES',\r\n \t\tdateDayOptions\r\n \t);\r\n \r\n \tconst formattedDate: string = new Date(dateString).toLocaleString(\r\n-\t\t'en-US',\r\n+\t\t'es-ES',\r\n \t\tdateOptions\r\n \t);\r\n \r\n \tconst formattedTime: string = new Date(dateString).toLocaleString(\r\n-\t\t'en-US',\r\n+\t\t'es-ES',\r\n \t\ttimeOptions\r\n \t);\r\n \r\n \treturn {\r\n@@ -72,14 +72,4 @@\n \t\tdateOnly: formattedDate,\r\n \t\ttimeOnly: formattedTime,\r\n \t};\r\n };\r\n-import { type ClassValue, clsx } from \"clsx\"\r\n-import { twMerge } from \"tailwind-merge\"\r\n-\r\n-export function cn(...inputs: ClassValue[]) {\r\n-  return twMerge(clsx(inputs))\r\n-}\r\n-\r\n-export const parseStringify = (value: any) => JSON.parse(JSON.stringify(value));\r\n-\r\n-export const convertFileToUrl = (file: File) => URL.createObjectURL(file);\n\\ No newline at end of file\n"
                }
            ],
            "date": 1721254595795,
            "name": "Commit-0",
            "content": "import { type ClassValue, clsx } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs))\r\n}\r\n\r\nexport const parseStringify = (value: any) => JSON.parse(JSON.stringify(value));\r\n\r\nexport const convertFileToUrl = (file: File) => URL.createObjectURL(file);"
        }
    ]
}