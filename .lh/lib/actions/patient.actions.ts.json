{
    "sourceFile": "lib/actions/patient.actions.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 61,
            "patches": [
                {
                    "date": 1723257979955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1723257991922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+'use server';\r\n+import { Query, ID } from 'node-appwrite';\r\n+import { InputFile } from 'node-appwrite/file';\r\n+import {\r\n+\tusers,\r\n+\tstorage,\r\n+\tNEXT_PUBLIC_BUCKET_ID,\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+\tNEXT_PUBLIC_ENDPOINT,\r\n+\tPROJECT_ID,\r\n+} from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+\r\n+export const createUser = async (user: CreateUserParams) => {\r\n+\ttry {\r\n+\t\tconst newUser = await users.create(\r\n+\t\t\tID.unique(),\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.phone,\r\n+\t\t\tundefined,\r\n+\t\t\tuser.name\r\n+\t\t);\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error && error?.code === 409) {\r\n+\t\t\treturn { error: error.response };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const getUser = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst user = await users.get(userId);\r\n+\t\treturn parseStringify(user);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const getPatient = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst patients = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\t[Query.equal('userId', userId)]\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(patients.documents[0]);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async ({\r\n+\tidentificationDocument,\r\n+\t...patient\r\n+}: RegisterUserParams) => {\r\n+\ttry {\r\n+\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n+\t\tlet file;\r\n+\t\tif (identificationDocument) {\r\n+\t\t\tconst inputFile =\r\n+\t\t\t\tidentificationDocument &&\r\n+\t\t\t\tInputFile.fromBuffer(\r\n+\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n+\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n+\t\t\t\t);\r\n+\r\n+\t\t\tfile = await storage.createFile(\r\n+\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n+\t\t\t\tID.unique(),\r\n+\t\t\t\tinputFile\r\n+\t\t\t);\r\n+\t\t}\r\n+\r\n+\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n+\t\t\t\tidentificationDocumentUrl: file?.$id\r\n+\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n+\t\t\t\t\t: null,\r\n+\t\t\t\t...patient,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1723259850003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,97 @@\n+'use server';\r\n+import { Query, ID } from 'node-appwrite';\r\n+import { InputFile } from 'node-appwrite/file';\r\n+import {\r\n+\tusers,\r\n+\tstorage,\r\n+\tNEXT_PUBLIC_BUCKET_ID,\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+\tNEXT_PUBLIC_ENDPOINT,\r\n+\tPROJECT_ID,\r\n+} from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+\r\n+export const createUser = async (user: CreateUserParams) => {\r\n+\ttry {\r\n+\t\tconst newUser = await users.create(\r\n+\t\t\tID.unique(),\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.phone,\r\n+\t\t\tundefined,\r\n+\t\t\tuser.name\r\n+\t\t);\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error)\r\n+\t\tif (error && error?.code === 409) {\r\n+\t\t\treturn { error: error.response };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const getUser = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst user = await users.get(userId);\r\n+\t\treturn parseStringify(user);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const getPatient = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst patients = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\t[Query.equal('userId', userId)]\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(patients.documents[0]);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async ({\r\n+\tidentificationDocument,\r\n+\t...patient\r\n+}: RegisterUserParams) => {\r\n+\ttry {\r\n+\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n+\t\tlet file;\r\n+\t\tif (identificationDocument) {\r\n+\t\t\tconst inputFile =\r\n+\t\t\t\tidentificationDocument &&\r\n+\t\t\t\tInputFile.fromBuffer(\r\n+\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n+\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n+\t\t\t\t);\r\n+\r\n+\t\t\tfile = await storage.createFile(\r\n+\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n+\t\t\t\tID.unique(),\r\n+\t\t\t\tinputFile\r\n+\t\t\t);\r\n+\t\t}\r\n+\r\n+\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n+\t\t\t\tidentificationDocumentUrl: file?.$id\r\n+\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n+\t\t\t\t\t: null,\r\n+\t\t\t\t...patient,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1723259960069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+'use server';\r\n+import { Query, ID } from 'node-appwrite';\r\n+import { InputFile } from 'node-appwrite/file';\r\n+import {\r\n+\tusers,\r\n+\tstorage,\r\n+\tNEXT_PUBLIC_BUCKET_ID,\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+\tNEXT_PUBLIC_ENDPOINT,\r\n+\tPROJECT_ID,\r\n+} from '../appwite.config';\r\n+import { getErrorMessage, parseStringify } from '../utils';\r\n+\r\n+export const createUser = async (user: CreateUserParams) => {\r\n+\ttry {\r\n+\t\tconst newUser = await users.create(\r\n+\t\t\tID.unique(),\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.phone,\r\n+\t\t\tundefined,\r\n+\t\t\tuser.name\r\n+\t\t);\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error && error?.code === 409) {\r\n+\t\t\treturn { error: getErrorMessage(error) };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const getUser = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst user = await users.get(userId);\r\n+\t\treturn parseStringify(user);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const getPatient = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst patients = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\t[Query.equal('userId', userId)]\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(patients.documents[0]);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async ({\r\n+\tidentificationDocument,\r\n+\t...patient\r\n+}: RegisterUserParams) => {\r\n+\ttry {\r\n+\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n+\t\tlet file;\r\n+\t\tif (identificationDocument) {\r\n+\t\t\tconst inputFile =\r\n+\t\t\t\tidentificationDocument &&\r\n+\t\t\t\tInputFile.fromBuffer(\r\n+\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n+\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n+\t\t\t\t);\r\n+\r\n+\t\t\tfile = await storage.createFile(\r\n+\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n+\t\t\t\tID.unique(),\r\n+\t\t\t\tinputFile\r\n+\t\t\t);\r\n+\t\t}\r\n+\r\n+\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n+\t\t\t\tidentificationDocumentUrl: file?.$id\r\n+\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n+\t\t\t\t\t: null,\r\n+\t\t\t\t...patient,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1723260250439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+'use server';\r\n+import { Query, ID } from 'node-appwrite';\r\n+import { InputFile } from 'node-appwrite/file';\r\n+import {\r\n+\tusers,\r\n+\tstorage,\r\n+\tNEXT_PUBLIC_BUCKET_ID,\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+\tNEXT_PUBLIC_ENDPOINT,\r\n+\tPROJECT_ID,\r\n+} from '../appwite.config';\r\n+import { getErrorMessage, parseStringify } from '../utils';\r\n+\r\n+export const createUser = async (user: CreateUserParams) => {\r\n+\ttry {\r\n+\t\tconst newUser = await users.create(\r\n+\t\t\tID.unique(),\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.phone,\r\n+\t\t\tundefined,\r\n+\t\t\tuser.name\r\n+\t\t);\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error && error?.code === 409) {\r\n+\t\t\treturn { error: getErrorMessage(error) };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const getUser = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst user = await users.get(userId);\r\n+\t\treturn parseStringify(user);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const getPatient = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst patients = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\t[Query.equal('userId', userId)]\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(patients.documents[0]);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async ({\r\n+\tidentificationDocument,\r\n+\t...patient\r\n+}: RegisterUserParams) => {\r\n+\ttry {\r\n+\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n+\t\tlet file;\r\n+\t\tif (identificationDocument) {\r\n+\t\t\tconst inputFile =\r\n+\t\t\t\tidentificationDocument &&\r\n+\t\t\t\tInputFile.fromBuffer(\r\n+\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n+\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n+\t\t\t\t);\r\n+\r\n+\t\t\tfile = await storage.createFile(\r\n+\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n+\t\t\t\tID.unique(),\r\n+\t\t\t\tinputFile\r\n+\t\t\t);\r\n+\t\t}\r\n+\r\n+\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n+\t\t\t\tidentificationDocumentUrl: file?.$id\r\n+\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n+\t\t\t\t\t: null,\r\n+\t\t\t\t...patient,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1723260556529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \t\t);\r\n \t\treturn { error: false, data: parseStringify(newUser) };\r\n \t} catch (error: any) {\r\n \t\tif (error && error?.code === 409) {\r\n-\t\t\treturn { error: getErrorMessage(error) };\r\n+\t\t\treturn { error: 'q fue mano' };\r\n \t\t}\r\n \t}\r\n };\r\n \r\n@@ -93,389 +93,4 @@\n \t} catch (error) {\r\n \t\tconsole.error('An error occurred while creating a new patient:', error);\r\n \t}\r\n };\r\n-'use server';\r\n-import { Query, ID } from 'node-appwrite';\r\n-import { InputFile } from 'node-appwrite/file';\r\n-import {\r\n-\tusers,\r\n-\tstorage,\r\n-\tNEXT_PUBLIC_BUCKET_ID,\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-\tNEXT_PUBLIC_ENDPOINT,\r\n-\tPROJECT_ID,\r\n-} from '../appwite.config';\r\n-import { getErrorMessage, parseStringify } from '../utils';\r\n-\r\n-export const createUser = async (user: CreateUserParams) => {\r\n-\ttry {\r\n-\t\tconst newUser = await users.create(\r\n-\t\t\tID.unique(),\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.phone,\r\n-\t\t\tundefined,\r\n-\t\t\tuser.name\r\n-\t\t);\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error && error?.code === 409) {\r\n-\t\t\treturn { error: getErrorMessage(error) };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const getUser = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst user = await users.get(userId);\r\n-\t\treturn parseStringify(user);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst patients = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\t[Query.equal('userId', userId)]\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(patients.documents[0]);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const registerPatient = async ({\r\n-\tidentificationDocument,\r\n-\t...patient\r\n-}: RegisterUserParams) => {\r\n-\ttry {\r\n-\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n-\t\tlet file;\r\n-\t\tif (identificationDocument) {\r\n-\t\t\tconst inputFile =\r\n-\t\t\t\tidentificationDocument &&\r\n-\t\t\t\tInputFile.fromBuffer(\r\n-\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n-\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n-\t\t\t\t);\r\n-\r\n-\t\t\tfile = await storage.createFile(\r\n-\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n-\t\t\t\tID.unique(),\r\n-\t\t\t\tinputFile\r\n-\t\t\t);\r\n-\t\t}\r\n-\r\n-\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n-\t\t\t\tidentificationDocumentUrl: file?.$id\r\n-\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n-\t\t\t\t\t: null,\r\n-\t\t\t\t...patient,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n-\t}\r\n-};\r\n-'use server';\r\n-import { Query, ID } from 'node-appwrite';\r\n-import { InputFile } from 'node-appwrite/file';\r\n-import {\r\n-\tusers,\r\n-\tstorage,\r\n-\tNEXT_PUBLIC_BUCKET_ID,\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-\tNEXT_PUBLIC_ENDPOINT,\r\n-\tPROJECT_ID,\r\n-} from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-\r\n-export const createUser = async (user: CreateUserParams) => {\r\n-\ttry {\r\n-\t\tconst newUser = await users.create(\r\n-\t\t\tID.unique(),\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.phone,\r\n-\t\t\tundefined,\r\n-\t\t\tuser.name\r\n-\t\t);\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error)\r\n-\t\tif (error && error?.code === 409) {\r\n-\t\t\treturn { error: error.response };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const getUser = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst user = await users.get(userId);\r\n-\t\treturn parseStringify(user);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst patients = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\t[Query.equal('userId', userId)]\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(patients.documents[0]);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const registerPatient = async ({\r\n-\tidentificationDocument,\r\n-\t...patient\r\n-}: RegisterUserParams) => {\r\n-\ttry {\r\n-\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n-\t\tlet file;\r\n-\t\tif (identificationDocument) {\r\n-\t\t\tconst inputFile =\r\n-\t\t\t\tidentificationDocument &&\r\n-\t\t\t\tInputFile.fromBuffer(\r\n-\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n-\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n-\t\t\t\t);\r\n-\r\n-\t\t\tfile = await storage.createFile(\r\n-\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n-\t\t\t\tID.unique(),\r\n-\t\t\t\tinputFile\r\n-\t\t\t);\r\n-\t\t}\r\n-\r\n-\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n-\t\t\t\tidentificationDocumentUrl: file?.$id\r\n-\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n-\t\t\t\t\t: null,\r\n-\t\t\t\t...patient,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n-\t}\r\n-};\r\n-'use server';\r\n-import { Query, ID } from 'node-appwrite';\r\n-import { InputFile } from 'node-appwrite/file';\r\n-import {\r\n-\tusers,\r\n-\tstorage,\r\n-\tNEXT_PUBLIC_BUCKET_ID,\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-\tNEXT_PUBLIC_ENDPOINT,\r\n-\tPROJECT_ID,\r\n-} from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-\r\n-export const createUser = async (user: CreateUserParams) => {\r\n-\ttry {\r\n-\t\tconst newUser = await users.create(\r\n-\t\t\tID.unique(),\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.phone,\r\n-\t\t\tundefined,\r\n-\t\t\tuser.name\r\n-\t\t);\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error && error?.code === 409) {\r\n-\t\t\treturn { error: error.response };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const getUser = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst user = await users.get(userId);\r\n-\t\treturn parseStringify(user);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst patients = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\t[Query.equal('userId', userId)]\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(patients.documents[0]);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const registerPatient = async ({\r\n-\tidentificationDocument,\r\n-\t...patient\r\n-}: RegisterUserParams) => {\r\n-\ttry {\r\n-\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n-\t\tlet file;\r\n-\t\tif (identificationDocument) {\r\n-\t\t\tconst inputFile =\r\n-\t\t\t\tidentificationDocument &&\r\n-\t\t\t\tInputFile.fromBuffer(\r\n-\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n-\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n-\t\t\t\t);\r\n-\r\n-\t\t\tfile = await storage.createFile(\r\n-\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n-\t\t\t\tID.unique(),\r\n-\t\t\t\tinputFile\r\n-\t\t\t);\r\n-\t\t}\r\n-\r\n-\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n-\t\t\t\tidentificationDocumentUrl: file?.$id\r\n-\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n-\t\t\t\t\t: null,\r\n-\t\t\t\t...patient,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n-\t}\r\n-};\r\n-'use server';\r\n-import { Query, ID } from 'node-appwrite';\r\n-import { InputFile } from 'node-appwrite/file';\r\n-import {\r\n-\tusers,\r\n-\tstorage,\r\n-\tNEXT_PUBLIC_BUCKET_ID,\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-\tNEXT_PUBLIC_ENDPOINT,\r\n-\tPROJECT_ID,\r\n-} from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-\r\n-export const createUser = async (user: CreateUserParams) => {\r\n-\ttry {\r\n-\t\tconst newUser = await users.create(\r\n-\t\t\tID.unique(),\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.phone,\r\n-\t\t\tundefined,\r\n-\t\t\tuser.name\r\n-\t\t);\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error && error?.code === 409) {\r\n-\t\t\treturn { error: error.response };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const getUser = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst user = await users.get(userId);\r\n-\t\treturn parseStringify(user);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst patients = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\t[Query.equal('userId', userId)]\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(patients.documents[0]);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const registerPatient = async ({\r\n-\tidentificationDocument,\r\n-\t...patient\r\n-}: RegisterUserParams) => {\r\n-\ttry {\r\n-\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n-\t\tlet file;\r\n-\t\tif (identificationDocument) {\r\n-\t\t\tconst inputFile =\r\n-\t\t\t\tidentificationDocument &&\r\n-\t\t\t\tInputFile.fromBuffer(\r\n-\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n-\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n-\t\t\t\t);\r\n-\r\n-\t\t\tfile = await storage.createFile(\r\n-\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n-\t\t\t\tID.unique(),\r\n-\t\t\t\tinputFile\r\n-\t\t\t);\r\n-\t\t}\r\n-\r\n-\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n-\t\t\t\tidentificationDocumentUrl: file?.$id\r\n-\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n-\t\t\t\t\t: null,\r\n-\t\t\t\t...patient,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n-\t}\r\n-};\r\n"
                },
                {
                    "date": 1723260653318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+'use server';\r\n+import { Query, ID } from 'node-appwrite';\r\n+import { InputFile } from 'node-appwrite/file';\r\n+import {\r\n+\tusers,\r\n+\tstorage,\r\n+\tNEXT_PUBLIC_BUCKET_ID,\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+\tNEXT_PUBLIC_ENDPOINT,\r\n+\tPROJECT_ID,\r\n+} from '../appwite.config';\r\n+import { getErrorMessage, parseStringify } from '../utils';\r\n+\r\n+export const createUser = async (user: CreateUserParams) => {\r\n+\ttry {\r\n+\t\tconst newUser = await users.create(\r\n+\t\t\tID.unique(),\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.phone,\r\n+\t\t\tundefined,\r\n+\t\t\tuser.name\r\n+\t\t);\r\n+\t\treturn { success: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error && error?.code === 409) {\r\n+\t\t\treturn { error: 'q fue mano' };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const getUser = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst user = await users.get(userId);\r\n+\t\treturn parseStringify(user);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const getPatient = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst patients = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\t[Query.equal('userId', userId)]\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(patients.documents[0]);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async ({\r\n+\tidentificationDocument,\r\n+\t...patient\r\n+}: RegisterUserParams) => {\r\n+\ttry {\r\n+\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n+\t\tlet file;\r\n+\t\tif (identificationDocument) {\r\n+\t\t\tconst inputFile =\r\n+\t\t\t\tidentificationDocument &&\r\n+\t\t\t\tInputFile.fromBuffer(\r\n+\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n+\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n+\t\t\t\t);\r\n+\r\n+\t\t\tfile = await storage.createFile(\r\n+\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n+\t\t\t\tID.unique(),\r\n+\t\t\t\tinputFile\r\n+\t\t\t);\r\n+\t\t}\r\n+\r\n+\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n+\t\t\t\tidentificationDocumentUrl: file?.$id\r\n+\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n+\t\t\t\t\t: null,\r\n+\t\t\t\t...patient,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1723260662427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+'use server';\r\n+import { Query, ID } from 'node-appwrite';\r\n+import { InputFile } from 'node-appwrite/file';\r\n+import {\r\n+\tusers,\r\n+\tstorage,\r\n+\tNEXT_PUBLIC_BUCKET_ID,\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+\tNEXT_PUBLIC_ENDPOINT,\r\n+\tPROJECT_ID,\r\n+} from '../appwite.config';\r\n+import { getErrorMessage, parseStringify } from '../utils';\r\n+\r\n+export const createUser = async (user: CreateUserParams) => {\r\n+\ttry {\r\n+\t\tconst newUser = await users.create(\r\n+\t\t\tID.unique(),\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.phone,\r\n+\t\t\tundefined,\r\n+\t\t\tuser.name\r\n+\t\t);\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error && error?.code === 409) {\r\n+\t\t\treturn { error: 'q fue mano' };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const getUser = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst user = await users.get(userId);\r\n+\t\treturn parseStringify(user);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const getPatient = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst patients = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\t[Query.equal('userId', userId)]\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(patients.documents[0]);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async ({\r\n+\tidentificationDocument,\r\n+\t...patient\r\n+}: RegisterUserParams) => {\r\n+\ttry {\r\n+\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n+\t\tlet file;\r\n+\t\tif (identificationDocument) {\r\n+\t\t\tconst inputFile =\r\n+\t\t\t\tidentificationDocument &&\r\n+\t\t\t\tInputFile.fromBuffer(\r\n+\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n+\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n+\t\t\t\t);\r\n+\r\n+\t\t\tfile = await storage.createFile(\r\n+\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n+\t\t\t\tID.unique(),\r\n+\t\t\t\tinputFile\r\n+\t\t\t);\r\n+\t\t}\r\n+\r\n+\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n+\t\t\t\tidentificationDocumentUrl: file?.$id\r\n+\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n+\t\t\t\t\t: null,\r\n+\t\t\t\t...patient,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1723261236300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+'use server';\r\n+import { Query, ID } from 'node-appwrite';\r\n+import { InputFile } from 'node-appwrite/file';\r\n+import {\r\n+\tusers,\r\n+\tstorage,\r\n+\tNEXT_PUBLIC_BUCKET_ID,\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+\tNEXT_PUBLIC_ENDPOINT,\r\n+\tPROJECT_ID,\r\n+} from '../appwite.config';\r\n+import { getErrorMessage, parseStringify } from '../utils';\r\n+\r\n+export const createUser = async (user: CreateUserParams) => {\r\n+\ttry {\r\n+\t\tconst newUser = await users.create(\r\n+\t\t\tID.unique(),\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.phone,\r\n+\t\t\tundefined,\r\n+\t\t\tuser.name\r\n+\t\t);\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error && error?.code === 409) {\r\n+\t\t\treturn { error: getErrorMessage(error) };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const getUser = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst user = await users.get(userId);\r\n+\t\treturn parseStringify(user);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const getPatient = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst patients = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\t[Query.equal('userId', userId)]\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(patients.documents[0]);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async ({\r\n+\tidentificationDocument,\r\n+\t...patient\r\n+}: RegisterUserParams) => {\r\n+\ttry {\r\n+\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n+\t\tlet file;\r\n+\t\tif (identificationDocument) {\r\n+\t\t\tconst inputFile =\r\n+\t\t\t\tidentificationDocument &&\r\n+\t\t\t\tInputFile.fromBuffer(\r\n+\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n+\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n+\t\t\t\t);\r\n+\r\n+\t\t\tfile = await storage.createFile(\r\n+\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n+\t\t\t\tID.unique(),\r\n+\t\t\t\tinputFile\r\n+\t\t\t);\r\n+\t\t}\r\n+\r\n+\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n+\t\t\t\tidentificationDocumentUrl: file?.$id\r\n+\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n+\t\t\t\t\t: null,\r\n+\t\t\t\t...patient,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1723261490101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+'use server';\r\n+import { Query, ID } from 'node-appwrite';\r\n+import { InputFile } from 'node-appwrite/file';\r\n+import {\r\n+\tusers,\r\n+\tstorage,\r\n+\tNEXT_PUBLIC_BUCKET_ID,\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+\tNEXT_PUBLIC_ENDPOINT,\r\n+\tPROJECT_ID,\r\n+} from '../appwite.config';\r\n+import { getErrorMessage, parseStringify } from '../utils';\r\n+\r\n+export const createUser = async (user: CreateUserParams) => {\r\n+\ttry {\r\n+\t\tconst newUser = await users.create(\r\n+\t\t\tID.unique(),\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.phone,\r\n+\t\t\tundefined,\r\n+\t\t\tuser.name\r\n+\t\t);\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error && error?.code === 409) {\r\n+\t\t\treturn { error: getErrorMessage(error) };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const getUser = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst user = await users.get(userId);\r\n+\t\treturn parseStringify(user);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const getPatient = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst patients = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\t[Query.equal('userId', userId)]\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(patients.documents[0]);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async ({\r\n+\tidentificationDocument,\r\n+\t...patient\r\n+}: RegisterUserParams) => {\r\n+\ttry {\r\n+\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n+\t\tlet file;\r\n+\t\tif (identificationDocument) {\r\n+\t\t\tconst inputFile =\r\n+\t\t\t\tidentificationDocument &&\r\n+\t\t\t\tInputFile.fromBuffer(\r\n+\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n+\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n+\t\t\t\t);\r\n+\r\n+\t\t\tfile = await storage.createFile(\r\n+\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n+\t\t\t\tID.unique(),\r\n+\t\t\t\tinputFile\r\n+\t\t\t);\r\n+\t\t}\r\n+\r\n+\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n+\t\t\t\tidentificationDocumentUrl: file?.$id\r\n+\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n+\t\t\t\t\t: null,\r\n+\t\t\t\t...patient,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1723261575921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+'use server';\r\n+import { Query, ID } from 'node-appwrite';\r\n+import { InputFile } from 'node-appwrite/file';\r\n+import {\r\n+\tusers,\r\n+\tstorage,\r\n+\tNEXT_PUBLIC_BUCKET_ID,\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+\tNEXT_PUBLIC_ENDPOINT,\r\n+\tPROJECT_ID,\r\n+} from '../appwite.config';\r\n+import { getErrorMessage, parseStringify } from '../utils';\r\n+\r\n+export const createUser = async (user: CreateUserParams) => {\r\n+\ttry {\r\n+\t\tconst newUser = await users.create(\r\n+\t\t\tID.unique(),\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.phone,\r\n+\t\t\tundefined,\r\n+\t\t\tuser.name\r\n+\t\t);\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error && error?.code === 409) {\r\n+\t\t\treturn { error: getErrorMessage(error) };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const getUser = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst user = await users.get(userId);\r\n+\t\treturn parseStringify(user);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const getPatient = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst patients = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\t[Query.equal('userId', userId)]\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(patients.documents[0]);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async ({\r\n+\tidentificationDocument,\r\n+\t...patient\r\n+}: RegisterUserParams) => {\r\n+\ttry {\r\n+\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n+\t\tlet file;\r\n+\t\tif (identificationDocument) {\r\n+\t\t\tconst inputFile =\r\n+\t\t\t\tidentificationDocument &&\r\n+\t\t\t\tInputFile.fromBuffer(\r\n+\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n+\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n+\t\t\t\t);\r\n+\r\n+\t\t\tfile = await storage.createFile(\r\n+\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n+\t\t\t\tID.unique(),\r\n+\t\t\t\tinputFile\r\n+\t\t\t);\r\n+\t\t}\r\n+\r\n+\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n+\t\t\t\tidentificationDocumentUrl: file?.$id\r\n+\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n+\t\t\t\t\t: null,\r\n+\t\t\t\t...patient,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1723499008466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,95 +29,14 @@\n \t\t}\r\n \t}\r\n };\r\n \r\n-export const getUser = async (userId: string) => {\r\n+export const loginUser = async (user: LoginUser) => {\r\n \ttry {\r\n-\t\tconst user = await users.get(userId);\r\n-\t\treturn parseStringify(user);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst patients = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\t[Query.equal('userId', userId)]\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(patients.documents[0]);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const registerPatient = async ({\r\n-\tidentificationDocument,\r\n-\t...patient\r\n-}: RegisterUserParams) => {\r\n-\ttry {\r\n-\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n-\t\tlet file;\r\n-\t\tif (identificationDocument) {\r\n-\t\t\tconst inputFile =\r\n-\t\t\t\tidentificationDocument &&\r\n-\t\t\t\tInputFile.fromBuffer(\r\n-\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n-\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n-\t\t\t\t);\r\n-\r\n-\t\t\tfile = await storage.createFile(\r\n-\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n-\t\t\t\tID.unique(),\r\n-\t\t\t\tinputFile\r\n-\t\t\t);\r\n-\t\t}\r\n-\r\n-\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n-\t\t\t\tidentificationDocumentUrl: file?.$id\r\n-\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n-\t\t\t\t\t: null,\r\n-\t\t\t\t...patient,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n-\t}\r\n-};\r\n-'use server';\r\n-import { Query, ID } from 'node-appwrite';\r\n-import { InputFile } from 'node-appwrite/file';\r\n-import {\r\n-\tusers,\r\n-\tstorage,\r\n-\tNEXT_PUBLIC_BUCKET_ID,\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-\tNEXT_PUBLIC_ENDPOINT,\r\n-\tPROJECT_ID,\r\n-} from '../appwite.config';\r\n-import { getErrorMessage, parseStringify } from '../utils';\r\n-\r\n-export const createUser = async (user: CreateUserParams) => {\r\n-\ttry {\r\n \t\tconst newUser = await users.create(\r\n \t\t\tID.unique(),\r\n \t\t\tuser.email,\r\n-\t\t\tuser.phone,\r\n-\t\t\tundefined,\r\n-\t\t\tuser.name\r\n+\t\t\tuser.password\r\n \t\t);\r\n \t\treturn { error: false, data: parseStringify(newUser) };\r\n \t} catch (error: any) {\r\n \t\tif (error && error?.code === 409) {\r\n@@ -189,388 +108,4 @@\n \t} catch (error) {\r\n \t\tconsole.error('An error occurred while creating a new patient:', error);\r\n \t}\r\n };\r\n-'use server';\r\n-import { Query, ID } from 'node-appwrite';\r\n-import { InputFile } from 'node-appwrite/file';\r\n-import {\r\n-\tusers,\r\n-\tstorage,\r\n-\tNEXT_PUBLIC_BUCKET_ID,\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-\tNEXT_PUBLIC_ENDPOINT,\r\n-\tPROJECT_ID,\r\n-} from '../appwite.config';\r\n-import { getErrorMessage, parseStringify } from '../utils';\r\n-\r\n-export const createUser = async (user: CreateUserParams) => {\r\n-\ttry {\r\n-\t\tconst newUser = await users.create(\r\n-\t\t\tID.unique(),\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.phone,\r\n-\t\t\tundefined,\r\n-\t\t\tuser.name\r\n-\t\t);\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error && error?.code === 409) {\r\n-\t\t\treturn { error: getErrorMessage(error) };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const getUser = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst user = await users.get(userId);\r\n-\t\treturn parseStringify(user);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst patients = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\t[Query.equal('userId', userId)]\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(patients.documents[0]);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const registerPatient = async ({\r\n-\tidentificationDocument,\r\n-\t...patient\r\n-}: RegisterUserParams) => {\r\n-\ttry {\r\n-\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n-\t\tlet file;\r\n-\t\tif (identificationDocument) {\r\n-\t\t\tconst inputFile =\r\n-\t\t\t\tidentificationDocument &&\r\n-\t\t\t\tInputFile.fromBuffer(\r\n-\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n-\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n-\t\t\t\t);\r\n-\r\n-\t\t\tfile = await storage.createFile(\r\n-\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n-\t\t\t\tID.unique(),\r\n-\t\t\t\tinputFile\r\n-\t\t\t);\r\n-\t\t}\r\n-\r\n-\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n-\t\t\t\tidentificationDocumentUrl: file?.$id\r\n-\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n-\t\t\t\t\t: null,\r\n-\t\t\t\t...patient,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n-\t}\r\n-};\r\n-'use server';\r\n-import { Query, ID } from 'node-appwrite';\r\n-import { InputFile } from 'node-appwrite/file';\r\n-import {\r\n-\tusers,\r\n-\tstorage,\r\n-\tNEXT_PUBLIC_BUCKET_ID,\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-\tNEXT_PUBLIC_ENDPOINT,\r\n-\tPROJECT_ID,\r\n-} from '../appwite.config';\r\n-import { getErrorMessage, parseStringify } from '../utils';\r\n-\r\n-export const createUser = async (user: CreateUserParams) => {\r\n-\ttry {\r\n-\t\tconst newUser = await users.create(\r\n-\t\t\tID.unique(),\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.phone,\r\n-\t\t\tundefined,\r\n-\t\t\tuser.name\r\n-\t\t);\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error && error?.code === 409) {\r\n-\t\t\treturn { error: 'q fue mano' };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const getUser = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst user = await users.get(userId);\r\n-\t\treturn parseStringify(user);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst patients = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\t[Query.equal('userId', userId)]\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(patients.documents[0]);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const registerPatient = async ({\r\n-\tidentificationDocument,\r\n-\t...patient\r\n-}: RegisterUserParams) => {\r\n-\ttry {\r\n-\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n-\t\tlet file;\r\n-\t\tif (identificationDocument) {\r\n-\t\t\tconst inputFile =\r\n-\t\t\t\tidentificationDocument &&\r\n-\t\t\t\tInputFile.fromBuffer(\r\n-\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n-\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n-\t\t\t\t);\r\n-\r\n-\t\t\tfile = await storage.createFile(\r\n-\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n-\t\t\t\tID.unique(),\r\n-\t\t\t\tinputFile\r\n-\t\t\t);\r\n-\t\t}\r\n-\r\n-\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n-\t\t\t\tidentificationDocumentUrl: file?.$id\r\n-\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n-\t\t\t\t\t: null,\r\n-\t\t\t\t...patient,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n-\t}\r\n-};\r\n-'use server';\r\n-import { Query, ID } from 'node-appwrite';\r\n-import { InputFile } from 'node-appwrite/file';\r\n-import {\r\n-\tusers,\r\n-\tstorage,\r\n-\tNEXT_PUBLIC_BUCKET_ID,\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-\tNEXT_PUBLIC_ENDPOINT,\r\n-\tPROJECT_ID,\r\n-} from '../appwite.config';\r\n-import { getErrorMessage, parseStringify } from '../utils';\r\n-\r\n-export const createUser = async (user: CreateUserParams) => {\r\n-\ttry {\r\n-\t\tconst newUser = await users.create(\r\n-\t\t\tID.unique(),\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.phone,\r\n-\t\t\tundefined,\r\n-\t\t\tuser.name\r\n-\t\t);\r\n-\t\treturn { success: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error && error?.code === 409) {\r\n-\t\t\treturn { error: 'q fue mano' };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const getUser = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst user = await users.get(userId);\r\n-\t\treturn parseStringify(user);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst patients = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\t[Query.equal('userId', userId)]\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(patients.documents[0]);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const registerPatient = async ({\r\n-\tidentificationDocument,\r\n-\t...patient\r\n-}: RegisterUserParams) => {\r\n-\ttry {\r\n-\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n-\t\tlet file;\r\n-\t\tif (identificationDocument) {\r\n-\t\t\tconst inputFile =\r\n-\t\t\t\tidentificationDocument &&\r\n-\t\t\t\tInputFile.fromBuffer(\r\n-\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n-\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n-\t\t\t\t);\r\n-\r\n-\t\t\tfile = await storage.createFile(\r\n-\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n-\t\t\t\tID.unique(),\r\n-\t\t\t\tinputFile\r\n-\t\t\t);\r\n-\t\t}\r\n-\r\n-\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n-\t\t\t\tidentificationDocumentUrl: file?.$id\r\n-\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n-\t\t\t\t\t: null,\r\n-\t\t\t\t...patient,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n-\t}\r\n-};\r\n-'use server';\r\n-import { Query, ID } from 'node-appwrite';\r\n-import { InputFile } from 'node-appwrite/file';\r\n-import {\r\n-\tusers,\r\n-\tstorage,\r\n-\tNEXT_PUBLIC_BUCKET_ID,\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-\tNEXT_PUBLIC_ENDPOINT,\r\n-\tPROJECT_ID,\r\n-} from '../appwite.config';\r\n-import { getErrorMessage, parseStringify } from '../utils';\r\n-\r\n-export const createUser = async (user: CreateUserParams) => {\r\n-\ttry {\r\n-\t\tconst newUser = await users.create(\r\n-\t\t\tID.unique(),\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.phone,\r\n-\t\t\tundefined,\r\n-\t\t\tuser.name\r\n-\t\t);\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error && error?.code === 409) {\r\n-\t\t\treturn { error: 'q fue mano' };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const getUser = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst user = await users.get(userId);\r\n-\t\treturn parseStringify(user);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst patients = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\t[Query.equal('userId', userId)]\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(patients.documents[0]);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const registerPatient = async ({\r\n-\tidentificationDocument,\r\n-\t...patient\r\n-}: RegisterUserParams) => {\r\n-\ttry {\r\n-\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n-\t\tlet file;\r\n-\t\tif (identificationDocument) {\r\n-\t\t\tconst inputFile =\r\n-\t\t\t\tidentificationDocument &&\r\n-\t\t\t\tInputFile.fromBuffer(\r\n-\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n-\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n-\t\t\t\t);\r\n-\r\n-\t\t\tfile = await storage.createFile(\r\n-\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n-\t\t\t\tID.unique(),\r\n-\t\t\t\tinputFile\r\n-\t\t\t);\r\n-\t\t}\r\n-\r\n-\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n-\t\t\t\tidentificationDocumentUrl: file?.$id\r\n-\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n-\t\t\t\t\t: null,\r\n-\t\t\t\t...patient,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n-\t}\r\n-};\r\n"
                },
                {
                    "date": 1723500829457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,111 @@\n+'use server';\r\n+import { Query, ID } from 'node-appwrite';\r\n+import { InputFile } from 'node-appwrite/file';\r\n+import {\r\n+\tusers,\r\n+\tstorage,\r\n+\tNEXT_PUBLIC_BUCKET_ID,\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+\tNEXT_PUBLIC_ENDPOINT,\r\n+\tPROJECT_ID,\r\n+} from '../appwite.config';\r\n+import { getErrorMessage, parseStringify } from '../utils';\r\n+\r\n+export const createUser = async (user: CreateUserParams) => {\r\n+\ttry {\r\n+\t\tconst newUser = await users.create(\r\n+\t\t\tID.unique(),\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.phone,\r\n+\t\t\tundefined,\r\n+\t\t\tuser.name\r\n+\t\t);\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error && error?.code === 409) {\r\n+\t\t\treturn { error: getErrorMessage(error) };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const loginUser = async (user: LoginUser) => {\r\n+\ttry {\r\n+\t\tconst newUser = await users.create(\r\n+\t\t\tID.unique(),\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.password\r\n+\t\t);\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error && error?.code === 409) {\r\n+\t\t\treturn { error: getErrorMessage(error) };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const getUser = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst user = await users.get(userId);\r\n+\t\treturn parseStringify(user);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const getPatient = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst patients = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\t[Query.equal('userId', userId)]\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(patients.documents[0]);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async ({\r\n+\tidentificationDocument,\r\n+\t...patient\r\n+}: RegisterUserParams) => {\r\n+\ttry {\r\n+\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n+\t\tlet file;\r\n+\t\tif (identificationDocument) {\r\n+\t\t\tconst inputFile =\r\n+\t\t\t\tidentificationDocument &&\r\n+\t\t\t\tInputFile.fromBuffer(\r\n+\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n+\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n+\t\t\t\t);\r\n+\r\n+\t\t\tfile = await storage.createFile(\r\n+\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n+\t\t\t\tID.unique(),\r\n+\t\t\t\tinputFile\r\n+\t\t\t);\r\n+\t\t}\r\n+\r\n+\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n+\t\t\t\tidentificationDocumentUrl: file?.$id\r\n+\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n+\t\t\t\t\t: null,\r\n+\t\t\t\t...patient,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1723535569682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import { Query, ID } from 'node-appwrite';\r\n import { InputFile } from 'node-appwrite/file';\r\n import {\r\n \tusers,\r\n+\taccount,\r\n \tstorage,\r\n \tNEXT_PUBLIC_BUCKET_ID,\r\n \tdatabases,\r\n \tDATABASE_ID,\r\n@@ -14,14 +15,13 @@\n import { getErrorMessage, parseStringify } from '../utils';\r\n \r\n export const createUser = async (user: CreateUserParams) => {\r\n \ttry {\r\n-\t\tconst newUser = await users.create(\r\n+\t\tconst newUser = await account.create(\r\n \t\t\tID.unique(),\r\n \t\t\tuser.email,\r\n-\t\t\tuser.phone,\r\n-\t\t\tundefined,\r\n-\t\t\tuser.name\r\n+\t\t\tuser.password,\r\n+\t\t\tuser.name,\r\n \t\t);\r\n \t\treturn { error: false, data: parseStringify(newUser) };\r\n \t} catch (error: any) {\r\n \t\tif (error && error?.code === 409) {\r\n"
                },
                {
                    "date": 1723536019575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,113 @@\n+'use server';\r\n+import { Query, ID } from 'node-appwrite';\r\n+import { InputFile } from 'node-appwrite/file';\r\n+import {\r\n+\tusers,\r\n+\taccount,\r\n+\tstorage,\r\n+\tNEXT_PUBLIC_BUCKET_ID,\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+\tNEXT_PUBLIC_ENDPOINT,\r\n+\tPROJECT_ID,\r\n+} from '../appwite.config';\r\n+import { getErrorMessage, parseStringify } from '../utils';\r\n+\r\n+export const createUser = async (user: CreateUserParams) => {\r\n+\ttry {\r\n+\t\tconst newUser = await account.create(\r\n+\t\t\tID.unique(),\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.password,\r\n+\t\t\tuser.name,\r\n+\t\t);\r\n+\t\taccount.updatePhone(user.phone,\tuser.password);\r\n+\t\t\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error && error?.code === 409) {\r\n+\t\t\treturn { error: getErrorMessage(error) };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const loginUser = async (user: LoginUser) => {\r\n+\ttry {\r\n+\t\tconst newUser = await users.create(\r\n+\t\t\tID.unique(),\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.password\r\n+\t\t);\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error && error?.code === 409) {\r\n+\t\t\treturn { error: getErrorMessage(error) };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const getUser = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst user = await users.get(userId);\r\n+\t\treturn parseStringify(user);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const getPatient = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst patients = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\t[Query.equal('userId', userId)]\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(patients.documents[0]);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async ({\r\n+\tidentificationDocument,\r\n+\t...patient\r\n+}: RegisterUserParams) => {\r\n+\ttry {\r\n+\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n+\t\tlet file;\r\n+\t\tif (identificationDocument) {\r\n+\t\t\tconst inputFile =\r\n+\t\t\t\tidentificationDocument &&\r\n+\t\t\t\tInputFile.fromBuffer(\r\n+\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n+\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n+\t\t\t\t);\r\n+\r\n+\t\t\tfile = await storage.createFile(\r\n+\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n+\t\t\t\tID.unique(),\r\n+\t\t\t\tinputFile\r\n+\t\t\t);\r\n+\t\t}\r\n+\r\n+\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n+\t\t\t\tidentificationDocumentUrl: file?.$id\r\n+\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n+\t\t\t\t\t: null,\r\n+\t\t\t\t...patient,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1723536067754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n \t\t\tuser.email,\r\n \t\t\tuser.password,\r\n \t\t\tuser.name,\r\n \t\t);\r\n-\t\taccount.updatePhone(user.phone,\tuser.password);\r\n+\t\tawait account.updatePhone(user.phone,\tuser.password);\r\n \t\t\r\n \t\treturn { error: false, data: parseStringify(newUser) };\r\n \t} catch (error: any) {\r\n \t\tif (error && error?.code === 409) {\r\n@@ -110,226 +110,4 @@\n \t} catch (error) {\r\n \t\tconsole.error('An error occurred while creating a new patient:', error);\r\n \t}\r\n };\r\n-'use server';\r\n-import { Query, ID } from 'node-appwrite';\r\n-import { InputFile } from 'node-appwrite/file';\r\n-import {\r\n-\tusers,\r\n-\taccount,\r\n-\tstorage,\r\n-\tNEXT_PUBLIC_BUCKET_ID,\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-\tNEXT_PUBLIC_ENDPOINT,\r\n-\tPROJECT_ID,\r\n-} from '../appwite.config';\r\n-import { getErrorMessage, parseStringify } from '../utils';\r\n-\r\n-export const createUser = async (user: CreateUserParams) => {\r\n-\ttry {\r\n-\t\tconst newUser = await account.create(\r\n-\t\t\tID.unique(),\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.password,\r\n-\t\t\tuser.name,\r\n-\t\t);\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error && error?.code === 409) {\r\n-\t\t\treturn { error: getErrorMessage(error) };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const loginUser = async (user: LoginUser) => {\r\n-\ttry {\r\n-\t\tconst newUser = await users.create(\r\n-\t\t\tID.unique(),\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.password\r\n-\t\t);\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error && error?.code === 409) {\r\n-\t\t\treturn { error: getErrorMessage(error) };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const getUser = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst user = await users.get(userId);\r\n-\t\treturn parseStringify(user);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst patients = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\t[Query.equal('userId', userId)]\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(patients.documents[0]);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const registerPatient = async ({\r\n-\tidentificationDocument,\r\n-\t...patient\r\n-}: RegisterUserParams) => {\r\n-\ttry {\r\n-\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n-\t\tlet file;\r\n-\t\tif (identificationDocument) {\r\n-\t\t\tconst inputFile =\r\n-\t\t\t\tidentificationDocument &&\r\n-\t\t\t\tInputFile.fromBuffer(\r\n-\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n-\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n-\t\t\t\t);\r\n-\r\n-\t\t\tfile = await storage.createFile(\r\n-\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n-\t\t\t\tID.unique(),\r\n-\t\t\t\tinputFile\r\n-\t\t\t);\r\n-\t\t}\r\n-\r\n-\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n-\t\t\t\tidentificationDocumentUrl: file?.$id\r\n-\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n-\t\t\t\t\t: null,\r\n-\t\t\t\t...patient,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n-\t}\r\n-};\r\n-'use server';\r\n-import { Query, ID } from 'node-appwrite';\r\n-import { InputFile } from 'node-appwrite/file';\r\n-import {\r\n-\tusers,\r\n-\tstorage,\r\n-\tNEXT_PUBLIC_BUCKET_ID,\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-\tNEXT_PUBLIC_ENDPOINT,\r\n-\tPROJECT_ID,\r\n-} from '../appwite.config';\r\n-import { getErrorMessage, parseStringify } from '../utils';\r\n-\r\n-export const createUser = async (user: CreateUserParams) => {\r\n-\ttry {\r\n-\t\tconst newUser = await users.create(\r\n-\t\t\tID.unique(),\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.phone,\r\n-\t\t\tundefined,\r\n-\t\t\tuser.name\r\n-\t\t);\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error && error?.code === 409) {\r\n-\t\t\treturn { error: getErrorMessage(error) };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const loginUser = async (user: LoginUser) => {\r\n-\ttry {\r\n-\t\tconst newUser = await users.create(\r\n-\t\t\tID.unique(),\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.password\r\n-\t\t);\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error && error?.code === 409) {\r\n-\t\t\treturn { error: getErrorMessage(error) };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const getUser = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst user = await users.get(userId);\r\n-\t\treturn parseStringify(user);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst patients = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\t[Query.equal('userId', userId)]\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(patients.documents[0]);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const registerPatient = async ({\r\n-\tidentificationDocument,\r\n-\t...patient\r\n-}: RegisterUserParams) => {\r\n-\ttry {\r\n-\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n-\t\tlet file;\r\n-\t\tif (identificationDocument) {\r\n-\t\t\tconst inputFile =\r\n-\t\t\t\tidentificationDocument &&\r\n-\t\t\t\tInputFile.fromBuffer(\r\n-\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n-\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n-\t\t\t\t);\r\n-\r\n-\t\t\tfile = await storage.createFile(\r\n-\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n-\t\t\t\tID.unique(),\r\n-\t\t\t\tinputFile\r\n-\t\t\t);\r\n-\t\t}\r\n-\r\n-\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n-\t\t\t\tidentificationDocumentUrl: file?.$id\r\n-\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n-\t\t\t\t\t: null,\r\n-\t\t\t\t...patient,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n-\t}\r\n-};\r\n"
                },
                {
                    "date": 1723536253650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,117 @@\n+'use server';\r\n+import { Query, ID } from 'node-appwrite';\r\n+import { InputFile } from 'node-appwrite/file';\r\n+import {\r\n+\tusers,\r\n+\taccount,\r\n+\tstorage,\r\n+\tNEXT_PUBLIC_BUCKET_ID,\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+\tNEXT_PUBLIC_ENDPOINT,\r\n+\tPROJECT_ID,\r\n+} from '../appwite.config';\r\n+import { getErrorMessage, parseStringify } from '../utils';\r\n+\r\n+export const createUser = async (user: CreateUserParams) => {\r\n+\ttry {\r\n+\t\tconst newUser = await account.create(\r\n+\t\t\tID.unique(),\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.password,\r\n+\t\t\tuser.name,\r\n+\t\t);\r\n+\r\n+\t\tawait account.updatePhone(user.phone,\tuser.password);\r\n+\t\t\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error && error?.code === 409) {\r\n+\t\t\treturn { error: getErrorMessage(error) };\r\n+\t\t}\r\n+\t\tif (error && error?.code === 404) {\r\n+\t\t\treturn { error: getErrorMessage(error) };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const loginUser = async (user: LoginUser) => {\r\n+\ttry {\r\n+\t\tconst newUser = await users.create(\r\n+\t\t\tID.unique(),\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.password\r\n+\t\t);\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error && error?.code === 409) {\r\n+\t\t\treturn { error: getErrorMessage(error) };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const getUser = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst user = await users.get(userId);\r\n+\t\treturn parseStringify(user);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const getPatient = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst patients = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\t[Query.equal('userId', userId)]\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(patients.documents[0]);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async ({\r\n+\tidentificationDocument,\r\n+\t...patient\r\n+}: RegisterUserParams) => {\r\n+\ttry {\r\n+\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n+\t\tlet file;\r\n+\t\tif (identificationDocument) {\r\n+\t\t\tconst inputFile =\r\n+\t\t\t\tidentificationDocument &&\r\n+\t\t\t\tInputFile.fromBuffer(\r\n+\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n+\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n+\t\t\t\t);\r\n+\r\n+\t\t\tfile = await storage.createFile(\r\n+\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n+\t\t\t\tID.unique(),\r\n+\t\t\t\tinputFile\r\n+\t\t\t);\r\n+\t\t}\r\n+\r\n+\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n+\t\t\t\tidentificationDocumentUrl: file?.$id\r\n+\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n+\t\t\t\t\t: null,\r\n+\t\t\t\t...patient,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1723536447193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n \t\tawait account.updatePhone(user.phone,\tuser.password);\r\n \t\t\r\n \t\treturn { error: false, data: parseStringify(newUser) };\r\n \t} catch (error: any) {\r\n+\t\tconsole.log(error)\r\n \t\tif (error && error?.code === 409) {\r\n \t\t\treturn { error: getErrorMessage(error) };\r\n \t\t}\r\n \t\tif (error && error?.code === 404) {\r\n@@ -114,117 +115,4 @@\n \t} catch (error) {\r\n \t\tconsole.error('An error occurred while creating a new patient:', error);\r\n \t}\r\n };\r\n-'use server';\r\n-import { Query, ID } from 'node-appwrite';\r\n-import { InputFile } from 'node-appwrite/file';\r\n-import {\r\n-\tusers,\r\n-\taccount,\r\n-\tstorage,\r\n-\tNEXT_PUBLIC_BUCKET_ID,\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-\tNEXT_PUBLIC_ENDPOINT,\r\n-\tPROJECT_ID,\r\n-} from '../appwite.config';\r\n-import { getErrorMessage, parseStringify } from '../utils';\r\n-\r\n-export const createUser = async (user: CreateUserParams) => {\r\n-\ttry {\r\n-\t\tconst newUser = await account.create(\r\n-\t\t\tID.unique(),\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.password,\r\n-\t\t\tuser.name,\r\n-\t\t);\r\n-\t\tawait account.updatePhone(user.phone,\tuser.password);\r\n-\t\t\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error && error?.code === 409) {\r\n-\t\t\treturn { error: getErrorMessage(error) };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const loginUser = async (user: LoginUser) => {\r\n-\ttry {\r\n-\t\tconst newUser = await users.create(\r\n-\t\t\tID.unique(),\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.password\r\n-\t\t);\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error && error?.code === 409) {\r\n-\t\t\treturn { error: getErrorMessage(error) };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const getUser = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst user = await users.get(userId);\r\n-\t\treturn parseStringify(user);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst patients = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\t[Query.equal('userId', userId)]\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(patients.documents[0]);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const registerPatient = async ({\r\n-\tidentificationDocument,\r\n-\t...patient\r\n-}: RegisterUserParams) => {\r\n-\ttry {\r\n-\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n-\t\tlet file;\r\n-\t\tif (identificationDocument) {\r\n-\t\t\tconst inputFile =\r\n-\t\t\t\tidentificationDocument &&\r\n-\t\t\t\tInputFile.fromBuffer(\r\n-\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n-\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n-\t\t\t\t);\r\n-\r\n-\t\t\tfile = await storage.createFile(\r\n-\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n-\t\t\t\tID.unique(),\r\n-\t\t\t\tinputFile\r\n-\t\t\t);\r\n-\t\t}\r\n-\r\n-\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n-\t\t\t\tidentificationDocumentUrl: file?.$id\r\n-\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n-\t\t\t\t\t: null,\r\n-\t\t\t\t...patient,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n-\t}\r\n-};\r\n"
                },
                {
                    "date": 1723536495840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,14 +27,11 @@\n \t\t\r\n \t\treturn { error: false, data: parseStringify(newUser) };\r\n \t} catch (error: any) {\r\n \t\tconsole.log(error)\r\n-\t\tif (error && error?.code === 409) {\r\n+\t\tif (error) {\r\n \t\t\treturn { error: getErrorMessage(error) };\r\n \t\t}\r\n-\t\tif (error && error?.code === 404) {\r\n-\t\t\treturn { error: getErrorMessage(error) };\r\n-\t\t}\r\n \t}\r\n };\r\n \r\n export const loginUser = async (user: LoginUser) => {\r\n"
                },
                {
                    "date": 1723537014473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,13 +22,10 @@\n \t\t\tuser.password,\r\n \t\t\tuser.name,\r\n \t\t);\r\n \r\n-\t\tawait account.updatePhone(user.phone,\tuser.password);\r\n-\t\t\r\n \t\treturn { error: false, data: parseStringify(newUser) };\r\n \t} catch (error: any) {\r\n-\t\tconsole.log(error)\r\n \t\tif (error) {\r\n \t\t\treturn { error: getErrorMessage(error) };\r\n \t\t}\r\n \t}\r\n"
                },
                {
                    "date": 1723541221375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,110 @@\n+'use server';\r\n+import { Query, ID } from 'node-appwrite';\r\n+import { InputFile } from 'node-appwrite/file';\r\n+import {\r\n+\tusers,\r\n+\taccount,\r\n+\tstorage,\r\n+\tNEXT_PUBLIC_BUCKET_ID,\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+\tNEXT_PUBLIC_ENDPOINT,\r\n+\tPROJECT_ID,\r\n+} from '../appwite.config';\r\n+import { getErrorMessage, parseStringify } from '../utils';\r\n+\r\n+export const createUser = async (user: CreateUserParams) => {\r\n+\ttry {\r\n+\t\tconst newUser = await account.createEmailPasswordSession(\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.password\r\n+\t\t);\r\n+\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error) {\r\n+\t\t\treturn { error: getErrorMessage(error) };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const loginUser = async (user: LoginUser) => {\r\n+\ttry {\r\n+\t\tconst newUser = await users.create(\r\n+\t\t\tID.unique(),\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.password\r\n+\t\t);\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error && error?.code === 409) {\r\n+\t\t\treturn { error: getErrorMessage(error) };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const getUser = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst user = await users.get(userId);\r\n+\t\treturn parseStringify(user);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const getPatient = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst patients = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\t[Query.equal('userId', userId)]\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(patients.documents[0]);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async ({\r\n+\tidentificationDocument,\r\n+\t...patient\r\n+}: RegisterUserParams) => {\r\n+\ttry {\r\n+\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n+\t\tlet file;\r\n+\t\tif (identificationDocument) {\r\n+\t\t\tconst inputFile =\r\n+\t\t\t\tidentificationDocument &&\r\n+\t\t\t\tInputFile.fromBuffer(\r\n+\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n+\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n+\t\t\t\t);\r\n+\r\n+\t\t\tfile = await storage.createFile(\r\n+\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n+\t\t\t\tID.unique(),\r\n+\t\t\t\tinputFile\r\n+\t\t\t);\r\n+\t\t}\r\n+\r\n+\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n+\t\t\t\tidentificationDocumentUrl: file?.$id\r\n+\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n+\t\t\t\t\t: null,\r\n+\t\t\t\t...patient,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1723541240325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,111 @@\n+'use server';\r\n+import { Query, ID } from 'node-appwrite';\r\n+import { InputFile } from 'node-appwrite/file';\r\n+import {\r\n+\tusers,\r\n+\taccount,\r\n+\tstorage,\r\n+\tNEXT_PUBLIC_BUCKET_ID,\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+\tNEXT_PUBLIC_ENDPOINT,\r\n+\tPROJECT_ID,\r\n+} from '../appwite.config';\r\n+import { getErrorMessage, parseStringify } from '../utils';\r\n+\r\n+export const createUser = async (user: CreateUserParams) => {\r\n+\ttry {\r\n+\t\tconst useLogged = await account.createEmailPasswordSession(\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.password\r\n+\t\t);\r\n+\t\tconsole.log(useLogged)\r\n+\r\n+\t\treturn { error: false, data: parseStringify(useLogged) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error) {\r\n+\t\t\treturn { error: getErrorMessage(error) };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const loginUser = async (user: LoginUser) => {\r\n+\ttry {\r\n+\t\tconst newUser = await users.create(\r\n+\t\t\tID.unique(),\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.password\r\n+\t\t);\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error && error?.code === 409) {\r\n+\t\t\treturn { error: getErrorMessage(error) };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const getUser = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst user = await users.get(userId);\r\n+\t\treturn parseStringify(user);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const getPatient = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst patients = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\t[Query.equal('userId', userId)]\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(patients.documents[0]);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async ({\r\n+\tidentificationDocument,\r\n+\t...patient\r\n+}: RegisterUserParams) => {\r\n+\ttry {\r\n+\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n+\t\tlet file;\r\n+\t\tif (identificationDocument) {\r\n+\t\t\tconst inputFile =\r\n+\t\t\t\tidentificationDocument &&\r\n+\t\t\t\tInputFile.fromBuffer(\r\n+\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n+\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n+\t\t\t\t);\r\n+\r\n+\t\t\tfile = await storage.createFile(\r\n+\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n+\t\t\t\tID.unique(),\r\n+\t\t\t\tinputFile\r\n+\t\t\t);\r\n+\t\t}\r\n+\r\n+\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n+\t\t\t\tidentificationDocumentUrl: file?.$id\r\n+\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n+\t\t\t\t\t: null,\r\n+\t\t\t\t...patient,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1723541324253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n \t}\r\n };\r\n \r\n export const loginUser = async (user: LoginUser) => {\r\n+\tconsole.log('auth')\r\n \ttry {\r\n \t\tconst newUser = await users.create(\r\n \t\t\tID.unique(),\r\n \t\t\tuser.email,\r\n@@ -108,226 +109,4 @@\n \t} catch (error) {\r\n \t\tconsole.error('An error occurred while creating a new patient:', error);\r\n \t}\r\n };\r\n-'use server';\r\n-import { Query, ID } from 'node-appwrite';\r\n-import { InputFile } from 'node-appwrite/file';\r\n-import {\r\n-\tusers,\r\n-\taccount,\r\n-\tstorage,\r\n-\tNEXT_PUBLIC_BUCKET_ID,\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-\tNEXT_PUBLIC_ENDPOINT,\r\n-\tPROJECT_ID,\r\n-} from '../appwite.config';\r\n-import { getErrorMessage, parseStringify } from '../utils';\r\n-\r\n-export const createUser = async (user: CreateUserParams) => {\r\n-\ttry {\r\n-\t\tconst newUser = await account.createEmailPasswordSession(\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.password\r\n-\t\t);\r\n-\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error) {\r\n-\t\t\treturn { error: getErrorMessage(error) };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const loginUser = async (user: LoginUser) => {\r\n-\ttry {\r\n-\t\tconst newUser = await users.create(\r\n-\t\t\tID.unique(),\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.password\r\n-\t\t);\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error && error?.code === 409) {\r\n-\t\t\treturn { error: getErrorMessage(error) };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const getUser = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst user = await users.get(userId);\r\n-\t\treturn parseStringify(user);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst patients = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\t[Query.equal('userId', userId)]\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(patients.documents[0]);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const registerPatient = async ({\r\n-\tidentificationDocument,\r\n-\t...patient\r\n-}: RegisterUserParams) => {\r\n-\ttry {\r\n-\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n-\t\tlet file;\r\n-\t\tif (identificationDocument) {\r\n-\t\t\tconst inputFile =\r\n-\t\t\t\tidentificationDocument &&\r\n-\t\t\t\tInputFile.fromBuffer(\r\n-\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n-\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n-\t\t\t\t);\r\n-\r\n-\t\t\tfile = await storage.createFile(\r\n-\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n-\t\t\t\tID.unique(),\r\n-\t\t\t\tinputFile\r\n-\t\t\t);\r\n-\t\t}\r\n-\r\n-\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n-\t\t\t\tidentificationDocumentUrl: file?.$id\r\n-\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n-\t\t\t\t\t: null,\r\n-\t\t\t\t...patient,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n-\t}\r\n-};\r\n-'use server';\r\n-import { Query, ID } from 'node-appwrite';\r\n-import { InputFile } from 'node-appwrite/file';\r\n-import {\r\n-\tusers,\r\n-\taccount,\r\n-\tstorage,\r\n-\tNEXT_PUBLIC_BUCKET_ID,\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-\tNEXT_PUBLIC_ENDPOINT,\r\n-\tPROJECT_ID,\r\n-} from '../appwite.config';\r\n-import { getErrorMessage, parseStringify } from '../utils';\r\n-\r\n-export const createUser = async (user: CreateUserParams) => {\r\n-\ttry {\r\n-\t\tconst newUser = await account.create(\r\n-\t\t\tID.unique(),\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.password,\r\n-\t\t\tuser.name,\r\n-\t\t);\r\n-\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error) {\r\n-\t\t\treturn { error: getErrorMessage(error) };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const loginUser = async (user: LoginUser) => {\r\n-\ttry {\r\n-\t\tconst newUser = await users.create(\r\n-\t\t\tID.unique(),\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.password\r\n-\t\t);\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error && error?.code === 409) {\r\n-\t\t\treturn { error: getErrorMessage(error) };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const getUser = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst user = await users.get(userId);\r\n-\t\treturn parseStringify(user);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst patients = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\t[Query.equal('userId', userId)]\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(patients.documents[0]);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const registerPatient = async ({\r\n-\tidentificationDocument,\r\n-\t...patient\r\n-}: RegisterUserParams) => {\r\n-\ttry {\r\n-\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n-\t\tlet file;\r\n-\t\tif (identificationDocument) {\r\n-\t\t\tconst inputFile =\r\n-\t\t\t\tidentificationDocument &&\r\n-\t\t\t\tInputFile.fromBuffer(\r\n-\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n-\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n-\t\t\t\t);\r\n-\r\n-\t\t\tfile = await storage.createFile(\r\n-\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n-\t\t\t\tID.unique(),\r\n-\t\t\t\tinputFile\r\n-\t\t\t);\r\n-\t\t}\r\n-\r\n-\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n-\t\t\t\tidentificationDocumentUrl: file?.$id\r\n-\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n-\t\t\t\t\t: null,\r\n-\t\t\t\t...patient,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n-\t}\r\n-};\r\n"
                },
                {
                    "date": 1723541555440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,27 +15,27 @@\n import { getErrorMessage, parseStringify } from '../utils';\r\n \r\n export const createUser = async (user: CreateUserParams) => {\r\n \ttry {\r\n-\t\tconst useLogged = await account.createEmailPasswordSession(\r\n+\t\tconst newUser = await account.create(\r\n+\t\t\tID.unique(),\r\n \t\t\tuser.email,\r\n-\t\t\tuser.password\r\n+\t\t\tuser.password,\r\n+\t\t\tuser.name,\r\n \t\t);\r\n-\t\tconsole.log(useLogged)\r\n \r\n-\t\treturn { error: false, data: parseStringify(useLogged) };\r\n+\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n \t} catch (error: any) {\r\n \t\tif (error) {\r\n \t\t\treturn { error: getErrorMessage(error) };\r\n \t\t}\r\n \t}\r\n };\r\n \r\n export const loginUser = async (user: LoginUser) => {\r\n-\tconsole.log('auth')\r\n \ttry {\r\n-\t\tconst newUser = await users.create(\r\n-\t\t\tID.unique(),\r\n+\t\tconst newUser = await account.createEmailPasswordSession(\r\n \t\t\tuser.email,\r\n \t\t\tuser.password\r\n \t\t);\r\n \t\treturn { error: false, data: parseStringify(newUser) };\r\n"
                },
                {
                    "date": 1723541695807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n \t\t}\r\n \t}\r\n };\r\n \r\n-export const loginUser = async (user: LoginUser) => {\r\n+export const lossginUser = async (user: LoginUser) => {\r\n \ttry {\r\n \t\tconst newUser = await account.createEmailPasswordSession(\r\n \t\t\tuser.email,\r\n \t\t\tuser.password\r\n"
                },
                {
                    "date": 1723542691949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,112 @@\n+'use server';\r\n+import { Query, ID } from 'node-appwrite';\r\n+import { InputFile } from 'node-appwrite/file';\r\n+import {\r\n+\tusers,\r\n+\taccount,\r\n+\tstorage,\r\n+\tNEXT_PUBLIC_BUCKET_ID,\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+\tNEXT_PUBLIC_ENDPOINT,\r\n+\tPROJECT_ID,\r\n+} from '../appwite.config';\r\n+import { getErrorMessage, parseStringify } from '../utils';\r\n+\r\n+export const createUser = async (user: CreateUserParams) => {\r\n+\ttry {\r\n+\t\tconst newUser = await account.create(\r\n+\t\t\tID.unique(),\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.password,\r\n+\t\t\tuser.name,\r\n+\t\t);\r\n+\r\n+\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error) {\r\n+\t\t\treturn { error: getErrorMessage(error) };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const loginUser = async (user: LoginUser) => {\r\n+\ttry {\r\n+\t\tconst newUser = await account.createEmailPasswordSession(\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.password\r\n+\t\t);\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error && error?.code === 409) {\r\n+\t\t\treturn { error: getErrorMessage(error) };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const getUser = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst user = await users.get(userId);\r\n+\t\treturn parseStringify(user);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const getPatient = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst patients = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\t[Query.equal('userId', userId)]\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(patients.documents[0]);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async ({\r\n+\tidentificationDocument,\r\n+\t...patient\r\n+}: RegisterUserParams) => {\r\n+\ttry {\r\n+\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n+\t\tlet file;\r\n+\t\tif (identificationDocument) {\r\n+\t\t\tconst inputFile =\r\n+\t\t\t\tidentificationDocument &&\r\n+\t\t\t\tInputFile.fromBuffer(\r\n+\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n+\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n+\t\t\t\t);\r\n+\r\n+\t\t\tfile = await storage.createFile(\r\n+\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n+\t\t\t\tID.unique(),\r\n+\t\t\t\tinputFile\r\n+\t\t\t);\r\n+\t\t}\r\n+\r\n+\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n+\t\t\t\tidentificationDocumentUrl: file?.$id\r\n+\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n+\t\t\t\t\t: null,\r\n+\t\t\t\t...patient,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1723693929768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,110 @@\n+'use server';\r\n+import { Query, ID } from 'node-appwrite';\r\n+import { InputFile } from 'node-appwrite/file';\r\n+import {\r\n+\tusers,\r\n+\taccount,\r\n+\tstorage,\r\n+\tNEXT_PUBLIC_BUCKET_ID,\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+\tNEXT_PUBLIC_ENDPOINT,\r\n+\tPROJECT_ID,\r\n+} from '../appwite.config';\r\n+import { getErrorMessage, parseStringify } from '../utils';\r\n+\r\n+export const createUser = async (user: CreateUserParams) => {\r\n+\ttry {\r\n+\t\tconst newUser = await account.create(\r\n+\t\t\tID.unique(),\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.password,\r\n+\t\t\tuser.name,\r\n+\t\t);\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error) {\r\n+\t\t\treturn { error: getErrorMessage(error) };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const loginUser = async (user: LoginUser) => {\r\n+\ttry {\r\n+\t\tconst newUser = await account.createEmailPasswordSession(\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.password\r\n+\t\t);\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error && error?.code === 409) {\r\n+\t\t\treturn { error: getErrorMessage(error) };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const getUser = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst user = await users.get(userId);\r\n+\t\treturn parseStringify(user);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const getPatient = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst patients = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\t[Query.equal('userId', userId)]\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(patients.documents[0]);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async ({\r\n+\tidentificationDocument,\r\n+\t...patient\r\n+}: RegisterUserParams) => {\r\n+\ttry {\r\n+\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n+\t\tlet file;\r\n+\t\tif (identificationDocument) {\r\n+\t\t\tconst inputFile =\r\n+\t\t\t\tidentificationDocument &&\r\n+\t\t\t\tInputFile.fromBuffer(\r\n+\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n+\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n+\t\t\t\t);\r\n+\r\n+\t\t\tfile = await storage.createFile(\r\n+\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n+\t\t\t\tID.unique(),\r\n+\t\t\t\tinputFile\r\n+\t\t\t);\r\n+\t\t}\r\n+\r\n+\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n+\t\t\t\tidentificationDocumentUrl: file?.$id\r\n+\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n+\t\t\t\t\t: null,\r\n+\t\t\t\t...patient,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1723693963317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,22 +29,8 @@\n \t\t}\r\n \t}\r\n };\r\n \r\n-export const loginUser = async (user: LoginUser) => {\r\n-\ttry {\r\n-\t\tconst newUser = await account.createEmailPasswordSession(\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.password\r\n-\t\t);\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error && error?.code === 409) {\r\n-\t\t\treturn { error: getErrorMessage(error) };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n export const getUser = async (userId: string) => {\r\n \ttry {\r\n \t\tconst user = await users.get(userId);\r\n \t\treturn parseStringify(user);\r\n@@ -107,228 +93,4 @@\n \t} catch (error) {\r\n \t\tconsole.error('An error occurred while creating a new patient:', error);\r\n \t}\r\n };\r\n-'use server';\r\n-import { Query, ID } from 'node-appwrite';\r\n-import { InputFile } from 'node-appwrite/file';\r\n-import {\r\n-\tusers,\r\n-\taccount,\r\n-\tstorage,\r\n-\tNEXT_PUBLIC_BUCKET_ID,\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-\tNEXT_PUBLIC_ENDPOINT,\r\n-\tPROJECT_ID,\r\n-} from '../appwite.config';\r\n-import { getErrorMessage, parseStringify } from '../utils';\r\n-\r\n-export const createUser = async (user: CreateUserParams) => {\r\n-\ttry {\r\n-\t\tconst newUser = await account.create(\r\n-\t\t\tID.unique(),\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.password,\r\n-\t\t\tuser.name,\r\n-\t\t);\r\n-\r\n-\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error) {\r\n-\t\t\treturn { error: getErrorMessage(error) };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const loginUser = async (user: LoginUser) => {\r\n-\ttry {\r\n-\t\tconst newUser = await account.createEmailPasswordSession(\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.password\r\n-\t\t);\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error && error?.code === 409) {\r\n-\t\t\treturn { error: getErrorMessage(error) };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const getUser = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst user = await users.get(userId);\r\n-\t\treturn parseStringify(user);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst patients = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\t[Query.equal('userId', userId)]\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(patients.documents[0]);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const registerPatient = async ({\r\n-\tidentificationDocument,\r\n-\t...patient\r\n-}: RegisterUserParams) => {\r\n-\ttry {\r\n-\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n-\t\tlet file;\r\n-\t\tif (identificationDocument) {\r\n-\t\t\tconst inputFile =\r\n-\t\t\t\tidentificationDocument &&\r\n-\t\t\t\tInputFile.fromBuffer(\r\n-\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n-\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n-\t\t\t\t);\r\n-\r\n-\t\t\tfile = await storage.createFile(\r\n-\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n-\t\t\t\tID.unique(),\r\n-\t\t\t\tinputFile\r\n-\t\t\t);\r\n-\t\t}\r\n-\r\n-\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n-\t\t\t\tidentificationDocumentUrl: file?.$id\r\n-\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n-\t\t\t\t\t: null,\r\n-\t\t\t\t...patient,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n-\t}\r\n-};\r\n-'use server';\r\n-import { Query, ID } from 'node-appwrite';\r\n-import { InputFile } from 'node-appwrite/file';\r\n-import {\r\n-\tusers,\r\n-\taccount,\r\n-\tstorage,\r\n-\tNEXT_PUBLIC_BUCKET_ID,\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-\tNEXT_PUBLIC_ENDPOINT,\r\n-\tPROJECT_ID,\r\n-} from '../appwite.config';\r\n-import { getErrorMessage, parseStringify } from '../utils';\r\n-\r\n-export const createUser = async (user: CreateUserParams) => {\r\n-\ttry {\r\n-\t\tconst newUser = await account.create(\r\n-\t\t\tID.unique(),\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.password,\r\n-\t\t\tuser.name,\r\n-\t\t);\r\n-\r\n-\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error) {\r\n-\t\t\treturn { error: getErrorMessage(error) };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const lossginUser = async (user: LoginUser) => {\r\n-\ttry {\r\n-\t\tconst newUser = await account.createEmailPasswordSession(\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.password\r\n-\t\t);\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error && error?.code === 409) {\r\n-\t\t\treturn { error: getErrorMessage(error) };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const getUser = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst user = await users.get(userId);\r\n-\t\treturn parseStringify(user);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst patients = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\t[Query.equal('userId', userId)]\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(patients.documents[0]);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const registerPatient = async ({\r\n-\tidentificationDocument,\r\n-\t...patient\r\n-}: RegisterUserParams) => {\r\n-\ttry {\r\n-\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n-\t\tlet file;\r\n-\t\tif (identificationDocument) {\r\n-\t\t\tconst inputFile =\r\n-\t\t\t\tidentificationDocument &&\r\n-\t\t\t\tInputFile.fromBuffer(\r\n-\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n-\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n-\t\t\t\t);\r\n-\r\n-\t\t\tfile = await storage.createFile(\r\n-\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n-\t\t\t\tID.unique(),\r\n-\t\t\t\tinputFile\r\n-\t\t\t);\r\n-\t\t}\r\n-\r\n-\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n-\t\t\t\tidentificationDocumentUrl: file?.$id\r\n-\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n-\t\t\t\t\t: null,\r\n-\t\t\t\t...patient,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n-\t}\r\n-};\r\n"
                },
                {
                    "date": 1723735241748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n 'use server';\r\n import { Query, ID } from 'node-appwrite';\r\n import { InputFile } from 'node-appwrite/file';\r\n import {\r\n-\tusers,\r\n \taccount,\r\n \tstorage,\r\n \tNEXT_PUBLIC_BUCKET_ID,\r\n \tdatabases,\r\n@@ -31,10 +30,10 @@\n };\r\n \r\n export const getUser = async (userId: string) => {\r\n \ttry {\r\n-\t\tconst user = await users.get(userId);\r\n-\t\treturn parseStringify(user);\r\n+\t\t// const user = await users.get(userId);\r\n+\t\t// return parseStringify(user);\r\n \t} catch (error: any) {\r\n \t\tconsole.log(error);\r\n \t}\r\n };\r\n"
                },
                {
                    "date": 1723950317932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,41 @@\n+'use server';\r\n+import { Query, ID } from 'node-appwrite';\r\n+import { InputFile } from 'node-appwrite/file';\r\n+import {\r\n+\taccount,\r\n+\tstorage,\r\n+\tNEXT_PUBLIC_BUCKET_ID,\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+\tNEXT_PUBLIC_ENDPOINT,\r\n+\tPROJECT_ID,\r\n+} from '../appwite.config';\r\n+import { getErrorMessage, parseStringify } from '../utils';\r\n+\r\n+\r\n+export const getPatient = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst patients = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\t[Query.equal('userId', userId)]\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(patients.documents[0]);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async ({\r\n+\tidentificationDocument,\r\n+\t...patient\r\n+}: RegisterUserParams) => {\r\n+\ttry {\r\n+\r\n+\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1723952743765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,36 @@\n+'use server';\r\n+import { Query, ID } from 'node-appwrite';\r\n+import { InputFile } from 'node-appwrite/file';\r\n+import {\r\n+\taccount,\r\n+\tstorage,\r\n+\tNEXT_PUBLIC_BUCKET_ID,\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+\tNEXT_PUBLIC_ENDPOINT,\r\n+\tPROJECT_ID,\r\n+} from '../appwite.config';\r\n+import { getErrorMessage, parseStringify } from '../utils';\r\n+\r\n+export const getPatient = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst patients = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\t[Query.equal('userId', userId)]\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(patients.documents[0]);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async (patient: RegisterUserParams) => {\r\n+\ttry {\r\n+\t\tconsole.log(patient)\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1723964753218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,140 +33,4 @@\n \t} catch (error) {\r\n \t\tconsole.error('An error occurred while creating a new patient:', error);\r\n \t}\r\n };\r\n-'use server';\r\n-import { Query, ID } from 'node-appwrite';\r\n-import { InputFile } from 'node-appwrite/file';\r\n-import {\r\n-\taccount,\r\n-\tstorage,\r\n-\tNEXT_PUBLIC_BUCKET_ID,\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-\tNEXT_PUBLIC_ENDPOINT,\r\n-\tPROJECT_ID,\r\n-} from '../appwite.config';\r\n-import { getErrorMessage, parseStringify } from '../utils';\r\n-\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst patients = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\t[Query.equal('userId', userId)]\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(patients.documents[0]);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const registerPatient = async ({\r\n-\tidentificationDocument,\r\n-\t...patient\r\n-}: RegisterUserParams) => {\r\n-\ttry {\r\n-\r\n-\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n-\t}\r\n-};\r\n-'use server';\r\n-import { Query, ID } from 'node-appwrite';\r\n-import { InputFile } from 'node-appwrite/file';\r\n-import {\r\n-\taccount,\r\n-\tstorage,\r\n-\tNEXT_PUBLIC_BUCKET_ID,\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-\tNEXT_PUBLIC_ENDPOINT,\r\n-\tPROJECT_ID,\r\n-} from '../appwite.config';\r\n-import { getErrorMessage, parseStringify } from '../utils';\r\n-\r\n-export const createUser = async (user: CreateUserParams) => {\r\n-\ttry {\r\n-\t\tconst newUser = await account.create(\r\n-\t\t\tID.unique(),\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.password,\r\n-\t\t\tuser.name,\r\n-\t\t);\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error) {\r\n-\t\t\treturn { error: getErrorMessage(error) };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const getUser = async (userId: string) => {\r\n-\ttry {\r\n-\t\t// const user = await users.get(userId);\r\n-\t\t// return parseStringify(user);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst patients = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\t[Query.equal('userId', userId)]\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(patients.documents[0]);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const registerPatient = async ({\r\n-\tidentificationDocument,\r\n-\t...patient\r\n-}: RegisterUserParams) => {\r\n-\ttry {\r\n-\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n-\t\tlet file;\r\n-\t\tif (identificationDocument) {\r\n-\t\t\tconst inputFile =\r\n-\t\t\t\tidentificationDocument &&\r\n-\t\t\t\tInputFile.fromBuffer(\r\n-\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n-\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n-\t\t\t\t);\r\n-\r\n-\t\t\tfile = await storage.createFile(\r\n-\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n-\t\t\t\tID.unique(),\r\n-\t\t\t\tinputFile\r\n-\t\t\t);\r\n-\t\t}\r\n-\r\n-\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n-\t\t\t\tidentificationDocumentUrl: file?.$id\r\n-\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n-\t\t\t\t\t: null,\r\n-\t\t\t\t...patient,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n-\t}\r\n-};\r\n"
                },
                {
                    "date": 1723966265379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,36 @@\n+'use server';\r\n+import { Query, ID } from 'node-appwrite';\r\n+import { InputFile } from 'node-appwrite/file';\r\n+import {\r\n+\taccount,\r\n+\tstorage,\r\n+\tNEXT_PUBLIC_BUCKET_ID,\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+\tNEXT_PUBLIC_ENDPOINT,\r\n+\tPROJECT_ID,\r\n+} from '../appwite.config';\r\n+import { getErrorMessage, parseStringify } from '../utils';\r\n+\r\n+export const getPatient = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst patients = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\t[Query.equal('userId', userId)]\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(patients.documents[0]);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async (patient) => {\r\n+\ttry {\r\n+\t\tconsole.log(patient)\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1723966273383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,44 +26,8 @@\n \t\tconsole.log(error);\r\n \t}\r\n };\r\n \r\n-export const registerPatient = async (patient) => {\r\n-\ttry {\r\n-\t\tconsole.log(patient)\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n-\t}\r\n-};\r\n-'use server';\r\n-import { Query, ID } from 'node-appwrite';\r\n-import { InputFile } from 'node-appwrite/file';\r\n-import {\r\n-\taccount,\r\n-\tstorage,\r\n-\tNEXT_PUBLIC_BUCKET_ID,\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-\tNEXT_PUBLIC_ENDPOINT,\r\n-\tPROJECT_ID,\r\n-} from '../appwite.config';\r\n-import { getErrorMessage, parseStringify } from '../utils';\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst patients = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\t[Query.equal('userId', userId)]\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(patients.documents[0]);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n export const registerPatient = async (patient: RegisterUserParams) => {\r\n \ttry {\r\n \t\tconsole.log(patient)\r\n \t} catch (error) {\r\n"
                },
                {
                    "date": 1723968033581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,16 @@\n 'use server';\r\n import { Query, ID } from 'node-appwrite';\r\n import { InputFile } from 'node-appwrite/file';\r\n import {\r\n-\taccount,\r\n-\tstorage,\r\n-\tNEXT_PUBLIC_BUCKET_ID,\r\n \tdatabases,\r\n \tDATABASE_ID,\r\n \tPATIENT_COLLECTION_ID,\r\n-\tNEXT_PUBLIC_ENDPOINT,\r\n-\tPROJECT_ID,\r\n } from '../appwite.config';\r\n-import { getErrorMessage, parseStringify } from '../utils';\r\n+import { parseStringify } from '../utils';\r\n+import { z } from 'zod';\r\n+import { PatientFormValidation } from '../validation';\r\n+import { AuthError } from 'next-auth';\r\n \r\n export const getPatient = async (userId: string) => {\r\n \ttry {\r\n \t\tconst patients = await databases.listDocuments(\r\n@@ -26,11 +24,17 @@\n \t\tconsole.log(error);\r\n \t}\r\n };\r\n \r\n-export const registerPatient = async (patient: RegisterUserParams) => {\r\n+export const registerPatient = async (\r\n+\tvalues: z.infer<typeof PatientFormValidation>\r\n+) => {\r\n \ttry {\r\n-\t\tconsole.log(patient)\r\n+\t\tconst { data, success } = PatientFormValidation.safeParse(values);\r\n+\t\tconsole.log(data);\r\n \t} catch (error) {\r\n-\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n \t}\r\n };\r\n"
                },
                {
                    "date": 1723968129726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n \tvalues: z.infer<typeof PatientFormValidation>\r\n ) => {\r\n \ttry {\r\n \t\tconst { data, success } = PatientFormValidation.safeParse(values);\r\n-\t\tconsole.log(data);\r\n+\t\tconsole.log(data, success);\r\n \t} catch (error) {\r\n \t\tif (error instanceof AuthError) {\r\n \t\t\treturn { error: error.cause?.err?.message };\r\n \t\t}\r\n"
                },
                {
                    "date": 1723968370563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n import { parseStringify } from '../utils';\r\n import { z } from 'zod';\r\n import { PatientFormValidation } from '../validation';\r\n import { AuthError } from 'next-auth';\r\n+import { db } from '../db';\r\n \r\n export const getPatient = async (userId: string) => {\r\n \ttry {\r\n \t\tconst patients = await databases.listDocuments(\r\n@@ -29,9 +30,17 @@\n \tvalues: z.infer<typeof PatientFormValidation>\r\n ) => {\r\n \ttry {\r\n \t\tconst { data, success } = PatientFormValidation.safeParse(values);\r\n-\t\tconsole.log(data, success);\r\n+\t\tif (!success) {\r\n+\t\t\treturn {\r\n+\t\t\t\terror: 'Invalid data',\r\n+\t\t\t};\r\n+\t\t}\r\n+\t\tconst response = await db.user.create({\r\n+\t\t\tdata,\r\n+\t\t});\r\n+\t\tconsole.log(response)\r\n \t} catch (error) {\r\n \t\tif (error instanceof AuthError) {\r\n \t\t\treturn { error: error.cause?.err?.message };\r\n \t\t}\r\n"
                },
                {
                    "date": 1723968638642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n \t\t\treturn {\r\n \t\t\t\terror: 'Invalid data',\r\n \t\t\t};\r\n \t\t}\r\n-\t\tconst response = await db.user.create({\r\n+\t\tconst response = await db.patients.create({\r\n \t\t\tdata,\r\n \t\t});\r\n \t\tconsole.log(response)\r\n \t} catch (error) {\r\n"
                },
                {
                    "date": 1723968767296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,12 +35,16 @@\n \t\t\treturn {\r\n \t\t\t\terror: 'Invalid data',\r\n \t\t\t};\r\n \t\t}\r\n-\t\tconst response = await db.patients.create({\r\n-\t\t\tdata,\r\n+\t\tconst res = await db.user.create({\r\n+\t\t\tdata: {\r\n+\t\t\t\temail: data.email,\r\n+\t\t\t\tname: data.name,\r\n+\t\t\t\tpassword: passwordHash,\r\n+\t\t\t},\r\n \t\t});\r\n-\t\tconsole.log(response)\r\n+\t\tconsole.log(res);\r\n \t} catch (error) {\r\n \t\tif (error instanceof AuthError) {\r\n \t\t\treturn { error: error.cause?.err?.message };\r\n \t\t}\r\n"
                },
                {
                    "date": 1723968787738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,13 +36,9 @@\n \t\t\t\terror: 'Invalid data',\r\n \t\t\t};\r\n \t\t}\r\n \t\tconst res = await db.user.create({\r\n-\t\t\tdata: {\r\n-\t\t\t\temail: data.email,\r\n-\t\t\t\tname: data.name,\r\n-\t\t\t\tpassword: passwordHash,\r\n-\t\t\t},\r\n+\t\t\tdata,\r\n \t\t});\r\n \t\tconsole.log(res);\r\n \t} catch (error) {\r\n \t\tif (error instanceof AuthError) {\r\n"
                },
                {
                    "date": 1723969054697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,15 +30,16 @@\n \tvalues: z.infer<typeof PatientFormValidation>\r\n ) => {\r\n \ttry {\r\n \t\tconst { data, success } = PatientFormValidation.safeParse(values);\r\n+\t\tconsole.log(data)\r\n \t\tif (!success) {\r\n \t\t\treturn {\r\n \t\t\t\terror: 'Invalid data',\r\n \t\t\t};\r\n \t\t}\r\n-\t\tconst res = await db.user.create({\r\n-\t\t\tdata,\r\n+\t\tconst res = await db.patients.create({\r\n+\t\t\tdata: values\r\n \t\t});\r\n \t\tconsole.log(res);\r\n \t} catch (error) {\r\n \t\tif (error instanceof AuthError) {\r\n"
                },
                {
                    "date": 1723969462957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+'use server';\r\n+import { Query, ID } from 'node-appwrite';\r\n+import { InputFile } from 'node-appwrite/file';\r\n+import {\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+import { z } from 'zod';\r\n+import { PatientFormValidation } from '../validation';\r\n+import { AuthError } from 'next-auth';\r\n+import { db } from '../db';\r\n+\r\n+export const getPatient = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst patients = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\t[Query.equal('userId', userId)]\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(patients.documents[0]);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async (\r\n+\tvalues: z.infer<typeof PatientFormValidation>\r\n+) => {\r\n+\ttry {\r\n+\t\tconst { data, success } = PatientFormValidation.safeParse(values);\r\n+\t\tif (!success) {\r\n+\t\t\treturn {\r\n+\t\t\t\terror: 'Invalid data',\r\n+\t\t\t};\r\n+\t\t}\r\n+\t\tconst res = await db.patients.create({\r\n+\t\t\tdata: data\r\n+\t\t});\r\n+\t\tconsole.log(res);\r\n+\t} catch (error) {\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1723969569329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,54 +46,4 @@\n \t\t}\r\n \t\treturn { error: 'error 500' };\r\n \t}\r\n };\r\n-'use server';\r\n-import { Query, ID } from 'node-appwrite';\r\n-import { InputFile } from 'node-appwrite/file';\r\n-import {\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-import { z } from 'zod';\r\n-import { PatientFormValidation } from '../validation';\r\n-import { AuthError } from 'next-auth';\r\n-import { db } from '../db';\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst patients = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\t[Query.equal('userId', userId)]\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(patients.documents[0]);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const registerPatient = async (\r\n-\tvalues: z.infer<typeof PatientFormValidation>\r\n-) => {\r\n-\ttry {\r\n-\t\tconst { data, success } = PatientFormValidation.safeParse(values);\r\n-\t\tconsole.log(data)\r\n-\t\tif (!success) {\r\n-\t\t\treturn {\r\n-\t\t\t\terror: 'Invalid data',\r\n-\t\t\t};\r\n-\t\t}\r\n-\t\tconst res = await db.patients.create({\r\n-\t\t\tdata: values\r\n-\t\t});\r\n-\t\tconsole.log(res);\r\n-\t} catch (error) {\r\n-\t\tif (error instanceof AuthError) {\r\n-\t\t\treturn { error: error.cause?.err?.message };\r\n-\t\t}\r\n-\t\treturn { error: 'error 500' };\r\n-\t}\r\n-};\r\n"
                },
                {
                    "date": 1723969588357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n \t\t}\r\n \t\tconst res = await db.patients.create({\r\n \t\t\tdata: data\r\n \t\t});\r\n-\t\tconsole.log(res);\r\n+\t\tconsole.log(values);\r\n \t} catch (error) {\r\n \t\tif (error instanceof AuthError) {\r\n \t\t\treturn { error: error.cause?.err?.message };\r\n \t\t}\r\n"
                },
                {
                    "date": 1723969597076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n \t\t\t\terror: 'Invalid data',\r\n \t\t\t};\r\n \t\t}\r\n \t\tconst res = await db.patients.create({\r\n-\t\t\tdata: data\r\n+\t\t\tdata\r\n \t\t});\r\n \t\tconsole.log(values);\r\n \t} catch (error) {\r\n \t\tif (error instanceof AuthError) {\r\n"
                },
                {
                    "date": 1723970006477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,11 +36,11 @@\n \t\t\t\terror: 'Invalid data',\r\n \t\t\t};\r\n \t\t}\r\n \t\tconst res = await db.patients.create({\r\n-\t\t\tdata\r\n+\t\t\tdata: {...data}\r\n \t\t});\r\n-\t\tconsole.log(values);\r\n+\t\tconsole.log(res);\r\n \t} catch (error) {\r\n \t\tif (error instanceof AuthError) {\r\n \t\t\treturn { error: error.cause?.err?.message };\r\n \t\t}\r\n"
                },
                {
                    "date": 1723970342726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+'use server';\r\n+import { Query, ID } from 'node-appwrite';\r\n+import { InputFile } from 'node-appwrite/file';\r\n+import {\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+import { z } from 'zod';\r\n+import { PatientFormValidation } from '../validation';\r\n+import { AuthError } from 'next-auth';\r\n+import { db } from '../db';\r\n+\r\n+export const getPatient = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst patients = await databases.listDocuments(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\t[Query.equal('userId', userId)]\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(patients.documents[0]);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async (\r\n+\tvalues: z.infer<typeof PatientFormValidation>\r\n+) => {\r\n+\ttry {\r\n+\t\tconst { data, success } = PatientFormValidation.safeParse(values);\r\n+\t\tif (!success) {\r\n+\t\t\treturn {\r\n+\t\t\t\terror: 'Invalid data',\r\n+\t\t\t};\r\n+\t\t}\r\n+\t\tconst res = await db.patients.create({\r\n+\t\t\tdata: { ...data, id: '' },\r\n+\t\t});\r\n+\t\tconsole.log(res);\r\n+\t} catch (error) {\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1723970476008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n 'use server';\r\n-import { Query, ID } from 'node-appwrite';\r\n-import { InputFile } from 'node-appwrite/file';\r\n+import { Query } from 'node-appwrite';\r\n import {\r\n \tdatabases,\r\n \tDATABASE_ID,\r\n \tPATIENT_COLLECTION_ID,\r\n@@ -12,19 +11,19 @@\n import { AuthError } from 'next-auth';\r\n import { db } from '../db';\r\n \r\n export const getPatient = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst patients = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\t[Query.equal('userId', userId)]\r\n-\t\t);\r\n+\t// try {\r\n+\t// \tconst patients = await databases.listDocuments(\r\n+\t// \t\tDATABASE_ID!,\r\n+\t// \t\tPATIENT_COLLECTION_ID!,\r\n+\t// \t\t[Query.equal('userId', userId)]\r\n+\t// \t);\r\n \r\n-\t\treturn parseStringify(patients.documents[0]);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n+\t// \treturn parseStringify(patients.documents[0]);\r\n+\t// } catch (error: any) {\r\n+\t// \tconsole.log(error);\r\n+\t// }\r\n };\r\n \r\n export const registerPatient = async (\r\n \tvalues: z.infer<typeof PatientFormValidation>\r\n@@ -46,53 +45,4 @@\n \t\t}\r\n \t\treturn { error: 'error 500' };\r\n \t}\r\n };\r\n-'use server';\r\n-import { Query, ID } from 'node-appwrite';\r\n-import { InputFile } from 'node-appwrite/file';\r\n-import {\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-import { z } from 'zod';\r\n-import { PatientFormValidation } from '../validation';\r\n-import { AuthError } from 'next-auth';\r\n-import { db } from '../db';\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst patients = await databases.listDocuments(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\t[Query.equal('userId', userId)]\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(patients.documents[0]);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const registerPatient = async (\r\n-\tvalues: z.infer<typeof PatientFormValidation>\r\n-) => {\r\n-\ttry {\r\n-\t\tconst { data, success } = PatientFormValidation.safeParse(values);\r\n-\t\tif (!success) {\r\n-\t\t\treturn {\r\n-\t\t\t\terror: 'Invalid data',\r\n-\t\t\t};\r\n-\t\t}\r\n-\t\tconst res = await db.patients.create({\r\n-\t\t\tdata: {...data}\r\n-\t\t});\r\n-\t\tconsole.log(res);\r\n-\t} catch (error) {\r\n-\t\tif (error instanceof AuthError) {\r\n-\t\t\treturn { error: error.cause?.err?.message };\r\n-\t\t}\r\n-\t\treturn { error: 'error 500' };\r\n-\t}\r\n-};\r\n"
                },
                {
                    "date": 1723971516520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,48 @@\n+'use server';\r\n+import { Query } from 'node-appwrite';\r\n+import {\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+import { z } from 'zod';\r\n+import { PatientFormValidation } from '../validation';\r\n+import { AuthError } from 'next-auth';\r\n+import { db } from '../db';\r\n+\r\n+export const getPatient = async (userId: string) => {\r\n+\t// try {\r\n+\t// \tconst patients = await databases.listDocuments(\r\n+\t// \t\tDATABASE_ID!,\r\n+\t// \t\tPATIENT_COLLECTION_ID!,\r\n+\t// \t\t[Query.equal('userId', userId)]\r\n+\t// \t);\r\n+\r\n+\t// \treturn parseStringify(patients.documents[0]);\r\n+\t// } catch (error: any) {\r\n+\t// \tconsole.log(error);\r\n+\t// }\r\n+};\r\n+\r\n+export const registerPatient = async (\r\n+\tvalues: z.infer<typeof PatientFormValidation>\r\n+) => {\r\n+\ttry {\r\n+\t\tconst { data, success } = PatientFormValidation.safeParse(values);\r\n+\t\tif (!success) {\r\n+\t\t\treturn {\r\n+\t\t\t\terror: 'Invalid data',\r\n+\t\t\t};\r\n+\t\t}\r\n+\t\tconst res = await db.patients.create({\r\n+\t\t\tdata: data,\r\n+\t\t});\r\n+\t\tconsole.log(res);\r\n+\t} catch (error) {\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1723971821821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,53 @@\n+'use server';\r\n+import { Query } from 'node-appwrite';\r\n+import {\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+import { z } from 'zod';\r\n+import { PatientFormValidation } from '../validation';\r\n+import { AuthError } from 'next-auth';\r\n+import { db } from '../db';\r\n+\r\n+export const getPatient = async (userId: string) => {\r\n+\t// try {\r\n+\t// \tconst patients = await databases.listDocuments(\r\n+\t// \t\tDATABASE_ID!,\r\n+\t// \t\tPATIENT_COLLECTION_ID!,\r\n+\t// \t\t[Query.equal('userId', userId)]\r\n+\t// \t);\r\n+\r\n+\t// \treturn parseStringify(patients.documents[0]);\r\n+\t// } catch (error: any) {\r\n+\t// \tconsole.log(error);\r\n+\t// }\r\n+};\r\n+\r\n+export const registerPatient = async (\r\n+\tvalues: z.infer<typeof PatientFormValidation>\r\n+) => {\r\n+\ttry {\r\n+\t\tconst { data, success } = PatientFormValidation.safeParse(values);\r\n+\t\tconsole.log(data)\r\n+\t\tif (!success) {\r\n+\t\t\treturn {\r\n+\t\t\t\terror: 'Invalid data',\r\n+\t\t\t};\r\n+\t\t}\r\n+\t\tconst res = await db.patients.create({\r\n+\t\t\tdata: {\r\n+\t\t\t\t...data,\r\n+\t\t\t\tuserId: '123',\r\n+\t\t\t},\r\n+\t\t});\r\n+\t\tconsole.log(data);\r\n+\t\treturn { success: true };\r\n+\t} catch (error) {\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1723971971507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,112 +38,16 @@\n \t\t}\r\n \t\tconst res = await db.patients.create({\r\n \t\t\tdata: {\r\n \t\t\t\t...data,\r\n-\t\t\t\tuserId: '123',\r\n+\t\t\t\tid: '123'\r\n \t\t\t},\r\n \t\t});\r\n-\t\tconsole.log(data);\r\n+\t\tconsole.log(res);\r\n \t\treturn { success: true };\r\n \t} catch (error) {\r\n \t\tif (error instanceof AuthError) {\r\n \t\t\treturn { error: error.cause?.err?.message };\r\n \t\t}\r\n \t\treturn { error: 'error 500' };\r\n \t}\r\n };\r\n-'use server';\r\n-import { Query } from 'node-appwrite';\r\n-import {\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-import { z } from 'zod';\r\n-import { PatientFormValidation } from '../validation';\r\n-import { AuthError } from 'next-auth';\r\n-import { db } from '../db';\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\t// try {\r\n-\t// \tconst patients = await databases.listDocuments(\r\n-\t// \t\tDATABASE_ID!,\r\n-\t// \t\tPATIENT_COLLECTION_ID!,\r\n-\t// \t\t[Query.equal('userId', userId)]\r\n-\t// \t);\r\n-\r\n-\t// \treturn parseStringify(patients.documents[0]);\r\n-\t// } catch (error: any) {\r\n-\t// \tconsole.log(error);\r\n-\t// }\r\n-};\r\n-\r\n-export const registerPatient = async (\r\n-\tvalues: z.infer<typeof PatientFormValidation>\r\n-) => {\r\n-\ttry {\r\n-\t\tconst { data, success } = PatientFormValidation.safeParse(values);\r\n-\t\tif (!success) {\r\n-\t\t\treturn {\r\n-\t\t\t\terror: 'Invalid data',\r\n-\t\t\t};\r\n-\t\t}\r\n-\t\tconst res = await db.patients.create({\r\n-\t\t\tdata: data,\r\n-\t\t});\r\n-\t\tconsole.log(res);\r\n-\t} catch (error) {\r\n-\t\tif (error instanceof AuthError) {\r\n-\t\t\treturn { error: error.cause?.err?.message };\r\n-\t\t}\r\n-\t\treturn { error: 'error 500' };\r\n-\t}\r\n-};\r\n-'use server';\r\n-import { Query } from 'node-appwrite';\r\n-import {\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-import { z } from 'zod';\r\n-import { PatientFormValidation } from '../validation';\r\n-import { AuthError } from 'next-auth';\r\n-import { db } from '../db';\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\t// try {\r\n-\t// \tconst patients = await databases.listDocuments(\r\n-\t// \t\tDATABASE_ID!,\r\n-\t// \t\tPATIENT_COLLECTION_ID!,\r\n-\t// \t\t[Query.equal('userId', userId)]\r\n-\t// \t);\r\n-\r\n-\t// \treturn parseStringify(patients.documents[0]);\r\n-\t// } catch (error: any) {\r\n-\t// \tconsole.log(error);\r\n-\t// }\r\n-};\r\n-\r\n-export const registerPatient = async (\r\n-\tvalues: z.infer<typeof PatientFormValidation>\r\n-) => {\r\n-\ttry {\r\n-\t\tconst { data, success } = PatientFormValidation.safeParse(values);\r\n-\t\tif (!success) {\r\n-\t\t\treturn {\r\n-\t\t\t\terror: 'Invalid data',\r\n-\t\t\t};\r\n-\t\t}\r\n-\t\tconst res = await db.patients.create({\r\n-\t\t\tdata: { ...data, id: '' },\r\n-\t\t});\r\n-\t\tconsole.log(res);\r\n-\t} catch (error) {\r\n-\t\tif (error instanceof AuthError) {\r\n-\t\t\treturn { error: error.cause?.err?.message };\r\n-\t\t}\r\n-\t\treturn { error: 'error 500' };\r\n-\t}\r\n-};\r\n"
                },
                {
                    "date": 1723972494699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,8 @@\n \t\t}\r\n \t\tconst res = await db.patients.create({\r\n \t\t\tdata: {\r\n \t\t\t\t...data,\r\n-\t\t\t\tid: '123'\r\n \t\t\t},\r\n \t\t});\r\n \t\tconsole.log(res);\r\n \t\treturn { success: true };\r\n"
                },
                {
                    "date": 1723972514814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,53 @@\n+'use server';\r\n+import { Query } from 'node-appwrite';\r\n+import {\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+import { z } from 'zod';\r\n+import { PatientFormValidation } from '../validation';\r\n+import { AuthError } from 'next-auth';\r\n+import { db } from '../db';\r\n+\r\n+export const getPatient = async (userId: string) => {\r\n+\t// try {\r\n+\t// \tconst patients = await databases.listDocuments(\r\n+\t// \t\tDATABASE_ID!,\r\n+\t// \t\tPATIENT_COLLECTION_ID!,\r\n+\t// \t\t[Query.equal('userId', userId)]\r\n+\t// \t);\r\n+\r\n+\t// \treturn parseStringify(patients.documents[0]);\r\n+\t// } catch (error: any) {\r\n+\t// \tconsole.log(error);\r\n+\t// }\r\n+};\r\n+\r\n+export const registerPatient = async (\r\n+\tvalues: z.infer<typeof PatientFormValidation>\r\n+) => {\r\n+\ttry {\r\n+\t\tconst { data, success } = PatientFormValidation.safeParse(values);\r\n+\t\tconsole.log(data)\r\n+\t\tif (!success) {\r\n+\t\t\treturn {\r\n+\t\t\t\terror: 'Invalid data',\r\n+\t\t\t};\r\n+\t\t}\r\n+\t\tconst res = await db.patients.create({\r\n+\t\t\tdata: {\r\n+\t\t\t\t...data,\r\n+\t\t\t},\r\n+\t\t});\r\n+\t\tconsole.log(res);\r\n+\t\treturn { success: true };\r\n+\t} catch (error) {\r\n+\t\tconsole.log(error)\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1723973161904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,8 @@\n \t// \t\tDATABASE_ID!,\r\n \t// \t\tPATIENT_COLLECTION_ID!,\r\n \t// \t\t[Query.equal('userId', userId)]\r\n \t// \t);\r\n-\r\n \t// \treturn parseStringify(patients.documents[0]);\r\n \t// } catch (error: any) {\r\n \t// \tconsole.log(error);\r\n \t// }\r\n@@ -29,77 +28,23 @@\n \tvalues: z.infer<typeof PatientFormValidation>\r\n ) => {\r\n \ttry {\r\n \t\tconst { data, success } = PatientFormValidation.safeParse(values);\r\n-\t\tconsole.log(data)\r\n+\t\tconsole.log(data);\r\n \t\tif (!success) {\r\n \t\t\treturn {\r\n \t\t\t\terror: 'Invalid data',\r\n \t\t\t};\r\n \t\t}\r\n \t\tconst res = await db.patients.create({\r\n-\t\t\tdata: {\r\n-\t\t\t\t...data,\r\n-\t\t\t},\r\n+\t\t\tdata,\r\n \t\t});\r\n \t\tconsole.log(res);\r\n \t\treturn { success: true };\r\n \t} catch (error) {\r\n-\t\tconsole.log(error)\r\n+\t\tconsole.log(error);\r\n \t\tif (error instanceof AuthError) {\r\n \t\t\treturn { error: error.cause?.err?.message };\r\n \t\t}\r\n \t\treturn { error: 'error 500' };\r\n \t}\r\n };\r\n-'use server';\r\n-import { Query } from 'node-appwrite';\r\n-import {\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-import { z } from 'zod';\r\n-import { PatientFormValidation } from '../validation';\r\n-import { AuthError } from 'next-auth';\r\n-import { db } from '../db';\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\t// try {\r\n-\t// \tconst patients = await databases.listDocuments(\r\n-\t// \t\tDATABASE_ID!,\r\n-\t// \t\tPATIENT_COLLECTION_ID!,\r\n-\t// \t\t[Query.equal('userId', userId)]\r\n-\t// \t);\r\n-\r\n-\t// \treturn parseStringify(patients.documents[0]);\r\n-\t// } catch (error: any) {\r\n-\t// \tconsole.log(error);\r\n-\t// }\r\n-};\r\n-\r\n-export const registerPatient = async (\r\n-\tvalues: z.infer<typeof PatientFormValidation>\r\n-) => {\r\n-\ttry {\r\n-\t\tconst { data, success } = PatientFormValidation.safeParse(values);\r\n-\t\tconsole.log(data)\r\n-\t\tif (!success) {\r\n-\t\t\treturn {\r\n-\t\t\t\terror: 'Invalid data',\r\n-\t\t\t};\r\n-\t\t}\r\n-\t\tconst res = await db.patients.create({\r\n-\t\t\tdata: {\r\n-\t\t\t\t...data,\r\n-\t\t\t},\r\n-\t\t});\r\n-\t\tconsole.log(res);\r\n-\t\treturn { success: true };\r\n-\t} catch (error) {\r\n-\t\tif (error instanceof AuthError) {\r\n-\t\t\treturn { error: error.cause?.err?.message };\r\n-\t\t}\r\n-\t\treturn { error: 'error 500' };\r\n-\t}\r\n-};\r\n"
                },
                {
                    "date": 1724091431621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+'use server';\r\n+import { Query } from 'node-appwrite';\r\n+import {\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+import { z } from 'zod';\r\n+import { PatientFormValidation } from '../validation';\r\n+import { AuthError } from 'next-auth';\r\n+import { db } from '../db';\r\n+\r\n+export const getPatient = async (userId: string) => {\r\n+\t// try {\r\n+\t// \tconst patients = await databases.listDocuments(\r\n+\t// \t\tDATABASE_ID!,\r\n+\t// \t\tPATIENT_COLLECTION_ID!,\r\n+\t// \t\t[Query.equal('userId', userId)]\r\n+\t// \t);\r\n+\t// \treturn parseStringify(patients.documents[0]);\r\n+\t// } catch (error: any) {\r\n+\t// \tconsole.log(error);\r\n+\t// }\r\n+};\r\n+\r\n+export const registerPatient = async (\r\n+\tvalues: z.infer<typeof PatientFormValidation>\r\n+) => {\r\n+\ttry {\r\n+\t\tconst { data, success } = PatientFormValidation.safeParse(values);\r\n+\t\tconsole.log(data);\r\n+\t\tif (!success) {\r\n+\t\t\treturn {\r\n+\t\t\t\terror: 'Invalid data',\r\n+\t\t\t};\r\n+\t\t}\r\n+\t\tconst { id } = await db.patients.create({\r\n+\t\t\tdata,\r\n+\t\t});\r\n+\t\treturn { success: true, createdId: id };\r\n+\t} catch (error) {\r\n+\t\tconsole.log(error);\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1724091449563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,54 +46,4 @@\n \t\t}\r\n \t\treturn { error: 'error 500' };\r\n \t}\r\n };\r\n-'use server';\r\n-import { Query } from 'node-appwrite';\r\n-import {\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-import { z } from 'zod';\r\n-import { PatientFormValidation } from '../validation';\r\n-import { AuthError } from 'next-auth';\r\n-import { db } from '../db';\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\t// try {\r\n-\t// \tconst patients = await databases.listDocuments(\r\n-\t// \t\tDATABASE_ID!,\r\n-\t// \t\tPATIENT_COLLECTION_ID!,\r\n-\t// \t\t[Query.equal('userId', userId)]\r\n-\t// \t);\r\n-\t// \treturn parseStringify(patients.documents[0]);\r\n-\t// } catch (error: any) {\r\n-\t// \tconsole.log(error);\r\n-\t// }\r\n-};\r\n-\r\n-export const registerPatient = async (\r\n-\tvalues: z.infer<typeof PatientFormValidation>\r\n-) => {\r\n-\ttry {\r\n-\t\tconst { data, success } = PatientFormValidation.safeParse(values);\r\n-\t\tconsole.log(data);\r\n-\t\tif (!success) {\r\n-\t\t\treturn {\r\n-\t\t\t\terror: 'Invalid data',\r\n-\t\t\t};\r\n-\t\t}\r\n-\t\tconst res = await db.patients.create({\r\n-\t\t\tdata,\r\n-\t\t});\r\n-\t\tconsole.log(res);\r\n-\t\treturn { success: true };\r\n-\t} catch (error) {\r\n-\t\tconsole.log(error);\r\n-\t\tif (error instanceof AuthError) {\r\n-\t\t\treturn { error: error.cause?.err?.message };\r\n-\t\t}\r\n-\t\treturn { error: 'error 500' };\r\n-\t}\r\n-};\r\n"
                },
                {
                    "date": 1724105498350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,56 @@\n+'use server';\r\n+import { Query } from 'node-appwrite';\r\n+import {\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+} from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+import { z } from 'zod';\r\n+import { PatientFormValidation } from '../validation';\r\n+import { AuthError } from 'next-auth';\r\n+import { db } from '../db';\r\n+\r\n+export const getPatient = async (id: string) => {\r\n+\ttry {\r\n+\t\tconst patient = await db.patients.findUnique({\r\n+\t\t\twhere: {\r\n+\t\t\t\tid,\r\n+\t\t\t},\r\n+\t\t});\r\n+\t\tif (!patient) return { error: 'Patient not found' };\r\n+\t\treturn {\r\n+\t\t\tsuccess: true,\r\n+\t\t\tdata: {\r\n+\t\t\t\t...patient,\r\n+\t\t\t},\r\n+\t\t};\r\n+\t} catch (error: any) {\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+\treturn { error: 'error 500' };\r\n+};\r\n+\r\n+export const registerPatient = async (\r\n+\tvalues: z.infer<typeof PatientFormValidation>\r\n+) => {\r\n+\ttry {\r\n+\t\tconst { data, success } = PatientFormValidation.safeParse(values);\r\n+\t\tconsole.log(data);\r\n+\t\tif (!success) {\r\n+\t\t\treturn {\r\n+\t\t\t\terror: 'Invalid data',\r\n+\t\t\t};\r\n+\t\t}\r\n+\t\tconst { id } = await db.patients.create({\r\n+\t\t\tdata,\r\n+\t\t});\r\n+\t\treturn { success: true, createdId: id };\r\n+\t} catch (error) {\r\n+\t\tconsole.log(error);\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1724105748927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,16 +14,16 @@\n export const getPatient = async (id: string) => {\r\n \ttry {\r\n \t\tconst patient = await db.patients.findUnique({\r\n \t\t\twhere: {\r\n-\t\t\t\tid,\r\n+\t\t\t\tuserId: id,\r\n \t\t\t},\r\n \t\t});\r\n \t\tif (!patient) return { error: 'Patient not found' };\r\n \t\treturn {\r\n \t\t\tsuccess: true,\r\n \t\t\tdata: {\r\n-\t\t\t\t...patient,\r\n+\t\t\t\t...patient\r\n \t\t\t},\r\n \t\t};\r\n \t} catch (error: any) {\r\n \t\treturn { error: 'error 500' };\r\n"
                },
                {
                    "date": 1724106215980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,27 +9,30 @@\n import { z } from 'zod';\r\n import { PatientFormValidation } from '../validation';\r\n import { AuthError } from 'next-auth';\r\n import { db } from '../db';\r\n+import { use } from 'react';\r\n \r\n export const getPatient = async (id: string) => {\r\n \ttry {\r\n-\t\tconst patient = await db.patients.findUnique({\r\n+\t\tconst patient = await db.patients.findFirst({\r\n \t\t\twhere: {\r\n \t\t\t\tuserId: id,\r\n \t\t\t},\r\n+\t\t\tselect: {\r\n+\t\t\t\tid: true,\r\n+\t\t\t},\r\n \t\t});\r\n \t\tif (!patient) return { error: 'Patient not found' };\r\n \t\treturn {\r\n \t\t\tsuccess: true,\r\n \t\t\tdata: {\r\n-\t\t\t\t...patient\r\n+\t\t\t\t...patient,\r\n \t\t\t},\r\n \t\t};\r\n \t} catch (error: any) {\r\n \t\treturn { error: 'error 500' };\r\n \t}\r\n-\treturn { error: 'error 500' };\r\n };\r\n \r\n export const registerPatient = async (\r\n \tvalues: z.infer<typeof PatientFormValidation>\r\n@@ -53,53 +56,4 @@\n \t\t}\r\n \t\treturn { error: 'error 500' };\r\n \t}\r\n };\r\n-'use server';\r\n-import { Query } from 'node-appwrite';\r\n-import {\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-import { z } from 'zod';\r\n-import { PatientFormValidation } from '../validation';\r\n-import { AuthError } from 'next-auth';\r\n-import { db } from '../db';\r\n-\r\n-export const getPatient = async (userId: string) => {\r\n-\t// try {\r\n-\t// \tconst patients = await databases.listDocuments(\r\n-\t// \t\tDATABASE_ID!,\r\n-\t// \t\tPATIENT_COLLECTION_ID!,\r\n-\t// \t\t[Query.equal('userId', userId)]\r\n-\t// \t);\r\n-\t// \treturn parseStringify(patients.documents[0]);\r\n-\t// } catch (error: any) {\r\n-\t// \tconsole.log(error);\r\n-\t// }\r\n-};\r\n-\r\n-export const registerPatient = async (\r\n-\tvalues: z.infer<typeof PatientFormValidation>\r\n-) => {\r\n-\ttry {\r\n-\t\tconst { data, success } = PatientFormValidation.safeParse(values);\r\n-\t\tconsole.log(data);\r\n-\t\tif (!success) {\r\n-\t\t\treturn {\r\n-\t\t\t\terror: 'Invalid data',\r\n-\t\t\t};\r\n-\t\t}\r\n-\t\tconst { id } = await db.patients.create({\r\n-\t\t\tdata,\r\n-\t\t});\r\n-\t\treturn { success: true, createdId: id };\r\n-\t} catch (error) {\r\n-\t\tconsole.log(error);\r\n-\t\tif (error instanceof AuthError) {\r\n-\t\t\treturn { error: error.cause?.err?.message };\r\n-\t\t}\r\n-\t\treturn { error: 'error 500' };\r\n-\t}\r\n-};\r\n"
                },
                {
                    "date": 1724110727393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,9 @@\n 'use server';\r\n-import { Query } from 'node-appwrite';\r\n-import {\r\n-\tdatabases,\r\n-\tDATABASE_ID,\r\n-\tPATIENT_COLLECTION_ID,\r\n-} from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n import { z } from 'zod';\r\n import { PatientFormValidation } from '../validation';\r\n import { AuthError } from 'next-auth';\r\n import { db } from '../db';\r\n-import { use } from 'react';\r\n \r\n export const getPatient = async (id: string) => {\r\n \ttry {\r\n \t\tconst patient = await db.patients.findFirst({\r\n"
                },
                {
                    "date": 1724781399031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,50 @@\n+'use server';\r\n+import { z } from 'zod';\r\n+import { PatientFormValidation } from '../validation';\r\n+import { AuthError } from 'next-auth';\r\n+import { db } from '../db';\r\n+\r\n+export const getPatient = async (id: string) => {\r\n+\ttry {\r\n+\t\tconst patient = await db.patients.findFirst({\r\n+\t\t\twhere: {\r\n+\t\t\t\tuserId: id,\r\n+\t\t\t},\r\n+\t\t\tselect: {\r\n+\t\t\t\tid: true,\r\n+\t\t\t},\r\n+\t\t});\r\n+\t\tif (!patient) return { error: 'Patient not found' };\r\n+\t\treturn {\r\n+\t\t\tsuccess: true,\r\n+\t\t\tdata: {\r\n+\t\t\t\t...patient,\r\n+\t\t\t},\r\n+\t\t};\r\n+\t} catch (error: any) {\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async (\r\n+\tvalues: z.infer<typeof PatientFormValidation>\r\n+) => {\r\n+\ttry {\r\n+\t\tconst { data, success } = PatientFormValidation.safeParse(values);\r\n+\t\tif (!success) {\r\n+\t\t\treturn {\r\n+\t\t\t\terror: 'Invalid data',\r\n+\t\t\t};\r\n+\t\t}\r\n+\t\tconst { id } = await db.patients.create({\r\n+\t\t\tdata,\r\n+\t\t});\r\n+\t\treturn { success: true, createdId: id };\r\n+\t} catch (error) {\r\n+\t\tconsole.log(error);\r\n+\t\tif (error instanceof AuthError) {\r\n+\t\t\treturn { error: error.cause?.err?.message };\r\n+\t\t}\r\n+\t\treturn { error: 'error 500' };\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1724787637938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n 'use server';\r\n import { z } from 'zod';\r\n import { PatientFormValidation } from '../validation';\r\n-import { AuthError } from 'next-auth';\r\n import { db } from '../db';\r\n \r\n export const getPatient = async (id: string) => {\r\n \ttry {\r\n@@ -41,61 +40,7 @@\n \t\t});\r\n \t\treturn { success: true, createdId: id };\r\n \t} catch (error) {\r\n \t\tconsole.log(error);\r\n-\t\tif (error instanceof AuthError) {\r\n-\t\t\treturn { error: error.cause?.err?.message };\r\n-\t\t}\r\n \t\treturn { error: 'error 500' };\r\n \t}\r\n };\r\n-'use server';\r\n-import { z } from 'zod';\r\n-import { PatientFormValidation } from '../validation';\r\n-import { AuthError } from 'next-auth';\r\n-import { db } from '../db';\r\n-\r\n-export const getPatient = async (id: string) => {\r\n-\ttry {\r\n-\t\tconst patient = await db.patients.findFirst({\r\n-\t\t\twhere: {\r\n-\t\t\t\tuserId: id,\r\n-\t\t\t},\r\n-\t\t\tselect: {\r\n-\t\t\t\tid: true,\r\n-\t\t\t},\r\n-\t\t});\r\n-\t\tif (!patient) return { error: 'Patient not found' };\r\n-\t\treturn {\r\n-\t\t\tsuccess: true,\r\n-\t\t\tdata: {\r\n-\t\t\t\t...patient,\r\n-\t\t\t},\r\n-\t\t};\r\n-\t} catch (error: any) {\r\n-\t\treturn { error: 'error 500' };\r\n-\t}\r\n-};\r\n-\r\n-export const registerPatient = async (\r\n-\tvalues: z.infer<typeof PatientFormValidation>\r\n-) => {\r\n-\ttry {\r\n-\t\tconst { data, success } = PatientFormValidation.safeParse(values);\r\n-\t\tconsole.log(data);\r\n-\t\tif (!success) {\r\n-\t\t\treturn {\r\n-\t\t\t\terror: 'Invalid data',\r\n-\t\t\t};\r\n-\t\t}\r\n-\t\tconst { id } = await db.patients.create({\r\n-\t\t\tdata,\r\n-\t\t});\r\n-\t\treturn { success: true, createdId: id };\r\n-\t} catch (error) {\r\n-\t\tconsole.log(error);\r\n-\t\tif (error instanceof AuthError) {\r\n-\t\t\treturn { error: error.cause?.err?.message };\r\n-\t\t}\r\n-\t\treturn { error: 'error 500' };\r\n-\t}\r\n-};\r\n"
                }
            ],
            "date": 1723257979955,
            "name": "Commit-0",
            "content": "'use server';\r\nimport { Query, ID } from 'node-appwrite';\r\nimport { InputFile } from 'node-appwrite/file';\r\nimport {\r\n\tusers,\r\n\tstorage,\r\n\tNEXT_PUBLIC_BUCKET_ID,\r\n\tdatabases,\r\n\tDATABASE_ID,\r\n\tPATIENT_COLLECTION_ID,\r\n\tNEXT_PUBLIC_ENDPOINT,\r\n\tPROJECT_ID,\r\n} from '../appwite.config';\r\nimport { parseStringify } from '../utils';\r\n\r\nexport const createUser = async (user: CreateUserParams) => {\r\n\ttry {\r\n\t\tconst newUser = await users.create(\r\n\t\t\tID.unique(),\r\n\t\t\tuser.email,\r\n\t\t\tuser.phone,\r\n\t\t\tundefined,\r\n\t\t\tuser.name\r\n\t\t);\r\n\t\treturn { error: false, data: parseStringify(newUser) };\r\n\t} catch (error: any) {\r\n\t\tif (error && error?.code === 409) {\r\n\t\t\treturn { error: error.response };\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexport const getUser = async (userId: string) => {\r\n\ttry {\r\n\t\tconst user = await users.get(userId);\r\n\t\treturn parseStringify(user);\r\n\t} catch (error: any) {\r\n\t\tconsole.log(error);\r\n\t}\r\n};\r\n\r\nexport const getPatient = async (userId: string) => {\r\n\ttry {\r\n\t\tconst patients = await databases.listDocuments(\r\n\t\t\tDATABASE_ID!,\r\n\t\t\tPATIENT_COLLECTION_ID!,\r\n\t\t\t[Query.equal('userId', userId)]\r\n\t\t);\r\n\r\n\t\treturn parseStringify(patients.documents[0]);\r\n\t} catch (error: any) {\r\n\t\tconsole.log(error);\r\n\t}\r\n};\r\n\r\nexport const registerPatient = async ({\r\n\tidentificationDocument,\r\n\t...patient\r\n}: RegisterUserParams) => {\r\n\ttry {\r\n\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n\t\tlet file;\r\n\t\tif (identificationDocument) {\r\n\t\t\tconst inputFile =\r\n\t\t\t\tidentificationDocument &&\r\n\t\t\t\tInputFile.fromBuffer(\r\n\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n\t\t\t\t);\r\n\r\n\t\t\tfile = await storage.createFile(\r\n\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n\t\t\t\tID.unique(),\r\n\t\t\t\tinputFile\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n\t\tconst newPatient = await databases.createDocument(\r\n\t\t\tDATABASE_ID!,\r\n\t\t\tPATIENT_COLLECTION_ID!,\r\n\t\t\tID.unique(),\r\n\t\t\t{\r\n\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n\t\t\t\tidentificationDocumentUrl: file?.$id\r\n\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n\t\t\t\t\t: null,\r\n\t\t\t\t...patient,\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn parseStringify(newPatient);\r\n\t} catch (error) {\r\n\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n\t}\r\n};\r\n"
        }
    ]
}