{
    "sourceFile": "lib/actions/patient.actions.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1721424462558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1721424492050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,72 @@\n+'use server';\r\n+import { Query, ID, InputFile } from 'node-appwrite';\r\n+import { users } from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+\r\n+export const createUser = async (user: CreateUserParams) => {\r\n+\ttry {\r\n+\t\tconst newUser = await users.create(\r\n+\t\t\tID.unique(),\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.phone,\r\n+\t\t\tundefined,\r\n+\t\t\tuser.name\r\n+\t\t);\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error && error?.code === 409) {\r\n+\t\t\tconst existingUser = await users.list([\r\n+\t\t\t\tQuery.equal('email', [user.email]),\r\n+\t\t\t]);\r\n+\t\t\treturn { error: true, data: error.response };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const getUser = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst user = await users.get(userId);\r\n+\r\n+\t\treturn parseStringify(user);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async ({\r\n+\tidentificationDocument,\r\n+\t...patient\r\n+}: RegisterUserParams) => {\r\n+\ttry {\r\n+\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n+\t\tlet file;\r\n+\t\tif (identificationDocument) {\r\n+\t\t\tconst inputFile =\r\n+\t\t\t\tidentificationDocument &&\r\n+\t\t\t\tInputFile.fromBlob(\r\n+\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n+\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n+\t\t\t\t);\r\n+\r\n+\t\t\tfile = await storage.createFile(BUCKET_ID!, ID.unique(), inputFile);\r\n+\t\t}\r\n+\r\n+\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n+\t\t\t\tidentificationDocumentUrl: file?.$id\r\n+\t\t\t\t\t? `${ENDPOINT}/storage/buckets/${BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n+\t\t\t\t\t: null,\r\n+\t\t\t\t...patient,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1721425813117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,73 @@\n+'use server';\r\n+import { Query, ID } from 'node-appwrite';\r\n+import { InputFile } from 'node-appwrite/file';\r\n+import { users } from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+\r\n+export const createUser = async (user: CreateUserParams) => {\r\n+\ttry {\r\n+\t\tconst newUser = await users.create(\r\n+\t\t\tID.unique(),\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.phone,\r\n+\t\t\tundefined,\r\n+\t\t\tuser.name\r\n+\t\t);\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error && error?.code === 409) {\r\n+\t\t\tconst existingUser = await users.list([\r\n+\t\t\t\tQuery.equal('email', [user.email]),\r\n+\t\t\t]);\r\n+\t\t\treturn { error: true, data: error.response };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const getUser = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst user = await users.get(userId);\r\n+\r\n+\t\treturn parseStringify(user);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async ({\r\n+\tidentificationDocument,\r\n+\t...patient\r\n+}: RegisterUserParams) => {\r\n+\ttry {\r\n+\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n+\t\tlet file;\r\n+\t\tif (identificationDocument) {\r\n+\t\t\tconst inputFile =\r\n+\t\t\t\tidentificationDocument &&\r\n+\t\t\t\tInputFile.fromBlob(\r\n+\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n+\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n+\t\t\t\t);\r\n+\r\n+\t\t\tfile = await storage.createFile(BUCKET_ID!, ID.unique(), inputFile);\r\n+\t\t}\r\n+\r\n+\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n+\t\t\t\tidentificationDocumentUrl: file?.$id\r\n+\t\t\t\t\t? `${ENDPOINT}/storage/buckets/${BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n+\t\t\t\t\t: null,\r\n+\t\t\t\t...patient,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1721425910735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,73 @@\n+'use server';\r\n+import { Query, ID } from 'node-appwrite';\r\n+import { InputFile } from 'node-appwrite/file';\r\n+import { users } from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+\r\n+export const createUser = async (user: CreateUserParams) => {\r\n+\ttry {\r\n+\t\tconst newUser = await users.create(\r\n+\t\t\tID.unique(),\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.phone,\r\n+\t\t\tundefined,\r\n+\t\t\tuser.name\r\n+\t\t);\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error && error?.code === 409) {\r\n+\t\t\tconst existingUser = await users.list([\r\n+\t\t\t\tQuery.equal('email', [user.email]),\r\n+\t\t\t]);\r\n+\t\t\treturn { error: true, data: error.response };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const getUser = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst user = await users.get(userId);\r\n+\r\n+\t\treturn parseStringify(user);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async ({\r\n+\tidentificationDocument,\r\n+\t...patient\r\n+}: RegisterUserParams) => {\r\n+\ttry {\r\n+\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n+\t\tlet file;\r\n+\t\tif (identificationDocument) {\r\n+\t\t\tconst inputFile =\r\n+\t\t\t\tidentificationDocument &&\r\n+\t\t\t\tInputFile.fromBuffer(\r\n+\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n+\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n+\t\t\t\t);\r\n+\r\n+\t\t\tfile = await storage.createFile(BUCKET_ID!, ID.unique(), inputFile);\r\n+\t\t}\r\n+\r\n+\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n+\t\t\t\tidentificationDocumentUrl: file?.$id\r\n+\t\t\t\t\t? `${ENDPOINT}/storage/buckets/${BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n+\t\t\t\t\t: null,\r\n+\t\t\t\t...patient,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n+\t}\r\n+};\r\n"
                },
                {
                    "date": 1721426106858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n 'use server';\r\n import { Query, ID } from 'node-appwrite';\r\n import { InputFile } from 'node-appwrite/file';\r\n-import { users } from '../appwite.config';\r\n+import { users, storage, NEXT_PUBLIC_BUCKET_ID, databases } from '../appwite.config';\r\n import { parseStringify } from '../utils';\r\n \r\n export const createUser = async (user: CreateUserParams) => {\r\n \ttry {\r\n@@ -48,9 +48,9 @@\n \t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n \t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n \t\t\t\t);\r\n \r\n-\t\t\tfile = await storage.createFile(BUCKET_ID!, ID.unique(), inputFile);\r\n+\t\t\tfile = await storage.createFile(NEXT_PUBLIC_BUCKET_ID!, ID.unique(), inputFile);\r\n \t\t}\r\n \r\n \t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n \t\tconst newPatient = await databases.createDocument(\r\n@@ -70,221 +70,4 @@\n \t} catch (error) {\r\n \t\tconsole.error('An error occurred while creating a new patient:', error);\r\n \t}\r\n };\r\n-'use server';\r\n-import { Query, ID } from 'node-appwrite';\r\n-import { InputFile } from 'node-appwrite/file';\r\n-import { users } from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-\r\n-export const createUser = async (user: CreateUserParams) => {\r\n-\ttry {\r\n-\t\tconst newUser = await users.create(\r\n-\t\t\tID.unique(),\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.phone,\r\n-\t\t\tundefined,\r\n-\t\t\tuser.name\r\n-\t\t);\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error && error?.code === 409) {\r\n-\t\t\tconst existingUser = await users.list([\r\n-\t\t\t\tQuery.equal('email', [user.email]),\r\n-\t\t\t]);\r\n-\t\t\treturn { error: true, data: error.response };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const getUser = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst user = await users.get(userId);\r\n-\r\n-\t\treturn parseStringify(user);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const registerPatient = async ({\r\n-\tidentificationDocument,\r\n-\t...patient\r\n-}: RegisterUserParams) => {\r\n-\ttry {\r\n-\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n-\t\tlet file;\r\n-\t\tif (identificationDocument) {\r\n-\t\t\tconst inputFile =\r\n-\t\t\t\tidentificationDocument &&\r\n-\t\t\t\tInputFile.fromBlob(\r\n-\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n-\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n-\t\t\t\t);\r\n-\r\n-\t\t\tfile = await storage.createFile(BUCKET_ID!, ID.unique(), inputFile);\r\n-\t\t}\r\n-\r\n-\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n-\t\t\t\tidentificationDocumentUrl: file?.$id\r\n-\t\t\t\t\t? `${ENDPOINT}/storage/buckets/${BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n-\t\t\t\t\t: null,\r\n-\t\t\t\t...patient,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n-\t}\r\n-};\r\n-'use server';\r\n-import { Query, ID, InputFile } from 'node-appwrite';\r\n-import { users } from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-\r\n-export const createUser = async (user: CreateUserParams) => {\r\n-\ttry {\r\n-\t\tconst newUser = await users.create(\r\n-\t\t\tID.unique(),\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.phone,\r\n-\t\t\tundefined,\r\n-\t\t\tuser.name\r\n-\t\t);\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error && error?.code === 409) {\r\n-\t\t\tconst existingUser = await users.list([\r\n-\t\t\t\tQuery.equal('email', [user.email]),\r\n-\t\t\t]);\r\n-\t\t\treturn { error: true, data: error.response };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const getUser = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst user = await users.get(userId);\r\n-\r\n-\t\treturn parseStringify(user);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const registerPatient = async ({\r\n-\tidentificationDocument,\r\n-\t...patient\r\n-}: RegisterUserParams) => {\r\n-\ttry {\r\n-\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n-\t\tlet file;\r\n-\t\tif (identificationDocument) {\r\n-\t\t\tconst inputFile =\r\n-\t\t\t\tidentificationDocument &&\r\n-\t\t\t\tInputFile.fromBlob(\r\n-\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n-\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n-\t\t\t\t);\r\n-\r\n-\t\t\tfile = await storage.createFile(BUCKET_ID!, ID.unique(), inputFile);\r\n-\t\t}\r\n-\r\n-\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n-\t\t\t\tidentificationDocumentUrl: file?.$id\r\n-\t\t\t\t\t? `${ENDPOINT}/storage/buckets/${BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n-\t\t\t\t\t: null,\r\n-\t\t\t\t...patient,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n-\t}\r\n-};\r\n-'use server';\r\n-import { Query, ID } from 'node-appwrite';\r\n-import { users } from '../appwite.config';\r\n-import { parseStringify } from '../utils';\r\n-\r\n-export const createUser = async (user: CreateUserParams) => {\r\n-\ttry {\r\n-\t\tconst newUser = await users.create(\r\n-\t\t\tID.unique(),\r\n-\t\t\tuser.email,\r\n-\t\t\tuser.phone,\r\n-\t\t\tundefined,\r\n-\t\t\tuser.name\r\n-\t\t);\r\n-\t\treturn { error: false, data: parseStringify(newUser) };\r\n-\t} catch (error: any) {\r\n-\t\tif (error && error?.code === 409) {\r\n-\t\t\tconst existingUser = await users.list([\r\n-\t\t\t\tQuery.equal('email', [user.email]),\r\n-\t\t\t]);\r\n-\t\t\treturn { error: true, data: error.response };\r\n-\t\t}\r\n-\t}\r\n-};\r\n-\r\n-export const getUser = async (userId: string) => {\r\n-\ttry {\r\n-\t\tconst user = await users.get(userId);\r\n-\r\n-\t\treturn parseStringify(user);\r\n-\t} catch (error: any) {\r\n-\t\tconsole.log(error);\r\n-\t}\r\n-};\r\n-\r\n-export const registerPatient = async ({\r\n-\tidentificationDocument,\r\n-\t...patient\r\n-}: RegisterUserParams) => {\r\n-\ttry {\r\n-\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n-\t\tlet file;\r\n-\t\tif (identificationDocument) {\r\n-\t\t\tconst inputFile =\r\n-\t\t\t\tidentificationDocument &&\r\n-\t\t\t\tInputFile.fromBlob(\r\n-\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n-\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n-\t\t\t\t);\r\n-\r\n-\t\t\tfile = await storage.createFile(BUCKET_ID!, ID.unique(), inputFile);\r\n-\t\t}\r\n-\r\n-\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n-\t\tconst newPatient = await databases.createDocument(\r\n-\t\t\tDATABASE_ID!,\r\n-\t\t\tPATIENT_COLLECTION_ID!,\r\n-\t\t\tID.unique(),\r\n-\t\t\t{\r\n-\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n-\t\t\t\tidentificationDocumentUrl: file?.$id\r\n-\t\t\t\t\t? `${ENDPOINT}/storage/buckets/${BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n-\t\t\t\t\t: null,\r\n-\t\t\t\t...patient,\r\n-\t\t\t}\r\n-\t\t);\r\n-\r\n-\t\treturn parseStringify(newPatient);\r\n-\t} catch (error) {\r\n-\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n-\t}\r\n-};\r\n"
                },
                {
                    "date": 1721426978021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,17 @@\n 'use server';\r\n import { Query, ID } from 'node-appwrite';\r\n import { InputFile } from 'node-appwrite/file';\r\n-import { users, storage, NEXT_PUBLIC_BUCKET_ID, databases } from '../appwite.config';\r\n+import {\r\n+\tusers,\r\n+\tstorage,\r\n+\tNEXT_PUBLIC_BUCKET_ID,\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+\tNEXT_PUBLIC_ENDPOINT,\r\n+\tPROJECT_ID,\r\n+} from '../appwite.config';\r\n import { parseStringify } from '../utils';\r\n \r\n export const createUser = async (user: CreateUserParams) => {\r\n \ttry {\r\n@@ -48,9 +57,13 @@\n \t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n \t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n \t\t\t\t);\r\n \r\n-\t\t\tfile = await storage.createFile(NEXT_PUBLIC_BUCKET_ID!, ID.unique(), inputFile);\r\n+\t\t\tfile = await storage.createFile(\r\n+\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n+\t\t\t\tID.unique(),\r\n+\t\t\t\tinputFile\r\n+\t\t\t);\r\n \t\t}\r\n \r\n \t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n \t\tconst newPatient = await databases.createDocument(\r\n@@ -59,9 +72,9 @@\n \t\t\tID.unique(),\r\n \t\t\t{\r\n \t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n \t\t\t\tidentificationDocumentUrl: file?.$id\r\n-\t\t\t\t\t? `${ENDPOINT}/storage/buckets/${BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n+\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n \t\t\t\t\t: null,\r\n \t\t\t\t...patient,\r\n \t\t\t}\r\n \t\t);\r\n"
                },
                {
                    "date": 1721427147028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,86 @@\n+'use server';\r\n+import { Query, ID } from 'node-appwrite';\r\n+import { InputFile } from 'node-appwrite/file';\r\n+import {\r\n+\tusers,\r\n+\tstorage,\r\n+\tNEXT_PUBLIC_BUCKET_ID,\r\n+\tdatabases,\r\n+\tDATABASE_ID,\r\n+\tPATIENT_COLLECTION_ID,\r\n+\tNEXT_PUBLIC_ENDPOINT,\r\n+\tPROJECT_ID,\r\n+} from '../appwite.config';\r\n+import { parseStringify } from '../utils';\r\n+\r\n+export const createUser = async (user: CreateUserParams) => {\r\n+\ttry {\r\n+\t\tconst newUser = await users.create(\r\n+\t\t\tID.unique(),\r\n+\t\t\tuser.email,\r\n+\t\t\tuser.phone,\r\n+\t\t\tundefined,\r\n+\t\t\tuser.name\r\n+\t\t);\r\n+\t\treturn { error: false, data: parseStringify(newUser) };\r\n+\t} catch (error: any) {\r\n+\t\tif (error && error?.code === 409) {\r\n+\t\t\tconst existingUser = await users.list([\r\n+\t\t\t\tQuery.equal('email', [user.email]),\r\n+\t\t\t]);\r\n+\t\t\treturn { error: true, data: error.response };\r\n+\t\t}\r\n+\t}\r\n+};\r\n+\r\n+export const getUser = async (userId: string) => {\r\n+\ttry {\r\n+\t\tconst user = await users.get(userId);\r\n+\r\n+\t\treturn parseStringify(user);\r\n+\t} catch (error: any) {\r\n+\t\tconsole.log(error);\r\n+\t}\r\n+};\r\n+\r\n+export const registerPatient = async ({\r\n+\tidentificationDocument,\r\n+\t...patient\r\n+}: RegisterUserParams) => {\r\n+\ttry {\r\n+\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n+\t\tlet file;\r\n+\t\tif (identificationDocument) {\r\n+\t\t\tconst inputFile =\r\n+\t\t\t\tidentificationDocument &&\r\n+\t\t\t\tInputFile.fromBuffer(\r\n+\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n+\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n+\t\t\t\t);\r\n+\r\n+\t\t\tfile = await storage.createFile(\r\n+\t\t\t\tNEXT_PUBLIC_BUCKET_ID!,\r\n+\t\t\t\tID.unique(),\r\n+\t\t\t\tinputFile\r\n+\t\t\t);\r\n+\t\t}\r\n+\r\n+\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n+\t\tconst newPatient = await databases.createDocument(\r\n+\t\t\tDATABASE_ID!,\r\n+\t\t\tPATIENT_COLLECTION_ID!,\r\n+\t\t\tID.unique(),\r\n+\t\t\t{\r\n+\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n+\t\t\t\tidentificationDocumentUrl: file?.$id\r\n+\t\t\t\t\t? `${NEXT_PUBLIC_ENDPOINT}/storage/buckets/${NEXT_PUBLIC_BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n+\t\t\t\t\t: null,\r\n+\t\t\t\t...patient,\r\n+\t\t\t}\r\n+\t\t);\r\n+\r\n+\t\treturn parseStringify(newPatient);\r\n+\t} catch (error) {\r\n+\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n+\t}\r\n+};\r\n"
                }
            ],
            "date": 1721424462558,
            "name": "Commit-0",
            "content": "'use server';\r\nimport { Query, ID } from 'node-appwrite';\r\nimport { users } from '../appwite.config';\r\nimport { parseStringify } from '../utils';\r\n\r\nexport const createUser = async (user: CreateUserParams) => {\r\n\ttry {\r\n\t\tconst newUser = await users.create(\r\n\t\t\tID.unique(),\r\n\t\t\tuser.email,\r\n\t\t\tuser.phone,\r\n\t\t\tundefined,\r\n\t\t\tuser.name\r\n\t\t);\r\n\t\treturn { error: false, data: parseStringify(newUser) };\r\n\t} catch (error: any) {\r\n\t\tif (error && error?.code === 409) {\r\n\t\t\tconst existingUser = await users.list([\r\n\t\t\t\tQuery.equal('email', [user.email]),\r\n\t\t\t]);\r\n\t\t\treturn { error: true, data: error.response };\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexport const getUser = async (userId: string) => {\r\n\ttry {\r\n\t\tconst user = await users.get(userId);\r\n\r\n\t\treturn parseStringify(user);\r\n\t} catch (error: any) {\r\n\t\tconsole.log(error);\r\n\t}\r\n};\r\n\r\nexport const registerPatient = async ({\r\n\tidentificationDocument,\r\n\t...patient\r\n}: RegisterUserParams) => {\r\n\ttry {\r\n\t\t// Upload file ->  // https://appwrite.io/docs/references/cloud/client-web/storage#createFile\r\n\t\tlet file;\r\n\t\tif (identificationDocument) {\r\n\t\t\tconst inputFile =\r\n\t\t\t\tidentificationDocument &&\r\n\t\t\t\tInputFile.fromBlob(\r\n\t\t\t\t\tidentificationDocument?.get('blobFile') as Blob,\r\n\t\t\t\t\tidentificationDocument?.get('fileName') as string\r\n\t\t\t\t);\r\n\r\n\t\t\tfile = await storage.createFile(BUCKET_ID!, ID.unique(), inputFile);\r\n\t\t}\r\n\r\n\t\t// Create new patient document -> https://appwrite.io/docs/references/cloud/server-nodejs/databases#createDocument\r\n\t\tconst newPatient = await databases.createDocument(\r\n\t\t\tDATABASE_ID!,\r\n\t\t\tPATIENT_COLLECTION_ID!,\r\n\t\t\tID.unique(),\r\n\t\t\t{\r\n\t\t\t\tidentificationDocumentId: file?.$id ? file.$id : null,\r\n\t\t\t\tidentificationDocumentUrl: file?.$id\r\n\t\t\t\t\t? `${ENDPOINT}/storage/buckets/${BUCKET_ID}/files/${file.$id}/view??project=${PROJECT_ID}`\r\n\t\t\t\t\t: null,\r\n\t\t\t\t...patient,\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\treturn parseStringify(newPatient);\r\n\t} catch (error) {\r\n\t\tconsole.error('An error occurred while creating a new patient:', error);\r\n\t}\r\n};\r\n"
        }
    ]
}